{
  Map<String,String> accountProperties=account.getAccountProperties();
  String password=ProtocolProviderFactory.getProtocolProviderFactory(bundleContext,ProtocolNames.JABBER).loadPassword(account);
  setRememberPassword(false);
  setUserID(account.getUserID());
  if (password != null) {
    setPassword(password);
    setRememberPassword(true);
  }
  String serverAddress=accountProperties.get(ProtocolProviderFactory.SERVER_ADDRESS);
  setServerAddress(serverAddress);
  setClientCertificateId(account.getAccountPropertyString(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE));
  String serverPort=accountProperties.get(ProtocolProviderFactory.SERVER_PORT);
  if (StringUtils.isNullOrEmpty(serverPort))   serverPort=JabberAccountRegistration.DEFAULT_PORT;
  setPort(new Integer(serverPort));
  boolean keepAlive=Boolean.parseBoolean(accountProperties.get("SEND_KEEP_ALIVE"));
  setSendKeepAlive(keepAlive);
  boolean gmailNotificationEnabled=Boolean.parseBoolean(accountProperties.get("GMAIL_NOTIFICATIONS_ENABLED"));
  setGmailNotificationEnabled(gmailNotificationEnabled);
  String useGC=accountProperties.get("GOOGLE_CONTACTS_ENABLED");
  boolean googleContactsEnabled=Boolean.parseBoolean((useGC != null && useGC.length() != 0) ? useGC : "true");
  setGoogleContactsEnabled(googleContactsEnabled);
  String resource=accountProperties.get(ProtocolProviderFactory.RESOURCE);
  setResource(resource);
  String autoGenerateResourceValue=accountProperties.get(ProtocolProviderFactory.AUTO_GENERATE_RESOURCE);
  boolean autoGenerateResource=JabberAccountRegistration.DEFAULT_RESOURCE_AUTOGEN;
  if (autoGenerateResourceValue != null)   autoGenerateResource=Boolean.parseBoolean(autoGenerateResourceValue);
  setResourceAutogenerated(autoGenerateResource);
  String priority=accountProperties.get(ProtocolProviderFactory.RESOURCE_PRIORITY);
  if (StringUtils.isNullOrEmpty(priority))   priority=JabberAccountRegistration.DEFAULT_PRIORITY;
  setPriority(new Integer(priority));
  String dtmfMethod=account.getAccountPropertyString("DTMF_METHOD");
  setDTMFMethod(dtmfMethod);
  String dtmfMinimalToneDuration=account.getAccountPropertyString("DTMF_MINIMAL_TONE_DURATION");
  setDtmfMinimalToneDuration(dtmfMinimalToneDuration);
  securityRegistration.loadAccount(account);
  String useIce=accountProperties.get(ProtocolProviderFactory.IS_USE_ICE);
  boolean isUseIce=Boolean.parseBoolean((useIce != null && useIce.length() != 0) ? useIce : "true");
  setUseIce(isUseIce);
  String useGoogleIce=accountProperties.get(ProtocolProviderFactory.IS_USE_GOOGLE_ICE);
  boolean isUseGoogleIce=Boolean.parseBoolean((useGoogleIce != null && useGoogleIce.length() != 0) ? useGoogleIce : "true");
  setUseGoogleIce(isUseGoogleIce);
  String useAutoDiscoverStun=accountProperties.get(ProtocolProviderFactory.AUTO_DISCOVER_STUN);
  boolean isUseAutoDiscoverStun=Boolean.parseBoolean((useAutoDiscoverStun != null && useAutoDiscoverStun.length() != 0) ? useAutoDiscoverStun : "true");
  setAutoDiscoverStun(isUseAutoDiscoverStun);
  String useDefaultStun=accountProperties.get(ProtocolProviderFactory.USE_DEFAULT_STUN_SERVER);
  boolean isUseDefaultStun=Boolean.parseBoolean((useDefaultStun != null && useDefaultStun.length() != 0) ? useDefaultStun : "true");
  setUseDefaultStunServer(isUseDefaultStun);
  this.additionalStunServers.clear();
  for (int i=0; i < StunServerDescriptor.MAX_STUN_SERVER_COUNT; i++) {
    StunServerDescriptor stunServer=StunServerDescriptor.loadDescriptor(accountProperties,ProtocolProviderFactory.STUN_PREFIX + i);
    if (stunServer == null)     break;
    String stunPassword=loadStunPassword(bundleContext,account,ProtocolProviderFactory.STUN_PREFIX + i);
    if (stunPassword != null) {
      stunServer.setPassword(stunPassword);
    }
    addStunServer(stunServer);
  }
  String useJN=accountProperties.get(ProtocolProviderFactory.IS_USE_JINGLE_NODES);
  boolean isUseJN=Boolean.parseBoolean((useJN != null && useJN.length() != 0) ? useJN : "true");
  setUseJingleNodes(isUseJN);
  String useAutoDiscoverJN=accountProperties.get(ProtocolProviderFactory.AUTO_DISCOVER_JINGLE_NODES);
  boolean isUseAutoDiscoverJN=Boolean.parseBoolean((useAutoDiscoverJN != null && useAutoDiscoverJN.length() != 0) ? useAutoDiscoverJN : "true");
  setAutoDiscoverJingleNodes(isUseAutoDiscoverJN);
  this.additionalJingleNodes.clear();
  for (int i=0; i < JingleNodeDescriptor.MAX_JN_RELAY_COUNT; i++) {
    JingleNodeDescriptor jn=JingleNodeDescriptor.loadDescriptor(accountProperties,JingleNodeDescriptor.JN_PREFIX + i);
    if (jn == null)     break;
    addJingleNodes(jn);
  }
  String useUPNP=accountProperties.get(ProtocolProviderFactory.IS_USE_UPNP);
  boolean isUseUPNP=Boolean.parseBoolean((useUPNP != null && useUPNP.length() != 0) ? useUPNP : "true");
  setUseUPNP(isUseUPNP);
  String allowNonSecure=accountProperties.get(ProtocolProviderFactory.IS_ALLOW_NON_SECURE);
  boolean isAllowNonSecure=Boolean.parseBoolean((allowNonSecure != null && allowNonSecure.length() != 0) ? allowNonSecure : "false");
  setAllowNonSecure(isAllowNonSecure);
  boolean isServerOverriden=account.getAccountPropertyBoolean(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,false);
  setServerOverridden(isServerOverriden);
  boolean disabledJingle=Boolean.parseBoolean(accountProperties.get(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT));
  setDisableJingle(disabledJingle);
  String overridePhoneSuffix=accountProperties.get("OVERRIDE_PHONE_SUFFIX");
  setOverridePhoneSufix(overridePhoneSuffix);
  String bypassCapsDomain=accountProperties.get("TELEPHONY_BYPASS_GTALK_CAPS");
  setTelephonyDomainBypassCaps(bypassCapsDomain);
  encodingsRegistration.loadAccount(account,ServiceUtils.getService(bundleContext,MediaService.class));
}
