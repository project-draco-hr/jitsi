{
  if (protocolIconPath != null)   accountProperties.put(ProtocolProviderFactory.PROTOCOL_ICON_PATH,protocolIconPath);
  if (accountIconPath != null)   accountProperties.put(ProtocolProviderFactory.ACCOUNT_ICON_PATH,accountIconPath);
  if (isRememberPassword()) {
    accountProperties.put(ProtocolProviderFactory.PASSWORD,passwd);
  }
  accountProperties.put("GMAIL_NOTIFICATIONS_ENABLED",String.valueOf(isGmailNotificationEnabled()));
  accountProperties.put("GOOGLE_CONTACTS_ENABLED",String.valueOf(isGoogleContactsEnabled()));
  String serverName=null;
  if (getServerAddress() != null && getServerAddress().length() > 0) {
    serverName=getServerAddress();
  }
 else {
    serverName=getServerFromUserName(userName);
  }
  if (isServerOverridden()) {
    accountProperties.put(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,Boolean.toString(true));
  }
 else {
    accountProperties.put(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,Boolean.toString(false));
  }
  if (serverName == null || serverName.length() <= 0)   throw new OperationFailedException("Should specify a server for user name " + userName + ".",OperationFailedException.SERVER_NOT_SPECIFIED);
  if (userName.indexOf('@') < 0 && getDefaultUserSufix() != null)   userName=userName + '@' + getDefaultUserSufix();
  if (getOverridePhoneSuffix() != null) {
    accountProperties.put("OVERRIDE_PHONE_SUFFIX",getOverridePhoneSuffix());
  }
  accountProperties.put(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT,Boolean.toString(isJingleDisabled()));
  accountProperties.put("BYPASS_GTALK_CAPABILITIES",String.valueOf(getBypassGtalkCaps()));
  if (getTelephonyDomainBypassCaps() != null) {
    accountProperties.put("TELEPHONY_BYPASS_GTALK_CAPS",getTelephonyDomainBypassCaps());
  }
  accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,serverName);
  String smsServerAddress=getSmsServerAddress();
  String clientCertId=getClientCertificateId();
  if (clientCertId != null) {
    accountProperties.put(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE,clientCertId);
  }
 else {
    accountProperties.remove(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE);
  }
  if (smsServerAddress != null) {
    accountProperties.put(ProtocolProviderFactory.SMS_SERVER_ADDRESS,smsServerAddress);
  }
  accountProperties.put(ProtocolProviderFactory.SERVER_PORT,String.valueOf(getPort()));
  accountProperties.put(ProtocolProviderFactory.AUTO_GENERATE_RESOURCE,String.valueOf(isResourceAutogenerated()));
  accountProperties.put(ProtocolProviderFactory.RESOURCE,getResource());
  accountProperties.put(ProtocolProviderFactory.RESOURCE_PRIORITY,String.valueOf(getPriority()));
  accountProperties.put(ProtocolProviderFactory.IS_USE_ICE,String.valueOf(isUseIce()));
  accountProperties.put(ProtocolProviderFactory.IS_USE_GOOGLE_ICE,String.valueOf(isUseGoogleIce()));
  accountProperties.put(ProtocolProviderFactory.AUTO_DISCOVER_STUN,String.valueOf(isAutoDiscoverStun()));
  accountProperties.put(ProtocolProviderFactory.USE_DEFAULT_STUN_SERVER,String.valueOf(isUseDefaultStunServer()));
  String accountDisplayName=getAccountDisplayName();
  if (accountDisplayName != null && accountDisplayName.length() > 0)   accountProperties.put(ProtocolProviderFactory.ACCOUNT_DISPLAY_NAME,accountDisplayName);
  List<StunServerDescriptor> stunServers=getAdditionalStunServers();
  int serverIndex=-1;
  for (  StunServerDescriptor stunServer : stunServers) {
    serverIndex++;
    stunServer.storeDescriptor(accountProperties,ProtocolProviderFactory.STUN_PREFIX + serverIndex);
  }
  accountProperties.put(ProtocolProviderFactory.IS_USE_JINGLE_NODES,String.valueOf(isUseJingleNodes()));
  accountProperties.put(ProtocolProviderFactory.AUTO_DISCOVER_JINGLE_NODES,String.valueOf(isAutoDiscoverJingleNodes()));
  List<JingleNodeDescriptor> jnRelays=getAdditionalJingleNodes();
  serverIndex=-1;
  for (  JingleNodeDescriptor jnRelay : jnRelays) {
    serverIndex++;
    jnRelay.storeDescriptor(accountProperties,JingleNodeDescriptor.JN_PREFIX + serverIndex);
  }
  accountProperties.put(ProtocolProviderFactory.IS_USE_UPNP,String.valueOf(isUseUPNP()));
  accountProperties.put(ProtocolProviderFactory.IS_ALLOW_NON_SECURE,String.valueOf(isAllowNonSecure()));
  if (getDTMFMethod() != null)   accountProperties.put("DTMF_METHOD",getDTMFMethod());
 else   accountProperties.put("DTMF_METHOD",getDefaultDTMFMethod());
  accountProperties.put(ProtocolProviderFactory.DTMF_MINIMAL_TONE_DURATION,getDtmfMinimalToneDuration());
  securityRegistration.storeProperties(accountProperties);
  encodingsRegistration.storeProperties(accountProperties);
}
