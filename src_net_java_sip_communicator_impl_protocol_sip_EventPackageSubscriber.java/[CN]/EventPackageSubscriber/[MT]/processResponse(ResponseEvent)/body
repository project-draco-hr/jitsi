{
  Response response=responseEvent.getResponse();
  CSeqHeader cseqHeader=(CSeqHeader)response.getHeader(CSeqHeader.NAME);
  if (cseqHeader == null) {
    logger.error("An incoming response did not contain a CSeq header");
    return false;
  }
  if (!Request.SUBSCRIBE.equals(cseqHeader.getMethod()))   return false;
  ClientTransaction clientTransaction=responseEvent.getClientTransaction();
  Request request=clientTransaction.getRequest();
  if (request != null) {
    EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);
    if ((eventHeader == null) || !eventPackage.equalsIgnoreCase(eventHeader.getEventType()))     return false;
  }
  CallIdHeader callIdHeader=(CallIdHeader)response.getHeader(CallIdHeader.NAME);
  String callId=callIdHeader.getCallId();
  Subscription subscription=getSubscription(callId);
  ExpiresHeader expHeader=response.getExpires();
  int statusCode=response.getStatusCode();
  SipProvider sourceProvider=(SipProvider)responseEvent.getSource();
  if (((expHeader != null) && (expHeader.getExpires() == 0)) || (subscription == null)) {
    boolean processed=false;
    if ((statusCode == Response.UNAUTHORIZED) || (statusCode == Response.PROXY_AUTHENTICATION_REQUIRED)) {
      try {
        processAuthenticationChallenge(clientTransaction,response,sourceProvider);
        processed=true;
      }
 catch (      OperationFailedException e) {
        logger.error("can't handle the challenge",e);
      }
    }
 else     if ((statusCode != Response.OK) && (statusCode != Response.ACCEPTED))     processed=true;
    return processed;
  }
  if ((statusCode >= Response.OK) && (statusCode < Response.MULTIPLE_CHOICES)) {
    if ((statusCode == Response.OK) || (statusCode == Response.ACCEPTED)) {
      if (expHeader == null) {
        logger.error("no Expires header in this response");
        return false;
      }
      SubscriptionRefreshTask refreshTask=new SubscriptionRefreshTask(subscription);
      subscription.setTimerTask(refreshTask);
      int refreshDelay=expHeader.getExpires();
      if (refreshDelay >= refreshMargin)       refreshDelay-=refreshMargin;
      timer.schedule(refreshTask,refreshDelay * 1000);
      subscription.setDialog(clientTransaction.getDialog());
      subscription.processSuccessResponse(responseEvent,statusCode);
    }
  }
 else   if ((statusCode >= Response.MULTIPLE_CHOICES) && (statusCode < Response.BAD_REQUEST)) {
    if (logger.isInfoEnabled())     logger.info("Response to subscribe to " + subscription.getAddress() + ": "+ response.getReasonPhrase());
  }
 else   if (statusCode >= Response.BAD_REQUEST) {
    if (statusCode == Response.INTERVAL_TOO_BRIEF) {
      MinExpiresHeader min=(MinExpiresHeader)response.getHeader(MinExpiresHeader.NAME);
      if (min == null) {
        logger.error("no minimal expires value in this 423 " + "response");
        return false;
      }
      ExpiresHeader exp=request.getExpires();
      try {
        exp.setExpires(min.getExpires());
      }
 catch (      InvalidArgumentException e) {
        logger.error("can't set the new expires value",e);
        return false;
      }
      ClientTransaction transac=null;
      try {
        transac=protocolProvider.getDefaultJainSipProvider().getNewClientTransaction(request);
      }
 catch (      TransactionUnavailableException e) {
        logger.error("can't create the client transaction",e);
        return false;
      }
      try {
        transac.sendRequest();
      }
 catch (      SipException e) {
        logger.error("can't send the new request",e);
        return false;
      }
      return true;
    }
 else     if ((statusCode == Response.UNAUTHORIZED) || (statusCode == Response.PROXY_AUTHENTICATION_REQUIRED)) {
      try {
        processAuthenticationChallenge(clientTransaction,response,sourceProvider);
      }
 catch (      OperationFailedException e) {
        logger.error("can't handle the challenge",e);
        removeSubscription(callId,subscription);
        subscription.processFailureResponse(responseEvent,statusCode);
      }
    }
 else {
      if (logger.isDebugEnabled())       logger.debug("error received from the network:\n" + response);
      removeSubscription(callId,subscription);
      subscription.processFailureResponse(responseEvent,statusCode);
    }
  }
  return true;
}
