{
synchronized (this) {
    if (stream == 0) {
      buffer.setLength(0);
      return;
    }
 else     streamIsBusy=true;
  }
  try {
    Object data=buffer.getData();
    byte[] bufferData=null;
    if (data instanceof byte[]) {
      bufferData=(byte[])data;
      if (bufferData.length < bytesPerBuffer)       bufferData=null;
    }
    if (bufferData == null) {
      bufferData=new byte[bytesPerBuffer];
      buffer.setData(bufferData);
    }
    try {
      PortAudio.Pa_ReadStream(stream,bufferData,framesPerBuffer);
    }
 catch (    PortAudioException paex) {
      IOException ioex=new IOException(paex.getLocalizedMessage());
      ioex.initCause(paex);
      throw ioex;
    }
    if (volumeControl != null) {
      if (volumeControl.getMute()) {
        Arrays.fill(bufferData,(byte)0);
      }
 else       if (volumeControl.getDB() != 0) {
        double factor=Math.pow(10,(volumeControl.getDB() / 10d));
        for (int i=0; i < bufferData.length; i+=2) {
          short s=(short)((bufferData[i] & 0xff) | (bufferData[i + 1] << 8));
          s=(short)(s * factor);
          bufferData[i]=(byte)s;
          bufferData[i + 1]=(byte)(s >> 8);
        }
      }
    }
    long bufferTimeStamp=System.nanoTime();
    buffer.setFlags(Buffer.FLAG_SYSTEM_TIME);
    if (format != null)     buffer.setFormat(format);
    buffer.setHeader(null);
    buffer.setLength(bytesPerBuffer);
    buffer.setOffset(0);
    buffer.setSequenceNumber(sequenceNumber++);
    buffer.setTimeStamp(bufferTimeStamp);
  }
  finally {
synchronized (this) {
      streamIsBusy=false;
      notifyAll();
    }
  }
}
