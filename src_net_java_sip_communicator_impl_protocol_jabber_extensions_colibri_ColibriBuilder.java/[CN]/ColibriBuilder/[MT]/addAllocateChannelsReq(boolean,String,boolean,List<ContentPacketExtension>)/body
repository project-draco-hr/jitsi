{
  Objects.requireNonNull(endpointName,"endpointName");
  Objects.requireNonNull(contents,"contents");
  assertRequestType(RequestType.ALLOCATE_CHANNELS);
  request.setType(IQ.Type.GET);
  boolean hasAnyChanges=false;
  for (  ContentPacketExtension cpe : contents) {
    MediaType mediaType=JingleUtils.getMediaType(cpe);
    String contentName=mediaType.toString();
    ColibriConferenceIQ.Content contentRequest=request.getOrCreateContent(contentName);
    ColibriConferenceIQ.ChannelCommon remoteChannelRequest=mediaType != MediaType.DATA ? new ColibriConferenceIQ.Channel() : new ColibriConferenceIQ.SctpConnection();
    remoteChannelRequest.setEndpoint(endpointName);
    remoteChannelRequest.setInitiator(peerIsInitiator);
    if (useBundle) {
      remoteChannelRequest.setChannelBundleId(endpointName);
    }
    if (remoteChannelRequest instanceof ColibriConferenceIQ.Channel) {
      RtpDescriptionPacketExtension rdpe=cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class);
      ColibriConferenceIQ.Channel remoteRtpChannelRequest=(ColibriConferenceIQ.Channel)remoteChannelRequest;
      for (      PayloadTypePacketExtension ptpe : rdpe.getPayloadTypes())       remoteRtpChannelRequest.addPayloadType(ptpe);
      for (      RTPHdrExtPacketExtension ext : rdpe.getExtmapList())       remoteRtpChannelRequest.addRtpHeaderExtension(ext);
      remoteRtpChannelRequest.setLastN(channelLastN);
      remoteRtpChannelRequest.setAdaptiveLastN(adaptiveLastN);
      remoteRtpChannelRequest.setAdaptiveSimulcast(adaptiveSimulcast);
      remoteRtpChannelRequest.setSimulcastMode(simulcastMode);
    }
    if (!useBundle) {
      copyTransportOnChannel(cpe,remoteChannelRequest);
    }
    if (remoteChannelRequest instanceof ColibriConferenceIQ.Channel) {
      hasAnyChanges=true;
      contentRequest.addChannel((ColibriConferenceIQ.Channel)remoteChannelRequest);
    }
 else {
      hasAnyChanges=true;
      contentRequest.addSctpConnection((ColibriConferenceIQ.SctpConnection)remoteChannelRequest);
    }
  }
  if (useBundle && contents.size() >= 1) {
    ColibriConferenceIQ.ChannelBundle bundle=new ColibriConferenceIQ.ChannelBundle(endpointName);
    ContentPacketExtension firstContent=contents.get(0);
    IceUdpTransportPacketExtension transport=firstContent.getFirstChildOfType(IceUdpTransportPacketExtension.class);
    if (transport != null) {
      hasAnyChanges=true;
      bundle.setTransport(IceUdpTransportPacketExtension.cloneTransportAndCandidates(transport,true));
    }
    request.addChannelBundle(bundle);
  }
  return hasAnyChanges;
}
