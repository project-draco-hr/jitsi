{
  Objects.requireNonNull(map,"map");
  Objects.requireNonNull(localChannelsInfo,"localChannelsInfo");
  if (conferenceState == null || StringUtils.isNullOrEmpty(conferenceState.getID())) {
    return false;
  }
  assertRequestType(RequestType.CHANNEL_INFO_UPDATE);
  request.setType(IQ.Type.SET);
  boolean anyUpdates=false;
  for (  Map.Entry<String,RtpDescriptionPacketExtension> e : map.entrySet()) {
    String contentName=e.getKey();
    ColibriConferenceIQ.ChannelCommon channel=getColibriChannel(localChannelsInfo,contentName);
    if (channel != null && channel instanceof ColibriConferenceIQ.Channel) {
      RtpDescriptionPacketExtension rtpPE=e.getValue();
      if (rtpPE == null) {
        continue;
      }
      List<PayloadTypePacketExtension> pts=rtpPE.getPayloadTypes();
      if (pts == null || pts.isEmpty()) {
        continue;
      }
      anyUpdates=true;
      ColibriConferenceIQ.Channel channelRequest=(ColibriConferenceIQ.Channel)getRequestChannel(request.getOrCreateContent(contentName),channel);
      if (channelRequest == null) {
        channelRequest=new ColibriConferenceIQ.Channel();
        channelRequest.setID(channel.getID());
      }
      for (      PayloadTypePacketExtension ptPE : pts) {
        channelRequest.addPayloadType(ptPE);
      }
    }
  }
  return anyUpdates;
}
