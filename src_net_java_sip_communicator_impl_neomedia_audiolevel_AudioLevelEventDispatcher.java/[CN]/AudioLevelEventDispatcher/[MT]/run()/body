{
  long idleTimeoutStart=-1;
  while (true) {
    SimpleAudioLevelListener listener;
    AudioLevelMap cache;
    long ssrc;
    byte[] data;
    int dataLength;
synchronized (this) {
      if (!Thread.currentThread().equals(thread))       break;
      listener=this.listener;
      cache=this.cache;
      ssrc=this.ssrc;
      if ((listener == null) && ((cache == null) || (ssrc == -1)))       break;
      data=this.data;
      dataLength=this.dataLength;
      if ((data == null) || (dataLength < 1)) {
        if (idleTimeoutStart == -1)         idleTimeoutStart=System.currentTimeMillis();
 else         if ((System.currentTimeMillis() - idleTimeoutStart) >= IDLE_TIMEOUT)         break;
        boolean interrupted=false;
        try {
          wait(IDLE_TIMEOUT);
        }
 catch (        InterruptedException ie) {
          interrupted=true;
        }
        if (interrupted)         Thread.currentThread().interrupt();
        continue;
      }
      this.data=null;
      this.dataLength=0;
      idleTimeoutStart=-1;
    }
    int newLevel=AudioLevelCalculator.calculateSoundPressureLevel(data,0,dataLength,SimpleAudioLevelListener.MIN_LEVEL,SimpleAudioLevelListener.MAX_LEVEL,lastLevel);
synchronized (this) {
      if ((this.data == null) && (this.listener == null) && ((this.cache == null) || (this.ssrc == -1)))       this.data=data;
    }
    try {
      if ((cache != null) && (ssrc != -1))       cache.putLevel(ssrc,newLevel);
      if (listener != null)       listener.audioLevelChanged(newLevel);
    }
  finally {
      lastLevel=newLevel;
    }
  }
}
