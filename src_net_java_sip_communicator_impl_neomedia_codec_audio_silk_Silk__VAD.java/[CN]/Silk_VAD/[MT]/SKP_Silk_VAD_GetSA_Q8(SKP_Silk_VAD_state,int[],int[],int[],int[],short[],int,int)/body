{
  int SA_Q15, input_tilt;
  int[] scratch=new int[3 * Silk_define.MAX_FRAME_LENGTH / 2];
  int decimated_framelength, dec_subframe_length, dec_subframe_offset, SNR_Q7, i, b, s;
  int sumSquared=0, smooth_coef_Q16;
  short HPstateTmp;
  short[][] X=new short[Silk_define.VAD_N_BANDS][Silk_define.MAX_FRAME_LENGTH / 2];
  int[] Xnrg=new int[Silk_define.VAD_N_BANDS];
  int[] NrgToNoiseRatio_Q8=new int[Silk_define.VAD_N_BANDS];
  int speech_nrg, x_tmp;
  int ret=0;
  assert(Silk_define.VAD_N_BANDS == 4);
  assert(Silk_define.MAX_FRAME_LENGTH >= framelength);
  assert(framelength <= 512);
  Silk_ana_filt_bank_1.SKP_Silk_ana_filt_bank_1(pIn,pIn_offset,psSilk_VAD.AnaState,0,X[0],0,X[3],0,scratch,framelength);
  Silk_ana_filt_bank_1.SKP_Silk_ana_filt_bank_1(X[0],0,psSilk_VAD.AnaState1,0,X[0],0,X[2],0,scratch,framelength >> 1);
  Silk_ana_filt_bank_1.SKP_Silk_ana_filt_bank_1(X[0],0,psSilk_VAD.AnaState2,0,X[0],0,X[1],0,scratch,framelength >> 2);
  decimated_framelength=framelength >> 3;
  X[0][decimated_framelength - 1]=(short)(X[0][decimated_framelength - 1] >> 1);
  HPstateTmp=X[0][decimated_framelength - 1];
  for (i=decimated_framelength - 1; i > 0; i--) {
    X[0][i - 1]=(short)(X[0][i - 1] >> 1);
    X[0][i]-=X[0][i - 1];
  }
  X[0][0]-=psSilk_VAD.HPstate;
  psSilk_VAD.HPstate=HPstateTmp;
  for (b=0; b < Silk_define.VAD_N_BANDS; b++) {
    decimated_framelength=framelength >> Math.min(Silk_define.VAD_N_BANDS - b,Silk_define.VAD_N_BANDS - 1);
    dec_subframe_length=decimated_framelength >> Silk_define.VAD_INTERNAL_SUBFRAMES_LOG2;
    dec_subframe_offset=0;
    Xnrg[b]=psSilk_VAD.XnrgSubfr[b];
    for (s=0; s < Silk_define.VAD_INTERNAL_SUBFRAMES; s++) {
      sumSquared=0;
      for (i=0; i < dec_subframe_length; i++) {
        x_tmp=X[b][i + dec_subframe_offset] >> 3;
        sumSquared=Silk_macros.SKP_SMLABB(sumSquared,x_tmp,x_tmp);
        assert(sumSquared >= 0);
      }
      if (s < Silk_define.VAD_INTERNAL_SUBFRAMES - 1) {
        Xnrg[b]=Silk_SigProc_FIX.SKP_ADD_POS_SAT32(Xnrg[b],sumSquared);
      }
 else {
        Xnrg[b]=Silk_SigProc_FIX.SKP_ADD_POS_SAT32(Xnrg[b],sumSquared >> 1);
      }
      dec_subframe_offset+=dec_subframe_length;
    }
    psSilk_VAD.XnrgSubfr[b]=sumSquared;
  }
  SKP_Silk_VAD_GetNoiseLevels(Xnrg,psSilk_VAD);
  sumSquared=0;
  input_tilt=0;
  for (b=0; b < Silk_define.VAD_N_BANDS; b++) {
    speech_nrg=Xnrg[b] - psSilk_VAD.NL[b];
    if (speech_nrg > 0) {
      if ((Xnrg[b] & 0xFF800000) == 0) {
        NrgToNoiseRatio_Q8[b]=(Xnrg[b] << 8) / (psSilk_VAD.NL[b] + 1);
      }
 else {
        NrgToNoiseRatio_Q8[b]=Xnrg[b] / ((psSilk_VAD.NL[b] >> 8) + 1);
      }
      SNR_Q7=Silk_lin2log.SKP_Silk_lin2log(NrgToNoiseRatio_Q8[b]) - 8 * 128;
      sumSquared=Silk_macros.SKP_SMLABB(sumSquared,SNR_Q7,SNR_Q7);
      if (speech_nrg < (1 << 20)) {
        SNR_Q7=Silk_macros.SKP_SMULWB(Silk_Inlines.SKP_Silk_SQRT_APPROX(speech_nrg) << 6,SNR_Q7);
      }
      input_tilt=Silk_macros.SKP_SMLAWB(input_tilt,tiltWeights[b],SNR_Q7);
    }
 else {
      NrgToNoiseRatio_Q8[b]=256;
    }
  }
  sumSquared=sumSquared / Silk_define.VAD_N_BANDS;
  pSNR_dB_Q7[0]=(short)(3 * Silk_Inlines.SKP_Silk_SQRT_APPROX(sumSquared));
  SA_Q15=Silk_sigm_Q15.SKP_Silk_sigm_Q15(Silk_macros.SKP_SMULWB(Silk_define.VAD_SNR_FACTOR_Q16,pSNR_dB_Q7[0]) - Silk_define.VAD_NEGATIVE_OFFSET_Q5);
  pTilt_Q15[0]=(Silk_sigm_Q15.SKP_Silk_sigm_Q15(input_tilt) - 16384) << 1;
  speech_nrg=0;
  for (b=0; b < Silk_define.VAD_N_BANDS; b++) {
    speech_nrg+=(b + 1) * ((Xnrg[b] - psSilk_VAD.NL[b]) >> 4);
  }
  if (speech_nrg <= 0) {
    SA_Q15=SA_Q15 >> 1;
  }
 else   if (speech_nrg < 32768) {
    speech_nrg=Silk_Inlines.SKP_Silk_SQRT_APPROX(speech_nrg << 15);
    SA_Q15=Silk_macros.SKP_SMULWB(32768 + speech_nrg,SA_Q15);
  }
  pSA_Q8[0]=Math.min(SA_Q15 >> 7,Silk_typedef.SKP_uint8_MAX);
  smooth_coef_Q16=Silk_macros.SKP_SMULWB(Silk_define.VAD_SNR_SMOOTH_COEF_Q18,Silk_macros.SKP_SMULWB(SA_Q15,SA_Q15));
  for (b=0; b < Silk_define.VAD_N_BANDS; b++) {
    psSilk_VAD.NrgRatioSmth_Q8[b]=Silk_macros.SKP_SMLAWB(psSilk_VAD.NrgRatioSmth_Q8[b],NrgToNoiseRatio_Q8[b] - psSilk_VAD.NrgRatioSmth_Q8[b],smooth_coef_Q16);
    SNR_Q7=3 * (Silk_lin2log.SKP_Silk_lin2log(psSilk_VAD.NrgRatioSmth_Q8[b]) - 8 * 128);
    pQuality_Q15[b]=Silk_sigm_Q15.SKP_Silk_sigm_Q15((SNR_Q7 - 16 * 128) >> 4);
  }
  return (ret);
}
