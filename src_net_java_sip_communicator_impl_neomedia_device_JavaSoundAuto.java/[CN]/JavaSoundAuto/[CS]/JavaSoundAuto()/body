{
  boolean supported=false;
  try {
    DataLine.Info info=new DataLine.Info(TargetDataLine.class,null,AudioSystem.NOT_SPECIFIED);
    supported=AudioSystem.isLineSupported(info);
  }
 catch (  Throwable thr) {
    supported=false;
    logger.error("Failed detecting java sound audio",thr);
  }
  logger.info("JavaSound Capture Supported = " + supported);
  if (supported) {
    Vector<CaptureDeviceInfo> devices=CaptureDeviceManager.getDeviceList(null);
    devices=(Vector<CaptureDeviceInfo>)devices.clone();
    String name;
    Enumeration<CaptureDeviceInfo> enumeration=devices.elements();
    while (enumeration.hasMoreElements()) {
      CaptureDeviceInfo cdi=enumeration.nextElement();
      name=cdi.getName();
      if (name.startsWith("JavaSound"))       CaptureDeviceManager.removeDevice(cdi);
    }
    CaptureDeviceInfo[] cdis=com.sun.media.protocol.javasound.JavaSoundSourceStream.listCaptureDeviceInfo();
    if (cdis != null) {
      for (      CaptureDeviceInfo cdi : cdis)       CaptureDeviceManager.addDevice(cdi);
      try {
        CaptureDeviceManager.commit();
        logger.info("JavaSoundAuto: Committed ok");
      }
 catch (      IOException ioex) {
        logger.error("JavaSoundAuto: error committing cdm",ioex);
      }
    }
    DeviceConfiguration.addAudioSystem(DeviceConfiguration.AUDIO_SYSTEM_JAVASOUND);
  }
}
