{
  List<CaptureDeviceInfo> cdis;
  List<MediaDeviceImpl> privateDevices;
  if (MediaType.VIDEO.equals(mediaType)) {
    DeviceSystem.initializeDeviceSystems(MediaType.VIDEO);
  }
switch (mediaType) {
case AUDIO:
    cdis=getDeviceConfiguration().getAvailableAudioCaptureDevices();
  privateDevices=audioDevices;
break;
case VIDEO:
cdis=getDeviceConfiguration().getAvailableVideoCaptureDevices(useCase);
privateDevices=videoDevices;
break;
default :
return EMPTY_DEVICES;
}
List<MediaDevice> publicDevices;
synchronized (privateDevices) {
if ((cdis == null) || (cdis.size() <= 0)) privateDevices.clear();
 else {
Iterator<MediaDeviceImpl> deviceIter=privateDevices.iterator();
while (deviceIter.hasNext()) {
Iterator<CaptureDeviceInfo> cdiIter=cdis.iterator();
CaptureDeviceInfo captureDeviceInfo=deviceIter.next().getCaptureDeviceInfo();
boolean deviceIsFound=false;
while (cdiIter.hasNext()) {
if (captureDeviceInfo.equals(cdiIter.next())) {
deviceIsFound=true;
cdiIter.remove();
break;
}
}
if (!deviceIsFound) deviceIter.remove();
}
for (CaptureDeviceInfo cdi : cdis) {
if (cdi == null) continue;
MediaDeviceImpl device;
switch (mediaType) {
case AUDIO:
device=new AudioMediaDeviceImpl(cdi);
break;
case VIDEO:
device=new MediaDeviceImpl(cdi,mediaType);
break;
default :
device=null;
break;
}
if (device != null) privateDevices.add(device);
}
}
publicDevices=new ArrayList<MediaDevice>(privateDevices);
}
if (publicDevices.isEmpty()) {
MediaDevice nonSendDevice;
switch (mediaType) {
case AUDIO:
nonSendDevice=getNonSendAudioDevice();
break;
case VIDEO:
nonSendDevice=getNonSendVideoDevice();
break;
default :
nonSendDevice=null;
break;
}
if (nonSendDevice != null) publicDevices.add(nonSendDevice);
}
return publicDevices;
}
