{
  CaptureDeviceInfo[] captureDeviceInfos;
  List<CaptureMediaDevice> devices;
switch (mediaType) {
case AUDIO:
    captureDeviceInfos=getDeviceConfiguration().getAvailableAudioCaptureDevices();
  devices=audioDevices;
break;
case VIDEO:
captureDeviceInfos=getDeviceConfiguration().getAvailableVideoCaptureDevices();
devices=videoDevices;
break;
default :
captureDeviceInfos=null;
devices=null;
break;
}
synchronized (devices) {
if ((captureDeviceInfos == null) || (captureDeviceInfos.length == 0)) {
devices.clear();
return EMPTY_DEVICES;
}
Iterator<CaptureMediaDevice> deviceIter=devices.iterator();
while (deviceIter.hasNext()) {
CaptureDeviceInfo captureDeviceInfo=deviceIter.next().getCaptureDeviceInfo();
boolean deviceIsFound=false;
for (int i=0; i < captureDeviceInfos.length; i++) if (captureDeviceInfo.equals(captureDeviceInfos[i])) {
deviceIsFound=true;
captureDeviceInfos[i]=null;
break;
}
if (!deviceIsFound) deviceIter.remove();
}
for (CaptureDeviceInfo captureDeviceInfo : captureDeviceInfos) {
if (captureDeviceInfo == null) continue;
CaptureMediaDevice device;
switch (mediaType) {
case AUDIO:
device=new AudioCaptureMediaDevice(captureDeviceInfo);
break;
case VIDEO:
default :
device=new CaptureMediaDevice(captureDeviceInfo,mediaType);
break;
}
devices.add(device);
}
return new ArrayList<MediaDevice>(devices);
}
}
