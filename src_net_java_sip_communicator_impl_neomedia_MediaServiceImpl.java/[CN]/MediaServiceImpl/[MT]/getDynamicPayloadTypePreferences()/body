{
  if (dynamicPayloadTypePreferences == null) {
    dynamicPayloadTypePreferences=new HashMap<MediaFormat,Byte>();
    MediaFormat telephoneEvent=MediaUtils.getMediaFormat("telephone-event",8000);
    if (telephoneEvent != null)     dynamicPayloadTypePreferences.put(telephoneEvent,(byte)101);
    MediaFormat h264=MediaUtils.getMediaFormat("H264",VideoMediaFormatImpl.DEFAULT_CLOCK_RATE);
    if (h264 != null)     dynamicPayloadTypePreferences.put(h264,(byte)99);
    ConfigurationService cfg=NeomediaActivator.getConfigurationService();
    if (cfg != null) {
      String prefix=DYNAMIC_PAYLOAD_TYPE_PREFERENCES_PNAME_PREFIX;
      List<String> propertyNames=cfg.getPropertyNamesByPrefix(prefix,true);
      for (      String propertyName : propertyNames) {
        byte dynamicPayloadTypePreference=0;
        Throwable exception=null;
        try {
          dynamicPayloadTypePreference=Byte.parseByte(propertyName.substring(prefix.length() + 1));
        }
 catch (        IndexOutOfBoundsException ioobe) {
          exception=ioobe;
        }
catch (        NumberFormatException nfe) {
          exception=nfe;
        }
        if (exception != null) {
          logger.warn("Ignoring dynamic payload type preference" + " which could not be parsed: " + propertyName,exception);
          continue;
        }
        String source=cfg.getString(propertyName);
        if ((source != null) && (source.length() != 0)) {
          try {
            JSONObject json=new JSONObject(source);
            String encoding=json.getString(MediaFormatImpl.ENCODING_PNAME);
            int clockRate=json.getInt(MediaFormatImpl.CLOCK_RATE_PNAME);
            Map<String,String> fmtps=new HashMap<String,String>();
            if (json.has(MediaFormatImpl.FORMAT_PARAMETERS_PNAME)) {
              JSONObject jsonFmtps=json.getJSONObject(MediaFormatImpl.FORMAT_PARAMETERS_PNAME);
              Iterator<?> jsonFmtpsIter=jsonFmtps.keys();
              while (jsonFmtpsIter.hasNext()) {
                String key=jsonFmtpsIter.next().toString();
                String value=jsonFmtps.getString(key);
                fmtps.put(key,value);
              }
            }
            MediaFormat mediaFormat=MediaUtils.getMediaFormat(encoding,clockRate,fmtps);
            if (mediaFormat != null) {
              dynamicPayloadTypePreferences.put(mediaFormat,dynamicPayloadTypePreference);
            }
          }
 catch (          JSONException jsone) {
            logger.warn("Ignoring dynamic payload type preference" + " which could not be parsed: " + source,jsone);
          }
        }
      }
    }
  }
  return dynamicPayloadTypePreferences;
}
