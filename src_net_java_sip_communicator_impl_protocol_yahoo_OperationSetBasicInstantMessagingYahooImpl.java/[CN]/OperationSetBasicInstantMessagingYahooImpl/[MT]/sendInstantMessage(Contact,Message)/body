{
  assertConnected();
  if (!(to instanceof ContactYahooImpl))   throw new IllegalArgumentException("The specified contact is not a Yahoo contact." + to);
  try {
    String toUserID=((ContactYahooImpl)to).getID();
    byte[] msgBytesToBeSent=message.getContent().trim().getBytes();
    do {
      if (msgBytesToBeSent.length > MAX_MESSAGE_LENGTH) {
        byte[] tmp1=new byte[MAX_MESSAGE_LENGTH];
        System.arraycopy(msgBytesToBeSent,0,tmp1,0,MAX_MESSAGE_LENGTH);
        byte[] tmp2=new byte[msgBytesToBeSent.length - MAX_MESSAGE_LENGTH];
        System.arraycopy(msgBytesToBeSent,MAX_MESSAGE_LENGTH,tmp2,0,tmp2.length);
        msgBytesToBeSent=tmp2;
        yahooProvider.getYahooSession().sendMessage(toUserID,new String(tmp1));
      }
 else {
        yahooProvider.getYahooSession().sendMessage(toUserID,new String(msgBytesToBeSent));
      }
      MessageDeliveredEvent msgDeliveredEvt=new MessageDeliveredEvent(message,to,new Date());
      fireMessageEvent(msgDeliveredEvt);
    }
 while (msgBytesToBeSent.length > MAX_MESSAGE_LENGTH);
  }
 catch (  IOException ex) {
    logger.fatal("Cannot Send Message! " + ex.getMessage());
    MessageDeliveryFailedEvent evt=new MessageDeliveryFailedEvent(message,to,MessageDeliveryFailedEvent.NETWORK_FAILURE,new Date());
    fireMessageEvent(evt);
    return;
  }
}
