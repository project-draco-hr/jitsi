{
  String SLevel=System.getProperty("jmdns.debug");
  if (SLevel == null)   SLevel="INFO";
  logger.setLevel(Level.parse(SLevel));
  this.packet=packet;
  this.data=packet.getData();
  this.len=packet.getLength();
  this.off=packet.getOffset();
  this.questions=new LinkedList<DNSEntry>();
  this.answers=new LinkedList<DNSRecord>();
  this.receivedTime=System.currentTimeMillis();
  try {
    id=readUnsignedShort();
    flags=readUnsignedShort();
    numQuestions=readUnsignedShort();
    numAnswers=readUnsignedShort();
    numAuthorities=readUnsignedShort();
    numAdditionals=readUnsignedShort();
    if (numQuestions > 0) {
      questions=Collections.synchronizedList(new ArrayList<DNSEntry>(numQuestions));
      for (int i=0; i < numQuestions; i++) {
        DNSQuestion question=new DNSQuestion(readName(),readUnsignedShort(),readUnsignedShort());
        questions.add(question);
      }
    }
    int n=numAnswers + numAuthorities + numAdditionals;
    if (n > 0) {
      answers=Collections.synchronizedList(new ArrayList<DNSRecord>(n));
      for (int i=0; i < n; i++) {
        String domain=readName();
        int type=readUnsignedShort();
        int clazz=readUnsignedShort();
        int ttl=readInt();
        int len=readUnsignedShort();
        int end=off + len;
        DNSRecord rec=null;
switch (type) {
case DNSConstants.TYPE_A:
case DNSConstants.TYPE_AAAA:
          rec=new DNSRecord.Address(domain,type,clazz,ttl,readBytes(off,len));
        break;
case DNSConstants.TYPE_CNAME:
case DNSConstants.TYPE_PTR:
      rec=new DNSRecord.Pointer(domain,type,clazz,ttl,readName());
    break;
case DNSConstants.TYPE_TXT:
  rec=new DNSRecord.Text(domain,type,clazz,ttl,readBytes(off,len));
break;
case DNSConstants.TYPE_SRV:
rec=new DNSRecord.Service(domain,type,clazz,ttl,readUnsignedShort(),readUnsignedShort(),readUnsignedShort(),readName());
break;
case DNSConstants.TYPE_HINFO:
break;
default :
logger.finer("DNSIncoming() unknown type:" + type);
break;
}
if (rec != null) {
answers.add(rec);
}
 else {
if (answers.size() < numAnswers) {
numAnswers--;
}
 else {
if (answers.size() < numAnswers + numAuthorities) {
numAuthorities--;
}
 else {
if (answers.size() < numAnswers + numAuthorities + numAdditionals) {
numAdditionals--;
}
}
}
}
off=end;
}
}
}
 catch (IOException e) {
logger.log(Level.WARNING,"DNSIncoming() dump " + print(true) + "\n exception ",e);
throw e;
}
}
