{
  List<MediaDescription> remoteDescriptions=SdpUtils.extractMediaDescriptions(answer);
  this.setCallInfoURL(SdpUtils.getCallInfoURL(answer));
  boolean masterStreamSet=false;
  List<MediaType> seenMediaTypes=new ArrayList<MediaType>();
  for (  MediaDescription mediaDescription : remoteDescriptions) {
    MediaType mediaType;
    try {
      mediaType=SdpUtils.getMediaType(mediaDescription);
      if (seenMediaTypes.contains(mediaType))       continue;
      seenMediaTypes.add(mediaType);
    }
 catch (    IllegalArgumentException iae) {
      logger.info("Remote party added to answer a media type that " + "we don't understand. Ignoring stream.");
      continue;
    }
    MediaStreamTarget target=SdpUtils.extractDefaultTarget(mediaDescription,answer);
    if (target.getDataAddress().getPort() == 0) {
      closeStream(mediaType);
      continue;
    }
    List<MediaFormat> supportedFormats=SdpUtils.extractFormats(mediaDescription,getDynamicPayloadTypes());
    MediaDevice dev=getDefaultDevice(mediaType);
    if (!isDeviceActive(dev)) {
      closeStream(mediaType);
      continue;
    }
    MediaDirection devDirection=(dev == null) ? MediaDirection.INACTIVE : dev.getDirection();
    devDirection=devDirection.and(getDirectionUserPreference(mediaType));
    if (supportedFormats.isEmpty()) {
      ProtocolProviderServiceSipImpl.throwOperationFailedException("Remote party sent an invalid SDP answer. The codecs in " + "the answer are either not present or not " + "supported",OperationFailedException.ILLEGAL_ARGUMENT,null,logger);
    }
    StreamConnector connector=getTransportManager().getStreamConnector(mediaType);
    MediaDirection remoteDirection=SdpUtils.getDirection(mediaDescription);
    MediaDirection direction=devDirection.getDirectionForAnswer(remoteDirection);
    if (isLocallyOnHold())     direction=direction.and(MediaDirection.SENDONLY);
    List<RTPExtension> remoteRTPExtensions=SdpUtils.extractRTPExtensions(mediaDescription,getRtpExtensionsRegistry());
    List<RTPExtension> supportedExtensions=getExtensionsForType(mediaType);
    List<RTPExtension> rtpExtensions=intersectRTPExtensions(remoteRTPExtensions,supportedExtensions);
    if (MediaType.VIDEO.equals(mediaType)) {
      supportQualityControls=SdpUtils.containsAttribute(mediaDescription,"imageattr");
    }
    updateSrtpControlsForDtls(mediaType,null,mediaDescription);
    SrtpControls srtpControls=getSrtpControls();
    SDesControl sdesControl=(SDesControl)srtpControls.get(mediaType,SrtpControlType.SDES);
    if (sdesControl != null) {
      if (selectSdesCryptoSuite(true,sdesControl,mediaDescription) == null) {
        sdesControl.cleanup(null);
        srtpControls.remove(mediaType,SrtpControlType.SDES);
        logger.warn("Received unsupported sdes crypto attribute.");
      }
 else {
        removeAndCleanupOtherSrtpControls(mediaType,SrtpControlType.SDES);
        addAdvertisedEncryptionMethod(SrtpControlType.SDES);
      }
    }
    boolean masterStream=false;
    if (!masterStreamSet) {
      if (remoteDescriptions.size() > 1) {
        if (MediaType.AUDIO.equals(mediaType)) {
          masterStream=true;
          masterStreamSet=true;
        }
      }
 else {
        masterStream=true;
        masterStreamSet=true;
      }
    }
    try {
      if (mediaDescription.getAttribute(SdpUtils.ZRTP_HASH_ATTR) != null) {
        addAdvertisedEncryptionMethod(SrtpControlType.ZRTP);
      }
    }
 catch (    SdpParseException e) {
      logger.error("received an unparsable sdp attribute",e);
    }
    MediaStream stream=initStream(connector,dev,supportedFormats.get(0),target,direction,rtpExtensions,masterStream);
    if (stream != null) {
      String rtcpxr;
      try {
        rtcpxr=mediaDescription.getAttribute(RTCPExtendedReport.SDP_ATTRIBUTE);
      }
 catch (      SdpException se) {
        rtcpxr=null;
      }
      stream.setProperty(RTCPExtendedReport.SDP_ATTRIBUTE,rtcpxr);
    }
  }
}
