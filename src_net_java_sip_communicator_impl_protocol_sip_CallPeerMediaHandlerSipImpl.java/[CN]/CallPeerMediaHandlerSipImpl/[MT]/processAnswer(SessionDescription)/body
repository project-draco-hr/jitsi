{
  this.remoteSess=answer;
  List<MediaDescription> remoteDescriptions=SdpUtils.extractMediaDescriptions(answer);
  this.setCallInfoURL(SdpUtils.getCallInfoURL(answer));
  for (  MediaDescription mediaDescription : remoteDescriptions) {
    MediaType mediaType;
    try {
      mediaType=SdpUtils.getMediaType(mediaDescription);
    }
 catch (    IllegalArgumentException iae) {
      logger.info("Remote party added to answer a media type that " + "we don't understand. Ignoring stream.");
      continue;
    }
    MediaStreamTarget target=SdpUtils.extractDefaultTarget(mediaDescription,answer);
    if (target.getDataAddress().getPort() == 0) {
      closeStream(mediaType);
      continue;
    }
    List<MediaFormat> supportedFormats=SdpUtils.extractFormats(mediaDescription,getDynamicPayloadTypes());
    MediaDevice dev=getDefaultDevice(mediaType);
    if (dev == null) {
      closeStream(mediaType);
      continue;
    }
    MediaDirection devDirection=(dev == null) ? MediaDirection.INACTIVE : dev.getDirection();
    devDirection=devDirection.and(getDirectionUserPreference(mediaType));
    if (supportedFormats.isEmpty()) {
      ProtocolProviderServiceSipImpl.throwOperationFailedException("Remote party sent an invalid SDP answer. The codecs in " + "the answer are either not present or not " + "supported",OperationFailedException.ILLEGAL_ARGUMENT,null,logger);
    }
    StreamConnector connector=getTransportManager().getStreamConnector(mediaType);
    MediaDirection remoteDirection=SdpUtils.getDirection(mediaDescription);
    MediaDirection direction=devDirection.getDirectionForAnswer(remoteDirection);
    if (isLocallyOnHold())     direction=direction.and(MediaDirection.SENDONLY);
    List<RTPExtension> remoteRTPExtensions=SdpUtils.extractRTPExtensions(mediaDescription,getRtpExtensionsRegistry());
    List<RTPExtension> supportedExtensions=getExtensionsForType(mediaType);
    List<RTPExtension> rtpExtensions=intersectRTPExtensions(remoteRTPExtensions,supportedExtensions);
    initStream(connector,dev,supportedFormats.get(0),target,direction,rtpExtensions);
    if (mediaType.equals(MediaType.VIDEO)) {
      supportQualityControls=SdpUtils.containsAttribute(mediaDescription,"imageattr");
    }
    SrtpControl scontrol=getZrtpControls().get(mediaType);
    if (scontrol != null && scontrol instanceof SDesControl) {
      List<String> peerAttributes=new LinkedList<String>();
      @SuppressWarnings("unchecked") Vector<Attribute> attrs=mediaDescription.getAttributes(true);
      for (      Attribute a : attrs) {
        try {
          if (a.getName().equals("crypto")) {
            peerAttributes.add(a.getValue());
          }
        }
 catch (        SdpParseException e) {
          logger.error("received an uparsable sdp attribute",e);
        }
      }
      ((SDesControl)scontrol).initiatorSelectAttribute(peerAttributes.toArray(new String[peerAttributes.size()]));
    }
  }
}
