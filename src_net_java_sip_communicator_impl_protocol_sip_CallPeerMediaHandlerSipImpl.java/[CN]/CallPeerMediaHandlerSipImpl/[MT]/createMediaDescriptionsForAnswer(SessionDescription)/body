{
  List<MediaDescription> remoteDescriptions=SdpUtils.extractMediaDescriptions(offer);
  Vector<MediaDescription> answerDescriptions=new Vector<MediaDescription>(remoteDescriptions.size());
  this.setCallInfoURL(SdpUtils.getCallInfoURL(offer));
  boolean atLeastOneValidDescription=false;
  boolean rejectedAvpOfferDueToSavpRequired=false;
  boolean encryptionEnabled=getPeer().getProtocolProvider().getAccountID().getAccountPropertyBoolean(ProtocolProviderFactory.DEFAULT_ENCRYPTION,true);
  int savpOption=getPeer().getProtocolProvider().getAccountID().getAccountPropertyInt(ProtocolProviderFactory.SAVP_OPTION,ProtocolProviderFactory.SAVP_OFF);
  List<MediaType> seenMediaTypes=new ArrayList<MediaType>();
  for (  MediaDescription mediaDescription : remoteDescriptions) {
    String transportProtocol;
    try {
      transportProtocol=mediaDescription.getMedia().getProtocol();
    }
 catch (    SdpParseException e) {
      throw new OperationFailedException("unable to create the media description",OperationFailedException.ILLEGAL_ARGUMENT,e);
    }
    if (savpOption == ProtocolProviderFactory.SAVP_MANDATORY && transportProtocol.equals(SdpConstants.RTP_AVP) && encryptionEnabled) {
      rejectedAvpOfferDueToSavpRequired=true;
      continue;
    }
    MediaType mediaType=null;
    try {
      mediaType=SdpUtils.getMediaType(mediaDescription);
      if (seenMediaTypes.contains(mediaType))       continue;
      seenMediaTypes.add(mediaType);
    }
 catch (    IllegalArgumentException iae) {
      answerDescriptions.add(SdpUtils.createDisablingAnswer(mediaDescription));
      continue;
    }
    List<MediaFormat> remoteFormats=SdpUtils.extractFormats(mediaDescription,getDynamicPayloadTypes());
    MediaDevice dev=getDefaultDevice(mediaType);
    MediaDirection devDirection=(dev == null) ? MediaDirection.INACTIVE : dev.getDirection();
    devDirection=devDirection.and(getDirectionUserPreference(mediaType));
    MediaDirection remoteDirection=SdpUtils.getDirection(mediaDescription);
    MediaDirection direction=devDirection.getDirectionForAnswer(remoteDirection);
    List<MediaFormat> mutuallySupportedFormats=(dev == null) ? null : intersectFormats(remoteFormats,dev.getSupportedFormats());
    MediaStreamTarget target=SdpUtils.extractDefaultTarget(mediaDescription,offer);
    int targetDataPort=target.getDataAddress().getPort();
    if ((devDirection == MediaDirection.INACTIVE) || (mutuallySupportedFormats == null) || mutuallySupportedFormats.isEmpty()|| (targetDataPort == 0)) {
      answerDescriptions.add(SdpUtils.createDisablingAnswer(mediaDescription));
      closeStream(mediaType);
      continue;
    }
    List<RTPExtension> offeredRTPExtensions=SdpUtils.extractRTPExtensions(mediaDescription,this.getRtpExtensionsRegistry());
    List<RTPExtension> supportedExtensions=getExtensionsForType(mediaType);
    List<RTPExtension> rtpExtensions=intersectRTPExtensions(offeredRTPExtensions,supportedExtensions);
    StreamConnector connector=getTransportManager().getStreamConnector(mediaType);
    if (mediaType.equals(MediaType.VIDEO)) {
      QualityPreset sendQualityPreset=null;
      QualityPreset receiveQualityPreset=null;
      MediaStream stream=getStream(MediaType.VIDEO);
      if (stream != null && dev != null) {
        List<MediaFormat> fmts=intersectFormats(dev.getSupportedFormats(),remoteFormats);
        if (fmts.size() > 0) {
          MediaFormat fmt=fmts.get(0);
          ((VideoMediaStream)stream).updateQualityControl(fmt.getAdvancedAttributes());
        }
      }
      if (qualityControls != null) {
        sendQualityPreset=qualityControls.getRemoteReceivePreset();
        receiveQualityPreset=qualityControls.getRemoteSendMaxPreset();
        mutuallySupportedFormats=(dev == null) ? null : intersectFormats(mutuallySupportedFormats,dev.getSupportedFormats(sendQualityPreset,receiveQualityPreset));
      }
      supportQualityControls=SdpUtils.containsAttribute(mediaDescription,"imageattr");
      float frameRate=-1;
      try {
        String frStr=mediaDescription.getAttribute("framerate");
        if (frStr != null)         frameRate=Integer.parseInt(frStr);
      }
 catch (      SdpParseException e) {
      }
      if (frameRate > 0) {
        qualityControls.setMaxFrameRate(frameRate);
      }
    }
    MediaDescription md=createMediaDescription(transportProtocol,mutuallySupportedFormats,connector,direction,rtpExtensions);
    if (!updateMediaDescriptionForSDes(mediaType,md,mediaDescription))     updateMediaDescriptionForZrtp(mediaType,md);
    MediaFormat fmt=findMediaFormat(remoteFormats,mutuallySupportedFormats.get(0));
    initStream(connector,dev,fmt,target,direction,rtpExtensions);
    answerDescriptions.add(md);
    atLeastOneValidDescription=true;
  }
  if (rejectedAvpOfferDueToSavpRequired && !atLeastOneValidDescription)   throw new OperationFailedException("Offer contained no valid " + "media descriptions. Insecure media was rejected (only " + "RTP/AVP instead of RTP/SAVP).",OperationFailedException.ILLEGAL_ARGUMENT);
  if (!atLeastOneValidDescription)   throw new OperationFailedException("Offer contained no valid " + "media descriptions.",OperationFailedException.ILLEGAL_ARGUMENT);
  return answerDescriptions;
}
