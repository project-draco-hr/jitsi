{
  if (transportManager == null) {
    CallPeerJabberImpl peer=getPeer();
    if (peer.isInitiator()) {
synchronized (transportManagerSyncRoot) {
        try {
          transportManagerSyncRoot.wait(5000);
        }
 catch (        InterruptedException e) {
        }
      }
      if (transportManager == null)       throw new IllegalStateException("The initiator is expected to specify the transport" + " in their offer.");
 else       return transportManager;
    }
 else {
      ProtocolProviderServiceJabberImpl protocolProvider=peer.getProtocolProvider();
      ScServiceDiscoveryManager discoveryManager=protocolProvider.getDiscoveryManager();
      DiscoverInfo peerDiscoverInfo=peer.getDiscoverInfo();
      boolean google=protocolProvider.isGmailOrGoogleAppsAccount() || ProtocolProviderServiceJabberImpl.isGmailOrGoogleAppsAccount(StringUtils.parseServer(peer.getAddress()));
      if (google && isFeatureSupported(discoveryManager,peerDiscoverInfo,ProtocolProviderServiceJabberImpl.URN_GOOGLE_TRANSPORT_P2P)) {
        transportManager=new P2PTransportManager(peer);
      }
 else {
        String[] transports=new String[]{ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE_ICE_UDP_1,ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE_RAW_UDP_0};
        CallJabberImpl call=peer.getCall();
        if (call.isConferenceFocus()) {
          String jitsiVideoBridge=protocolProvider.getJitsiVideoBridge();
          if ((jitsiVideoBridge != null) && (jitsiVideoBridge.length() != 0)) {
            String jitsiVideoBridgeTransport=ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE_RAW_UDP_0;
            for (int i=1; i < transports.length; i++) {
              if (jitsiVideoBridgeTransport.equals(transports[i])) {
                transports[i]=transports[0];
                transports[0]=jitsiVideoBridgeTransport;
              }
            }
          }
        }
        for (        String transport : transports) {
          if (isFeatureSupported(discoveryManager,peerDiscoverInfo,transport)) {
            if (ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE_ICE_UDP_1.equals(transport)) {
              transportManager=new IceUdpTransportManager(peer);
            }
 else             if (ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE_RAW_UDP_0.equals(transport)) {
              transportManager=new RawUdpTransportManager(peer);
            }
            if (transportManager != null)             break;
          }
        }
        if ((transportManager == null) && logger.isDebugEnabled()) {
          logger.debug("No known Jingle transport supported" + " by Jabber call peer " + peer);
        }
      }
    }
  }
  return transportManager;
}
