{
  fixture.provider.addRegistrationStateChangeListener(regEvtCollector);
  fixture.provider.register(new SecurityAuthorityImpl());
  try {
synchronized (registrationLock) {
      logger.debug("Waiting for registration to complete ...");
      registrationLock.wait(40000);
      logger.debug("Registration was completed or we lost patience.");
    }
  }
 catch (  InterruptedException ex) {
    logger.debug("Interrupted while waiting for registration",ex);
  }
catch (  Throwable t) {
    logger.debug("We got thrown out while waiting for registration",t);
  }
  OperationSetBasicInstantMessaging opSetBasicIM=fixture.provider.getOperationSet(OperationSetBasicInstantMessaging.class);
  IcqSlickFixture.offlineMsgCollector.register(opSetBasicIM);
  Object lock=new Object();
synchronized (lock) {
    try {
      logger.debug("Giving the aim server time to notify for our arrival!");
      lock.wait(5000);
    }
 catch (    Exception ex) {
    }
  }
  assertTrue("The tested ICQ implementation on-line status was OFFLINE",!IcqStatusEnum.OFFLINE.equals(IcqSlickFixture.testerAgent.getBuddyStatus(fixture.ourUserID)));
  assertTrue("No events were dispatched during the registration process.",regEvtCollector.collectedNewStates.size() > 0);
  assertTrue("No registration event notifying of registration was dispatched. " + "All events were: " + regEvtCollector.collectedNewStates,regEvtCollector.collectedNewStates.contains(RegistrationState.REGISTERED));
  fixture.provider.removeRegistrationStateChangeListener(regEvtCollector);
}
