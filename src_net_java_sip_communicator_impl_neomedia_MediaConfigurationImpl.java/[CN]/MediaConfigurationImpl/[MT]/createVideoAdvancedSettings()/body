{
  ResourceManagementService resources=NeomediaActivator.getResources();
  final DeviceConfiguration deviceConfig=mediaService.getDeviceConfiguration();
  TransparentPanel centerPanel=new TransparentPanel(new GridBagLayout());
  centerPanel.setMaximumSize(new Dimension(WIDTH,150));
  JButton resetDefaultsButton=new JButton(resources.getI18NString("impl.media.configform.VIDEO_RESET"));
  JPanel resetButtonPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  resetButtonPanel.add(resetDefaultsButton);
  final JPanel centerAdvancedPanel=new TransparentPanel(new BorderLayout());
  centerAdvancedPanel.add(centerPanel,BorderLayout.NORTH);
  centerAdvancedPanel.add(resetButtonPanel,BorderLayout.SOUTH);
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.insets=new Insets(5,5,0,0);
  constraints.gridx=0;
  constraints.weightx=0;
  constraints.weighty=0;
  constraints.gridy=0;
  centerPanel.add(new JLabel(resources.getI18NString("impl.media.configform.VIDEO_RESOLUTION")),constraints);
  constraints.gridy=1;
  constraints.insets=new Insets(0,0,0,0);
  final JCheckBox frameRateCheck=new SIPCommCheckBox(resources.getI18NString("impl.media.configform.VIDEO_FRAME_RATE"));
  centerPanel.add(frameRateCheck,constraints);
  constraints.gridy=2;
  constraints.insets=new Insets(5,5,0,0);
  centerPanel.add(new JLabel(resources.getI18NString("impl.media.configform.VIDEO_PACKETS_POLICY")),constraints);
  constraints.gridy=3;
  centerPanel.add(new JLabel(resources.getI18NString("impl.media.configform.VIDEO_BITRATE")),constraints);
  constraints.weightx=1;
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.insets=new Insets(5,0,0,5);
  Object[] resolutionValues=new Object[DeviceConfiguration.SUPPORTED_RESOLUTIONS.length + 1];
  System.arraycopy(DeviceConfiguration.SUPPORTED_RESOLUTIONS,0,resolutionValues,1,DeviceConfiguration.SUPPORTED_RESOLUTIONS.length);
  final JComboBox sizeCombo=new JComboBox(resolutionValues);
  sizeCombo.setRenderer(new ResolutionCellRenderer());
  sizeCombo.setEditable(false);
  centerPanel.add(sizeCombo,constraints);
  final JSpinner frameRate=new JSpinner(new SpinnerNumberModel(20,5,30,1));
  frameRate.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      deviceConfig.setFrameRate(((SpinnerNumberModel)frameRate.getModel()).getNumber().intValue());
    }
  }
);
  constraints.gridy=1;
  constraints.insets=new Insets(0,0,0,5);
  centerPanel.add(frameRate,constraints);
  frameRateCheck.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (frameRateCheck.isSelected()) {
        deviceConfig.setFrameRate(((SpinnerNumberModel)frameRate.getModel()).getNumber().intValue());
      }
 else       deviceConfig.setFrameRate(-1);
      frameRate.setEnabled(frameRateCheck.isSelected());
    }
  }
);
  final JSpinner videoMaxBandwidth=new JSpinner(new SpinnerNumberModel(deviceConfig.getVideoRTPPacingThreshold(),1,999,1));
  videoMaxBandwidth.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      deviceConfig.setVideoRTPPacingThreshold(((SpinnerNumberModel)videoMaxBandwidth.getModel()).getNumber().intValue());
    }
  }
);
  constraints.gridx=1;
  constraints.gridy=2;
  constraints.insets=new Insets(0,0,5,5);
  centerPanel.add(videoMaxBandwidth,constraints);
  final JSpinner videoBitrate=new JSpinner(new SpinnerNumberModel(deviceConfig.getVideoBitrate(),1,Integer.MAX_VALUE,1));
  videoBitrate.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      deviceConfig.setVideoBitrate(((SpinnerNumberModel)videoBitrate.getModel()).getNumber().intValue());
    }
  }
);
  constraints.gridy=3;
  centerPanel.add(videoBitrate,constraints);
  resetDefaultsButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      sizeCombo.setSelectedIndex(0);
      frameRateCheck.setSelected(false);
      frameRate.setEnabled(false);
      frameRate.setValue(20);
      deviceConfig.setFrameRate(-1);
      videoMaxBandwidth.setValue(DeviceConfiguration.DEFAULT_VIDEO_RTP_PACING_THRESHOLD);
      videoBitrate.setValue(DeviceConfiguration.DEFAULT_VIDEO_BITRATE);
    }
  }
);
  Dimension videoSize=deviceConfig.getVideoSize();
  if ((videoSize.getHeight() != DeviceConfiguration.DEFAULT_VIDEO_HEIGHT) && (videoSize.getWidth() != DeviceConfiguration.DEFAULT_VIDEO_WIDTH))   sizeCombo.setSelectedItem(deviceConfig.getVideoSize());
 else   sizeCombo.setSelectedIndex(0);
  sizeCombo.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Dimension selectedVideoSize=(Dimension)sizeCombo.getSelectedItem();
      if (selectedVideoSize == null) {
        selectedVideoSize=new Dimension(DeviceConfiguration.DEFAULT_VIDEO_WIDTH,DeviceConfiguration.DEFAULT_VIDEO_HEIGHT);
      }
      deviceConfig.setVideoSize(selectedVideoSize);
    }
  }
);
  frameRateCheck.setSelected(deviceConfig.getFrameRate() != DeviceConfiguration.DEFAULT_VIDEO_FRAMERATE);
  frameRate.setEnabled(frameRateCheck.isSelected());
  if (frameRate.isEnabled())   frameRate.setValue(deviceConfig.getFrameRate());
  return centerAdvancedPanel;
}
