{
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  constraints.weighty=0;
  int audioSystemFeatures=audioSystem.getFeatures();
  boolean featureNotifyAndPlaybackDevices=((audioSystemFeatures & AudioSystem.FEATURE_NOTIFY_AND_PLAYBACK_DEVICES) != 0);
  constraints.gridx=0;
  constraints.insets=new Insets(3,0,3,3);
  constraints.weightx=0;
  constraints.gridy=0;
  container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_CAPTURE)),constraints);
  if (featureNotifyAndPlaybackDevices) {
    constraints.gridy=2;
    container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK)),constraints);
    constraints.gridy=3;
    container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_NOTIFY)),constraints);
  }
  constraints.gridx=1;
  constraints.insets=new Insets(3,3,3,0);
  constraints.weightx=1;
  JComboBox captureCombo=null;
  if (featureNotifyAndPlaybackDevices) {
    captureCombo=new JComboBox();
    captureCombo.setEditable(false);
    captureCombo.setModel(new DeviceConfigurationComboBoxModel(captureCombo,mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_CAPTURE));
    constraints.gridy=0;
    container.add(captureCombo,constraints);
  }
  int anchor=constraints.anchor;
  SoundLevelIndicator capturePreview=new SoundLevelIndicator(SimpleAudioLevelListener.MIN_LEVEL,SimpleAudioLevelListener.MAX_LEVEL);
  constraints.anchor=GridBagConstraints.CENTER;
  constraints.gridy=(captureCombo == null) ? 0 : 1;
  container.add(capturePreview,constraints);
  constraints.anchor=anchor;
  constraints.gridy=GridBagConstraints.RELATIVE;
  if (featureNotifyAndPlaybackDevices) {
    JComboBox playbackCombo=new JComboBox();
    playbackCombo.setEditable(false);
    playbackCombo.setModel(new DeviceConfigurationComboBoxModel(captureCombo,mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK));
    container.add(playbackCombo,constraints);
    JComboBox notifyCombo=new JComboBox();
    notifyCombo.setEditable(false);
    notifyCombo.setModel(new DeviceConfigurationComboBoxModel(captureCombo,mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_NOTIFY));
    container.add(notifyCombo,constraints);
  }
  if ((AudioSystem.FEATURE_ECHO_CANCELLATION & audioSystemFeatures) != 0) {
    final SIPCommCheckBox echoCancelCheckBox=new SIPCommCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.configform.ECHOCANCEL"));
    echoCancelCheckBox.setSelected(mediaService.getDeviceConfiguration().isEchoCancel());
    echoCancelCheckBox.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        mediaService.getDeviceConfiguration().setEchoCancel(echoCancelCheckBox.isSelected());
      }
    }
);
    container.add(echoCancelCheckBox,constraints);
  }
  if ((AudioSystem.FEATURE_DENOISE & audioSystemFeatures) != 0) {
    final SIPCommCheckBox denoiseCheckBox=new SIPCommCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.configform.DENOISE"));
    denoiseCheckBox.setSelected(mediaService.getDeviceConfiguration().isDenoise());
    denoiseCheckBox.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        mediaService.getDeviceConfiguration().setDenoise(denoiseCheckBox.isSelected());
      }
    }
);
    container.add(denoiseCheckBox,constraints);
  }
  if (audioLevelListenerThread == null) {
    audioLevelListenerThread=new AudioLevelListenerThread(audioSystem,captureCombo,capturePreview);
  }
}
