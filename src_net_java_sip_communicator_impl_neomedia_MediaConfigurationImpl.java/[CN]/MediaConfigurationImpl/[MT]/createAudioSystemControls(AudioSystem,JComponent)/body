{
  GridBagConstraints cnstrnts=new GridBagConstraints();
  cnstrnts.anchor=GridBagConstraints.NORTHWEST;
  cnstrnts.fill=GridBagConstraints.HORIZONTAL;
  cnstrnts.weighty=0;
  int audioSystemFeatures=audioSystem.getFeatures();
  boolean featureNotifyAndPlaybackDevices=((audioSystemFeatures & AudioSystem.FEATURE_NOTIFY_AND_PLAYBACK_DEVICES) != 0);
  cnstrnts.gridx=0;
  cnstrnts.insets=new Insets(3,0,3,3);
  cnstrnts.weightx=0;
  cnstrnts.gridy=0;
  container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_CAPTURE)),cnstrnts);
  if (featureNotifyAndPlaybackDevices) {
    cnstrnts.gridy=2;
    container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK)),cnstrnts);
    cnstrnts.gridy=3;
    container.add(new JLabel(getLabelText(DeviceConfigurationComboBoxModel.AUDIO_NOTIFY)),cnstrnts);
  }
  cnstrnts.gridx=1;
  cnstrnts.insets=new Insets(3,3,3,0);
  cnstrnts.weightx=1;
  JComboBox captureCombo=null;
  if (featureNotifyAndPlaybackDevices) {
    captureCombo=new JComboBox();
    captureCombo.setEditable(false);
    captureCombo.setModel(new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_CAPTURE));
    cnstrnts.gridy=0;
    container.add(captureCombo,cnstrnts);
  }
  int anchor=cnstrnts.anchor;
  SoundLevelIndicator capturePreview=new SoundLevelIndicator(SimpleAudioLevelListener.MIN_LEVEL,SimpleAudioLevelListener.MAX_LEVEL);
  cnstrnts.anchor=GridBagConstraints.CENTER;
  cnstrnts.gridy=(captureCombo == null) ? 0 : 1;
  container.add(capturePreview,cnstrnts);
  cnstrnts.anchor=anchor;
  cnstrnts.gridy=GridBagConstraints.RELATIVE;
  if (featureNotifyAndPlaybackDevices) {
    playbackCombo=new JComboBox();
    playbackCombo.setEditable(false);
    playbackCombo.setModel(new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_PLAYBACK));
    playbackCombo.addActionListener(this);
    container.add(playbackCombo,cnstrnts);
    notifyCombo=new JComboBox();
    notifyCombo.setEditable(false);
    notifyCombo.setModel(new DeviceConfigurationComboBoxModel(mediaService.getDeviceConfiguration(),DeviceConfigurationComboBoxModel.AUDIO_NOTIFY));
    notifyCombo.addActionListener(this);
    container.add(notifyCombo,cnstrnts);
  }
  if ((AudioSystem.FEATURE_ECHO_CANCELLATION & audioSystemFeatures) != 0) {
    final SIPCommCheckBox echoCancelCheckBox=new SIPCommCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.configform.ECHOCANCEL"));
    echoCancelCheckBox.setSelected(mediaService.getDeviceConfiguration().isEchoCancel());
    echoCancelCheckBox.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        mediaService.getDeviceConfiguration().setEchoCancel(echoCancelCheckBox.isSelected());
      }
    }
);
    container.add(echoCancelCheckBox,cnstrnts);
  }
  if ((AudioSystem.FEATURE_DENOISE & audioSystemFeatures) != 0) {
    final SIPCommCheckBox denoiseCheckBox=new SIPCommCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.configform.DENOISE"));
    denoiseCheckBox.setSelected(mediaService.getDeviceConfiguration().isDenoise());
    denoiseCheckBox.addItemListener(new ItemListener(){
      public void itemStateChanged(      ItemEvent e){
        mediaService.getDeviceConfiguration().setDenoise(denoiseCheckBox.isSelected());
      }
    }
);
    container.add(denoiseCheckBox,cnstrnts);
  }
  cnstrnts.gridx=2;
  cnstrnts.insets=new Insets(3,3,3,0);
  cnstrnts.weightx=0;
  if (featureNotifyAndPlaybackDevices) {
    cnstrnts.gridy=2;
    playbackPlaySoundButton=new JButton(new ImageIcon(NeomediaActivator.getResources().getImageInBytes("plugin.notificationconfig.PLAY_ICON")));
    playbackPlaySoundButton.setMinimumSize(new Dimension(30,30));
    playbackPlaySoundButton.setPreferredSize(new Dimension(30,30));
    if (((DeviceConfigurationComboBoxModel.CaptureDevice)playbackCombo.getSelectedItem()).info == null) {
      playbackPlaySoundButton.setEnabled(false);
    }
    playbackPlaySoundButton.setOpaque(false);
    playbackPlaySoundButton.addActionListener(this);
    container.add(playbackPlaySoundButton,cnstrnts);
    cnstrnts.gridy=3;
    notificationPlaySoundButton=new JButton(new ImageIcon(NeomediaActivator.getResources().getImageInBytes("plugin.notificationconfig.PLAY_ICON")));
    notificationPlaySoundButton.setMinimumSize(new Dimension(30,30));
    notificationPlaySoundButton.setPreferredSize(new Dimension(30,30));
    if (((DeviceConfigurationComboBoxModel.CaptureDevice)notifyCombo.getSelectedItem()).info == null) {
      notificationPlaySoundButton.setEnabled(false);
    }
    notificationPlaySoundButton.setOpaque(false);
    notificationPlaySoundButton.addActionListener(this);
    container.add(notificationPlaySoundButton,cnstrnts);
  }
  if (audioLevelListenerThread == null) {
    audioLevelListenerThread=new AudioLevelListenerThread(audioSystem,captureCombo,capturePreview);
  }
 else {
    audioLevelListenerThread.init(audioSystem,captureCombo,capturePreview);
  }
}
