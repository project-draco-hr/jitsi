{
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug("NUM MSG: " + msg.getNumericCode() + ": "+ msg.getText());
  }
  Integer code=msg.getNumericCode();
  if (code == null) {
    LOGGER.debug("No 'code' in numeric message event.");
    return;
  }
  if (!IrcStack.this.isConnected()) {
    return;
  }
switch (code.intValue()) {
case IRCServerNumerics.CHANNEL_NICKS_END_OF_LIST:
    String text=msg.getText();
  String channelName=text.substring(0,text.indexOf(' '));
final ChatRoomIrcImpl chatRoom;
final IRCChannel channel;
synchronized (IrcStack.this.joined) {
if (IrcStack.this.joined.containsKey(channelName)) {
LOGGER.trace("Chat room '" + channelName + "' join event was announced or already "+ "finished. Stop handling this event.");
break;
}
LOGGER.trace("Starting unannounced join of chat room '" + channelName);
channel=IrcStack.this.connectionState.getChannelByName(channelName);
chatRoom=new ChatRoomIrcImpl(channelName,IrcStack.this.provider);
IrcStack.this.joined.put(channelName,chatRoom);
}
this.irc.addListener(new ChatRoomListener(this.irc,chatRoom));
try {
IrcStack.this.provider.getMUC().openChatRoomWindow(chatRoom);
}
 catch (NullPointerException e) {
LOGGER.error("failed to open chat room window",e);
}
IrcStack.this.prepareChatRoom(chatRoom,channel);
IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(chatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
LOGGER.trace("Unannounced join of chat room '" + channelName + "' completed.");
break;
case IRCServerNumerics.NO_SUCH_NICK_CHANNEL:
if (LOGGER.isTraceEnabled()) {
LOGGER.trace("Message did not get delivered: " + msg.asRaw());
}
final String msgText=msg.getText();
final int endOfTargetIndex=msgText.indexOf(' ');
if (endOfTargetIndex == -1) {
LOGGER.trace("Expected source nick name in error message, " + "but it cannot be found. Stop parsing.");
break;
}
final String targetNick=msgText.substring(0,endOfTargetIndex);
final String msgTextError=msgText.substring(endOfTargetIndex + 2);
MessageIrcImpl message=new MessageIrcImpl("",OperationSetBasicInstantMessaging.HTML_MIME_TYPE,OperationSetBasicInstantMessaging.DEFAULT_MIME_ENCODING,null);
final Contact to=IrcStack.this.provider.getPersistentPresence().findOrCreateContactByID(targetNick);
IrcStack.this.provider.getBasicInstantMessaging().fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED);
break;
default :
if (LOGGER.isTraceEnabled()) {
LOGGER.trace("This ServerNumericMessage (" + code + ") will not be handled by the ServerListener.");
}
break;
}
}
