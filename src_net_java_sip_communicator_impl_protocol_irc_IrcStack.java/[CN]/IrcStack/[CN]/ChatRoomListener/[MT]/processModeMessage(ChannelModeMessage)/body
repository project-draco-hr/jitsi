{
  ChatRoomMemberIrcImpl sourceMember=extractChatRoomMember(msg);
  ModeParser parser=new ModeParser(msg.getModeStr());
  for (  ModeEntry mode : parser.getModes()) {
switch (mode.getMode()) {
case OWNER:
      String ownerUserName=mode.getParams()[0];
    if (isMe(ownerUserName)) {
      ChatRoomLocalUserRoleChangeEvent event;
      if (mode.isAdded()) {
        event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.SILENT_MEMBER,ChatRoomMemberRole.OWNER,false);
      }
 else {
        event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.OWNER,ChatRoomMemberRole.SILENT_MEMBER,false);
      }
      this.chatroom.fireLocalUserRoleChangedEvent(event);
    }
 else {
      ChatRoomMember owner=this.chatroom.getChatRoomMember(mode.getParams()[0]);
      if (owner != null) {
        if (mode.isAdded()) {
          this.chatroom.fireMemberRoleEvent(owner,ChatRoomMemberRole.OWNER);
        }
 else {
          this.chatroom.fireMemberRoleEvent(owner,ChatRoomMemberRole.SILENT_MEMBER);
        }
      }
    }
  break;
case OPERATOR:
String opUserName=mode.getParams()[0];
if (isMe(opUserName)) {
ChatRoomLocalUserRoleChangeEvent event;
if (mode.isAdded()) {
  event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.SILENT_MEMBER,ChatRoomMemberRole.ADMINISTRATOR,false);
}
 else {
  event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.ADMINISTRATOR,ChatRoomMemberRole.SILENT_MEMBER,false);
}
this.chatroom.fireLocalUserRoleChangedEvent(event);
}
 else {
ChatRoomMember op=this.chatroom.getChatRoomMember(opUserName);
if (op != null) {
  if (mode.isAdded()) {
    this.chatroom.fireMemberRoleEvent(op,ChatRoomMemberRole.ADMINISTRATOR);
  }
 else {
    this.chatroom.fireMemberRoleEvent(op,ChatRoomMemberRole.SILENT_MEMBER);
  }
}
}
break;
case VOICE:
String voiceUserName=mode.getParams()[0];
if (isMe(voiceUserName)) {
ChatRoomLocalUserRoleChangeEvent event;
if (mode.isAdded()) {
event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.SILENT_MEMBER,ChatRoomMemberRole.MEMBER,false);
}
 else {
event=new ChatRoomLocalUserRoleChangeEvent(this.chatroom,ChatRoomMemberRole.MEMBER,ChatRoomMemberRole.SILENT_MEMBER,false);
}
this.chatroom.fireLocalUserRoleChangedEvent(event);
}
 else {
ChatRoomMember voice=this.chatroom.getChatRoomMember(voiceUserName);
if (voice != null) {
if (mode.isAdded()) {
this.chatroom.fireMemberRoleEvent(voice,ChatRoomMemberRole.MEMBER);
}
 else {
this.chatroom.fireMemberRoleEvent(voice,ChatRoomMemberRole.SILENT_MEMBER);
}
}
}
break;
case LIMIT:
MessageIrcImpl message;
if (mode.isAdded()) {
try {
message=new MessageIrcImpl("channel limit set to " + Integer.parseInt(mode.getParams()[0]) + " by "+ (sourceMember.getContactAddress().length() == 0 ? "server" : sourceMember.getContactAddress()),"text/plain","UTF-8",null);
}
 catch (NumberFormatException e) {
LOGGER.warn("server sent incorrect limit: " + "limit is not a number",e);
break;
}
}
 else {
message=new MessageIrcImpl("channel limit removed by " + (sourceMember.getContactAddress().length() == 0 ? "server" : sourceMember.getContactAddress()),"text/plain","UTF-8",null);
}
this.chatroom.fireMessageReceivedEvent(message,sourceMember,new Date(),ChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
break;
case UNKNOWN:
if (LOGGER.isInfoEnabled()) {
LOGGER.info("Unknown mode: " + (mode.isAdded() ? "+" : "-") + mode.getParams()[0]+ ". Original mode string: '"+ msg.getModeStr()+ "'");
}
break;
default :
if (LOGGER.isInfoEnabled()) {
LOGGER.info("Unsupported mode '" + (mode.isAdded() ? "+" : "-") + mode.getMode()+ "' (from modestring '"+ msg.getModeStr()+ "')");
}
break;
}
}
}
