{
  if (code == ERR_NOSUCHCHANNEL) {
    logger.error("No such channel:" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NOSUCHCHANNEL);
  }
 else   if (code == ERR_BADCHANMASK) {
    logger.error("Bad channel mask :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_BADCHANMASK);
  }
 else   if (code == ERR_BADCHANNELKEY) {
    logger.error("Bad channel key :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_BADCHANNELKEY);
  }
 else   if (code == ERR_BANNEDFROMCHAN) {
    logger.error("Banned from channel :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_BANNEDFROMCHAN);
  }
 else   if (code == ERR_CHANNELISFULL) {
    logger.error("Channel is full :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_CHANNELISFULL);
  }
 else   if (code == ERR_CHANOPRIVSNEEDED) {
    logger.error("Channel operator privilages needed :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_CHANOPRIVSNEEDED);
  }
 else   if (code == ERR_ERRONEUSNICKNAME) {
    logger.error("ERR_ERRONEUSNICKNAME :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_ERRONEUSNICKNAME);
  }
 else   if (code == ERR_INVITEONLYCHAN) {
    logger.error("Invite only channel :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_INVITEONLYCHAN);
  }
 else   if (code == ERR_NEEDMOREPARAMS) {
    logger.error("Need more params :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NEEDMOREPARAMS);
  }
 else   if (code == ERR_NICKCOLLISION) {
    logger.error("Nick collision :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NICKCOLLISION);
  }
 else   if (code == ERR_NICKNAMEINUSE) {
    logger.error("Nickname in use :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NICKNAMEINUSE);
  }
 else   if (code == ERR_NONICKNAMEGIVEN) {
    logger.error("No nickname given :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NONICKNAMEGIVEN);
  }
 else   if (code == ERR_NOTONCHANNEL) {
    logger.error("Not on channel :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_NOTONCHANNEL);
  }
 else   if (code == ERR_TOOMANYCHANNELS) {
    logger.error("Too many channels :" + code + ": Response :"+ response);
    this.notifyChatRoomOperation(ERR_TOOMANYCHANNELS);
  }
 else   if (code == RPL_WHOISUSER) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String nickname=tokenizer.nextToken();
    String login=tokenizer.nextToken();
    String hostname=tokenizer.nextToken();
    UserInfo userInfo=new UserInfo(nickname,login,hostname);
    this.userInfoTable.put(nickname,userInfo);
  }
 else   if (code == RPL_WHOISSERVER) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String userNickName=tokenizer.nextToken();
    int end=response.indexOf(':');
    String serverInfo=response.substring(end + 1);
    if (userInfoTable.containsKey(userNickName)) {
      userInfoTable.get(userNickName).setServerInfo(serverInfo);
    }
  }
 else   if (code == RPL_WHOISOPERATOR) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String userNickName=tokenizer.nextToken();
    if (userInfoTable.containsKey(userNickName)) {
      userInfoTable.get(userNickName).setIrcOp(true);
    }
  }
 else   if (code == RPL_WHOISIDLE) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String userNickName=tokenizer.nextToken();
    long idle=Long.parseLong(tokenizer.nextToken());
    if (userInfoTable.containsKey(userNickName)) {
      userInfoTable.get(userNickName).setIdle(idle);
    }
  }
 else   if (code == RPL_WHOISCHANNELS) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String userNickName=tokenizer.nextToken();
    if (userInfoTable.containsKey(userNickName)) {
      userInfoTable.get(userNickName).clearJoinedChatRoom();
      while (tokenizer.hasMoreTokens()) {
        String channel=tokenizer.nextToken();
        if (channel.startsWith(":"))         channel=channel.substring(1);
        userInfoTable.get(userNickName).addJoinedChatRoom(channel);
      }
    }
  }
 else   if (code == RPL_ENDOFWHOIS) {
    StringTokenizer tokenizer=new StringTokenizer(response);
    tokenizer.nextToken();
    String userNickName=tokenizer.nextToken();
    if (userInfoTable.containsKey(userNickName)) {
      UserInfo userInfo=userInfoTable.get(userNickName);
      this.onWhoIs(userInfo);
    }
  }
 else   if (code == RPL_ENDOFMOTD) {
    this.isInitialized=true;
    ChatRoom[] joinCacheCopy=joinCache.toArray(new ChatRoom[joinCache.size()]);
    joinCache.clear();
    for (    ChatRoom joinCacheElement : joinCacheCopy) {
      this.join(joinCacheElement);
    }
  }
 else   if (code != RPL_LISTSTART && code != RPL_LIST && code != RPL_LISTEND && code != RPL_ENDOFNAMES) {
    if (logger.isTraceEnabled())     logger.trace("Server response: Code : " + code + " Response : "+ response);
    int delimiterIndex=response.indexOf(':');
    if (delimiterIndex != -1 && delimiterIndex < response.length() - 1)     response=response.substring(delimiterIndex + 1);
    MessageIrcImpl message=new MessageIrcImpl(response,MessageIrcImpl.DEFAULT_MIME_TYPE,MessageIrcImpl.DEFAULT_MIME_ENCODING,null);
    ChatRoomIrcImpl serverRoom=ircMUCOpSet.findSystemRoom();
    ChatRoomMember serverMember=ircMUCOpSet.findSystemMember();
    serverRoom.fireMessageReceivedEvent(message,serverMember,System.currentTimeMillis(),ChatRoomMessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
  }
}
