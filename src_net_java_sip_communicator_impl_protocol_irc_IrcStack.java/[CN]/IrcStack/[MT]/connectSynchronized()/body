{
  final Result<IIRCState,Exception> result=new Result<IIRCState,Exception>();
synchronized (result) {
    try {
      this.irc.connect(this.params,new Callback<IIRCState>(){
        @Override public void onSuccess(        IIRCState state){
synchronized (result) {
            LOGGER.trace("IRC connected successfully!");
            result.setDone(state);
            result.notifyAll();
          }
        }
        @Override public void onFailure(        Exception e){
synchronized (result) {
            LOGGER.trace("IRC connection FAILED!",e);
            result.setDone(e);
            result.notifyAll();
          }
        }
      }
);
      this.provider.setCurrentRegistrationState(RegistrationState.REGISTERING);
      while (!result.isDone()) {
        LOGGER.trace("Waiting for the connection to be " + "established ...");
        result.wait();
      }
      this.connectionState=result.getValue();
      if (this.connectionState != null && this.connectionState.isConnected()) {
        this.provider.setCurrentRegistrationState(RegistrationState.REGISTERED);
      }
 else {
        this.provider.setCurrentRegistrationState(RegistrationState.CONNECTION_FAILED);
        Exception e=result.getException();
        if (e != null)         throw e;
      }
    }
 catch (    IOException e) {
      this.provider.setCurrentRegistrationState(RegistrationState.CONNECTION_FAILED);
      throw e;
    }
catch (    InterruptedException e) {
      this.provider.setCurrentRegistrationState(RegistrationState.UNREGISTERED);
      throw e;
    }
  }
}
