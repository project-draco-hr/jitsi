{
  if (isConnected() == false)   throw new IllegalStateException("Please connect to an IRC server first");
  if (chatroom == null)   throw new IllegalArgumentException("chatroom cannot be null");
  if (password == null)   throw new IllegalArgumentException("password cannot be null");
  if (this.joined.contains(chatroom) || chatroom.isPrivate()) {
    return;
  }
  LOGGER.trace("Start joining channel " + chatroom.getIdentifier());
  final Object joinSignal=new Object();
synchronized (joinSignal) {
    try {
      LOGGER.trace("Issue join channel command to IRC library and wait for join operation to complete (un)successfully.");
      this.irc.joinChannel(chatroom.getIdentifier(),password,new Callback<IRCChannel>(){
        @Override public void onSuccess(        IRCChannel channel){
synchronized (joinSignal) {
            try {
              IrcStack.this.joined.add(chatroom);
              IrcStack.this.irc.addListener(new ChatRoomListener(chatroom));
              IRCTopic topic=channel.getTopic();
              chatroom.updateSubject(topic.getValue());
              for (              IRCUser user : channel.getUsers()) {
                ChatRoomMemberRole role=ChatRoomMemberRole.SILENT_MEMBER;
                Set<IRCUserStatus> statuses=channel.getStatusesForUser(user);
                for (                IRCUserStatus status : statuses) {
                  role=convertMemberMode(status.getChanModeType().charValue());
                }
                if (IrcStack.this.getNick().equals(user.getNick())) {
                  chatroom.prepUserRole(role);
                }
 else {
                  ChatRoomMemberIrcImpl member=new ChatRoomMemberIrcImpl(IrcStack.this.provider,chatroom,user.getNick(),role);
                  chatroom.addChatRoomMember(member.getContactAddress(),member);
                }
              }
            }
  finally {
              IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
              LOGGER.trace("Finished successful join callback. Waking up original thread.");
              joinSignal.notifyAll();
            }
          }
        }
        @Override public void onFailure(        Exception e){
synchronized (joinSignal) {
            try {
              MessageIrcImpl message=new MessageIrcImpl("Failed to join channel " + chatroom.getIdentifier() + " ("+ e.getMessage()+ ")","text/plain","UTF-8","Failed to join");
              chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            }
  finally {
              LOGGER.trace("Finished unsuccessful join callback. Waking up original thread.");
              joinSignal.notifyAll();
            }
          }
        }
      }
);
      joinSignal.wait();
      LOGGER.trace("Finished waiting for join operation to complete.");
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
}
