{
  if (!isConnected())   throw new IllegalStateException("Please connect to an IRC server first");
  if (chatroom == null)   throw new IllegalArgumentException("chatroom cannot be null");
  if (password == null)   throw new IllegalArgumentException("password cannot be null");
  if (this.joined.containsKey(chatroom.getIdentifier()) || chatroom.isPrivate()) {
    return;
  }
  LOGGER.trace("Start joining channel " + chatroom.getIdentifier());
  final Result<Object,Exception> joinSignal=new Result<Object,Exception>();
synchronized (joinSignal) {
    LOGGER.trace("Issue join channel command to IRC library and wait for" + " join operation to complete (un)successfully.");
    this.joining.put(chatroom.getIdentifier(),joinSignal);
    this.irc.joinChannel(chatroom.getIdentifier(),password,new Callback<IRCChannel>(){
      @Override public void onSuccess(      IRCChannel channel){
        if (LOGGER.isTraceEnabled()) {
          LOGGER.trace("Started callback for successful join " + "of channel '" + chatroom.getIdentifier() + "'.");
        }
        ChatRoomIrcImpl actualChatRoom=chatroom;
synchronized (joinSignal) {
          if (channel.getName().equalsIgnoreCase(actualChatRoom.getIdentifier())) {
            try {
              IrcStack.this.joined.put(actualChatRoom.getIdentifier(),actualChatRoom);
              IrcStack.this.joining.remove(actualChatRoom.getIdentifier());
              IrcStack.this.irc.addListener(new ChatRoomListener(actualChatRoom));
              prepareChatRoom(actualChatRoom,channel);
            }
  finally {
              IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(actualChatRoom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
              LOGGER.trace("Finished successful join callback " + "for channel '" + chatroom.getIdentifier() + "'. Waking up original thread.");
              joinSignal.setDone();
              joinSignal.notifyAll();
            }
          }
 else {
            IrcStack.this.joining.remove(chatroom.getIdentifier());
          }
        }
      }
      @Override public void onFailure(      Exception e){
        LOGGER.trace("Started callback for failed attempt to " + "join channel '" + chatroom.getIdentifier() + "'.");
synchronized (joinSignal) {
          try {
            IrcStack.this.joining.remove(chatroom.getIdentifier());
            MessageIrcImpl message=new MessageIrcImpl("Failed to join channel " + chatroom.getIdentifier() + " ("+ e.getMessage()+ ")","text/plain","UTF-8","Failed to join");
            chatroom.fireMessageReceivedEvent(message,null,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
          }
  finally {
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Finished callback for failed " + "attempt to join channel '" + chatroom.getIdentifier() + "'. Waking up original thread.");
            }
            joinSignal.setDone(e);
            joinSignal.notifyAll();
          }
        }
      }
    }
);
    try {
      while (!joinSignal.isDone()) {
        LOGGER.trace("Waiting for channel join message ...");
        joinSignal.wait();
      }
      LOGGER.trace("Finished waiting for join operation for channel '" + chatroom.getIdentifier() + "' to complete.");
      Exception e=joinSignal.getException();
      if (e != null) {
        throw new OperationFailedException(e.getMessage(),OperationFailedException.CHAT_ROOM_NOT_JOINED,e);
      }
    }
 catch (    InterruptedException e) {
      throw new OperationFailedException(e.getMessage(),OperationFailedException.INTERNAL_ERROR,e);
    }
  }
}
