{
  if (!isConnected())   throw new IllegalStateException("Please connect to an IRC server first");
  if (chatroom == null)   throw new IllegalArgumentException("chatroom cannot be null");
  if (password == null)   throw new IllegalArgumentException("password cannot be null");
  if (this.joined.containsKey(chatroom.getIdentifier()) || chatroom.isPrivate()) {
    return;
  }
  LOGGER.trace("Start joining channel " + chatroom.getIdentifier());
  final Result<Object,Exception> joinSignal=new Result<Object,Exception>();
synchronized (joinSignal) {
    LOGGER.trace("Issue join channel command to IRC library and wait for" + " join operation to complete (un)successfully.");
    this.joining.put(chatroom.getIdentifier(),joinSignal);
    this.irc.joinChannel(chatroom.getIdentifier(),password,new Callback<IRCChannel>(){
      @Override public void onSuccess(      IRCChannel channel){
        if (LOGGER.isTraceEnabled()) {
          LOGGER.trace("Started callback for successful join " + "of channel '" + chatroom.getIdentifier() + "'.");
        }
        String chatRoomId=chatroom.getIdentifier();
        boolean isRequestedChatRoom=channel.getName().equalsIgnoreCase(chatRoomId);
synchronized (joinSignal) {
          if (!isRequestedChatRoom) {
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Callback for successful join " + "finished prematurely since we " + "got forwarded from '" + chatRoomId + "' to '"+ channel.getName()+ "'. Joining of forwarded channel "+ "gets handled by Server Listener "+ "since that channel was not "+ "announced.");
            }
            IrcStack.this.joining.remove(chatRoomId);
            IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED,"We got forwarded to channel '" + channel.getName() + "'.");
            joinSignal.setDone();
            joinSignal.notifyAll();
            return;
          }
          try {
            IrcStack.this.joined.put(chatRoomId,chatroom);
            IrcStack.this.joining.remove(chatRoomId);
            IrcStack.this.irc.addListener(new ChatRoomListener(chatroom));
            prepareChatRoom(chatroom,channel);
          }
  finally {
            IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Finished successful join " + "callback for channel '" + chatRoomId + "'. Waking up original thread.");
            }
            joinSignal.setDone();
            joinSignal.notifyAll();
          }
        }
      }
      @Override public void onFailure(      Exception e){
        LOGGER.trace("Started callback for failed attempt to " + "join channel '" + chatroom.getIdentifier() + "'.");
        String chatRoomId=chatroom.getIdentifier();
synchronized (joinSignal) {
          try {
            IrcStack.this.joining.remove(chatRoomId);
            IrcStack.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED,e.getMessage());
          }
  finally {
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Finished callback for failed " + "attempt to join channel '" + chatRoomId + "'. Waking up original thread.");
            }
            joinSignal.setDone(e);
            joinSignal.notifyAll();
          }
        }
      }
    }
);
    try {
      while (!joinSignal.isDone()) {
        LOGGER.trace("Waiting for channel join message ...");
        joinSignal.wait();
      }
      LOGGER.trace("Finished waiting for join operation for channel '" + chatroom.getIdentifier() + "' to complete.");
    }
 catch (    InterruptedException e) {
      throw new OperationFailedException(e.getMessage(),OperationFailedException.INTERNAL_ERROR,e);
    }
  }
}
