{
  final String plainPass=determinePlainPassword(password,config);
  final IRCServer server=createServer(config,host,port,secureConnection,plainPass);
  try {
synchronized (this.session) {
      final IrcConnection current=this.session.get();
      if (current != null && current.isConnected()) {
        return;
      }
      this.params.setServer(server);
      final IRCApi irc=new IRCApiImpl(true);
      if (LOGGER.isTraceEnabled()) {
        irc.addListener(new DebugListener());
      }
      this.session.set(new IrcConnection(this.context,config,irc,this.params,password,this));
      this.provider.setCurrentRegistrationState(RegistrationState.REGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST);
    }
  }
 catch (  IOException e) {
    if (isCausedByCertificateException(e)) {
      LOGGER.info("Connection aborted due to server certificate.");
      this.provider.setCurrentRegistrationState(RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST);
      throw new OperationFailedException("Failed certificate verification.",OperationFailedException.OPERATION_CANCELED);
    }
 else {
      this.provider.setCurrentRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED);
      throw e;
    }
  }
catch (  InterruptedException e) {
    this.provider.setCurrentRegistrationState(RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST);
    throw e;
  }
catch (  NotYetConnectedException e) {
    this.provider.setCurrentRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED);
    throw e;
  }
catch (  Exception e) {
    LOGGER.error("Unanticipated exception occurred!",e);
    this.provider.setCurrentRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_INTERNAL_ERROR);
    throw e;
  }
}
