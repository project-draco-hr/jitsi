{
  Collection rs=callHistoryService.findByEndDate(controlDate2);
  Iterator resultIter=rs.iterator();
  assertTrue("Calls too few - findByEndDate",rs.size() >= 3);
  rs=callHistoryService.findByPeriod(controlDate1,controlDate2);
  resultIter=rs.iterator();
  assertEquals("Calls must be 2",rs.size(),2);
  CallRecord rec=(CallRecord)resultIter.next();
  CallParticipantRecord participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(2)));
  rec=(CallRecord)resultIter.next();
  participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(1)));
  rs=callHistoryService.findByStartDate(controlDate2);
  resultIter=rs.iterator();
  assertEquals("Calls must be 1",rs.size(),1);
  rec=(CallRecord)resultIter.next();
  participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(3)));
  rs=callHistoryService.findLast(3);
  resultIter=rs.iterator();
  assertEquals("Calls must be 3",rs.size(),3);
  rec=(CallRecord)resultIter.next();
  participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(3)));
  rec=(CallRecord)resultIter.next();
  participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(2)));
  rec=(CallRecord)resultIter.next();
  participant=(CallParticipantRecord)rec.getParticipantRecords().get(0);
  assertTrue("Participant incorrect ",participant.getParticipantAddress().equals(participantAddresses.get(1)));
}
