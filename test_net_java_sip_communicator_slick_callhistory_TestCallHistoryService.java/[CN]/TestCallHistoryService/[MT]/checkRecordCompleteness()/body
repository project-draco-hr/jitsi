{
  logger.info("---=== checkRecordCompleteness ===---");
  String[] partAddresses=new String[]{"some_address","some_new_address"};
  try {
    Call newCall=mockBTelphonyOpSet.placeCall(partAddresses[0]);
    Vector<CallPeer> v=new Vector<CallPeer>();
    Iterator<? extends CallPeer> iter=newCall.getCallPeers();
    while (iter.hasNext()) {
      CallPeer item=iter.next();
      v.add(item);
    }
    waitSeconds(2000);
    CallPeer newParticipant=mockBTelphonyOpSet.addNewCallPeer(newCall,partAddresses[1]);
    mockBTelphonyOpSet.hangupCallPeer(newParticipant);
    waitSeconds(2000);
    iter=v.iterator();
    while (iter.hasNext()) {
      CallPeer item=iter.next();
      mockBTelphonyOpSet.hangupCallPeer(item);
    }
  }
 catch (  Exception ex1) {
    logger.error("Cannot place mock call",ex1);
    fail("Cannot place mock call");
  }
  Collection<CallRecord> lastCall=callHistoryService.findLast(1);
  assertEquals("There must be 1 Call",1,lastCall.size());
  CallRecord callRecord=lastCall.iterator().next();
  assertEquals("There must be 2 participants in the call",2,callRecord.getPeerRecords().size());
  CallPeerRecord callP1=callRecord.findPeerRecord(partAddresses[0]);
  CallPeerRecord callP2=callRecord.findPeerRecord(partAddresses[1]);
  assertTrue("Second participant added after first one",callP2.getStartTime().after(callP1.getStartTime()));
  assertTrue("Second participant hanguped before first one",callP2.getEndTime().before(callP1.getEndTime()));
}
