{
  Contact contact=evt.getDestinationContact();
  OtrContact otrContact=OtrContactManager.getOtrContact(contact,evt.getContactResource());
  OtrPolicy policy=OtrActivator.scOtrEngine.getContactPolicy(contact);
  ScSessionStatus sessionStatus=OtrActivator.scOtrEngine.getSessionStatus(otrContact);
  if (!policy.getEnableManual() && sessionStatus != ScSessionStatus.ENCRYPTED && sessionStatus != ScSessionStatus.FINISHED)   return new MessageDeliveredEvent[]{evt};
  if (OtrActivator.scOtrEngine.isMessageUIDInjected(evt.getSourceMessage().getMessageUID()))   return new MessageDeliveredEvent[]{evt};
  String msgContent=evt.getSourceMessage().getContent();
  String[] processedMessageContent=OtrActivator.scOtrEngine.transformSending(otrContact,msgContent);
  if (processedMessageContent == null || processedMessageContent.length <= 0 || processedMessageContent[0].length() < 1)   return new MessageDeliveredEvent[0];
  if (processedMessageContent.length == 1 && processedMessageContent[0].equals(msgContent))   return new MessageDeliveredEvent[]{evt};
  final MessageDeliveredEvent[] processedEvents=new MessageDeliveredEvent[processedMessageContent.length];
  for (int i=0; i < processedMessageContent.length; i++) {
    final String fragmentContent=processedMessageContent[i];
    OperationSetBasicInstantMessaging imOpSet=contact.getProtocolProvider().getOperationSet(OperationSetBasicInstantMessaging.class);
    Message processedMessage=imOpSet.createMessage(fragmentContent,evt.getSourceMessage().getContentType(),evt.getSourceMessage().getEncoding(),evt.getSourceMessage().getSubject());
    final MessageDeliveredEvent processedEvent=new MessageDeliveredEvent(processedMessage,contact,evt.getTimestamp());
    if (processedMessage.getContent().contains(SerializationConstants.HEAD)) {
      processedEvent.setMessageEncrypted(true);
    }
    processedEvents[i]=processedEvent;
  }
  return processedEvents;
}
