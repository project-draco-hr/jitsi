{
  Set set=GuiActivator.getProtocolProviderFactories().entrySet();
  Iterator iter=set.iterator();
  while (iter.hasNext()) {
    Map.Entry entry=(Map.Entry)iter.next();
    ProtocolProviderFactory providerFactory=(ProtocolProviderFactory)entry.getValue();
    ArrayList accountsList=providerFactory.getRegisteredAccounts();
    AccountID accountID;
    ServiceReference serRef;
    ProtocolProviderService protocolProvider;
    for (int i=0; i < accountsList.size(); i++) {
      accountID=(AccountID)accountsList.get(i);
      boolean isHidden=accountID.getAccountProperties().get("HIDDEN_PROTOCOL") != null;
      if (isHidden)       continue;
      serRef=providerFactory.getProviderForAccount(accountID);
      protocolProvider=(ProtocolProviderService)GuiActivator.bundleContext.getService(serRef);
      String pName=protocolProvider.getProtocolDisplayName();
      Image protocolImage=null;
      try {
        protocolImage=ImageIO.read(new ByteArrayInputStream(protocolProvider.getProtocolIcon().getIcon(ProtocolIcon.ICON_SIZE_16x16)));
      }
 catch (      IOException e) {
        logger.error("Could not read image.",e);
      }
      JLabel protocolLabel=new JLabel();
      protocolLabel.setText(pName);
      protocolLabel.setIcon(new ImageIcon(protocolImage));
      tableModel.addRow(new Object[]{protocolProvider,protocolLabel,accountID.getUserID()});
    }
  }
}
