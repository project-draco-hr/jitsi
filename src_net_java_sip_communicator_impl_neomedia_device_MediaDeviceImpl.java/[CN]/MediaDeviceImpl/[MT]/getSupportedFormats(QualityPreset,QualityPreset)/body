{
  MediaServiceImpl mediaServiceImpl=NeomediaActivator.getMediaServiceImpl();
  EncodingConfiguration encodingConfiguration=mediaServiceImpl.getEncodingConfiguration();
  MediaFormat[] supportedEncodings=encodingConfiguration.getSupportedEncodings(getMediaType());
  List<MediaFormat> supportedFormats=new ArrayList<MediaFormat>();
  if (supportedEncodings != null) {
    for (    MediaFormat f : supportedEncodings) {
      if ("h264".equalsIgnoreCase(f.getEncoding())) {
        Map<String,String> h264AdvancedAttributes=f.getAdvancedAttributes();
        if (h264AdvancedAttributes == null)         h264AdvancedAttributes=new HashMap<String,String>();
        MediaLocator captureDeviceInfoLocator;
        Dimension sendSize=null;
        if ((captureDeviceInfo != null) && ((captureDeviceInfoLocator=captureDeviceInfo.getLocator()) != null) && !DeviceSystem.LOCATOR_PROTOCOL_IMGSTREAMING.equals(captureDeviceInfoLocator.getProtocol())) {
          if (sendPreset != null)           sendSize=sendPreset.getResolution();
 else           sendSize=mediaServiceImpl.getDeviceConfiguration().getVideoSize();
        }
        Dimension receiveSize;
        if (receivePreset != null)         receiveSize=receivePreset.getResolution();
 else {
          ScreenDevice screen=mediaServiceImpl.getDefaultScreenDevice();
          receiveSize=(screen == null) ? null : screen.getSize();
        }
        h264AdvancedAttributes.put("imageattr",MediaUtils.createImageAttr(sendSize,receiveSize));
        f=mediaServiceImpl.getFormatFactory().createMediaFormat(f.getEncoding(),f.getClockRate(),f.getFormatParameters(),h264AdvancedAttributes);
      }
      if (f != null)       supportedFormats.add(f);
    }
  }
  return supportedFormats;
}
