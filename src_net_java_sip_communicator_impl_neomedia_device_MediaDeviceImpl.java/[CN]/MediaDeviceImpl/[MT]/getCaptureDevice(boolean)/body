{
  if (getDirection().allowsSending() && (captureDevice == null) && create) {
    CaptureDevice captureDevice=null;
    Throwable exception=null;
    try {
      captureDevice=(CaptureDevice)Manager.createDataSource(captureDeviceInfo.getLocator());
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
catch (    NoDataSourceException ndse) {
      exception=ndse;
    }
    if (exception != null)     logger.error("Failed to create CaptureDevice DataSource " + "from CaptureDeviceInfo " + captureDeviceInfo,exception);
 else {
      if (logger.isTraceEnabled() && (captureDevice instanceof PushBufferDataSource))       captureDevice=new CaptureDeviceDelegatePushBufferDataSource(captureDevice){
        @Override public void connect() throws IOException {
          super.connect();
          if (logger.isTraceEnabled())           logger.trace("Connected " + MediaDeviceImpl.toString(this.captureDevice));
        }
        @Override public void disconnect(){
          super.disconnect();
          if (logger.isTraceEnabled())           logger.trace("Disconnected " + MediaDeviceImpl.toString(this.captureDevice));
        }
        @Override public void start() throws IOException {
          super.start();
          if (logger.isTraceEnabled())           logger.trace("Started " + MediaDeviceImpl.toString(this.captureDevice));
        }
        @Override public void stop() throws IOException {
          super.stop();
          if (logger.isTraceEnabled())           logger.trace("Stopped " + MediaDeviceImpl.toString(this.captureDevice));
        }
      }
;
      setCaptureDevice(captureDevice);
    }
  }
  return captureDevice;
}
