{
  if (request == null) {
    logger.error("request shouldn't be null.");
    return null;
  }
  Set<ProtocolProviderServiceSipImpl> currentListeners=this.getSipListeners();
  if (currentListeners.size() == 0) {
    logger.error("no listeners");
    return null;
  }
  URI requestURI=request.getRequestURI();
  if (requestURI.isSipURI()) {
    String requestUser=((SipURI)requestURI).getUser();
    List<ProtocolProviderServiceSipImpl> candidates=new ArrayList<ProtocolProviderServiceSipImpl>();
    for (    ProtocolProviderServiceSipImpl listener : currentListeners) {
      String ourUserID=(String)listener.getAccountID().getUserID();
      if (ourUserID.equals(requestUser)) {
        logger.trace("suitable candidate found: " + listener.getAccountID());
        candidates.add(listener);
      }
    }
    if (candidates.size() == 1) {
      ProtocolProviderServiceSipImpl perfectMatch=candidates.get(0);
      logger.trace("Will dispatch to \"" + perfectMatch.getAccountID() + "\"");
      return perfectMatch;
    }
    if (candidates.size() > 1) {
      for (      ProtocolProviderServiceSipImpl candidate : candidates) {
        String hostValue=((SipURI)requestURI).getParameter(SipStackSharing.CONTACT_ADDRESS_CUSTOM_PARAM_NAME);
        if (hostValue == null)         continue;
        if (hostValue.equals(candidate.getContactAddressCustomParamValue())) {
          logger.trace("Will dispatch to \"" + candidate.getAccountID() + "\" because "+ "\" the custom param was set");
          return candidate;
        }
      }
      for (      ProtocolProviderServiceSipImpl candidate : candidates) {
        URI fromURI=((FromHeader)request.getHeader(FromHeader.NAME)).getAddress().getURI();
        if (fromURI.isSipURI() == false)         continue;
        SipURI ourURI=(SipURI)candidate.getOurSipAddress((SipURI)fromURI).getURI();
        String ourHost=ourURI.getHost();
        URI toURI=((ToHeader)request.getHeader(ToHeader.NAME)).getAddress().getURI();
        if (toURI.isSipURI() == false)         continue;
        String toHost=((SipURI)toURI).getHost();
        if (toHost.equals(ourHost)) {
          logger.trace("Will dispatch to \"" + candidate.getAccountID() + "\" because "+ "host in the To: is the same as in our AOR");
          return candidate;
        }
      }
      ProtocolProviderServiceSipImpl target=candidates.iterator().next();
      logger.warn("Will randomly dispatch to \"" + target.getAccountID() + "\" because there is ambiguity on the username from"+ " the Request-URI");
      logger.trace("\n" + request);
      return target;
    }
    ProtocolProviderServiceSipImpl target=currentListeners.iterator().next();
    logger.info("Will randomly dispatch to \"" + target.getAccountID() + "\" because the username in the Request-URI "+ "is unknown or empty");
    logger.trace("\n" + request);
    return target;
  }
 else {
    logger.error("Request-URI is not a SIP URI, dropping");
  }
  return null;
}
