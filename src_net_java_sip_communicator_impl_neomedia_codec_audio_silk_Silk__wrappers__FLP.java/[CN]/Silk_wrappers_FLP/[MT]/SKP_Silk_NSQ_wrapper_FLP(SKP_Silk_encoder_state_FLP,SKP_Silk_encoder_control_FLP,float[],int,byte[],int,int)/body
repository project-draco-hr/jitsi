{
  int i, j;
  float tmp_float;
  short[] x_16=new short[Silk_define.MAX_FRAME_LENGTH];
  int[] Gains_Q16=new int[Silk_define.NB_SUBFR];
  short[][] PredCoef_Q12=new short[2][Silk_define.MAX_LPC_ORDER];
  short[] LTPCoef_Q14=new short[Silk_define.LTP_ORDER * Silk_define.NB_SUBFR];
  int LTP_scale_Q14;
  short[] AR2_Q13=new short[Silk_define.NB_SUBFR * Silk_define.SHAPE_LPC_ORDER_MAX];
  int[] LF_shp_Q14=new int[Silk_define.NB_SUBFR];
  int Lambda_Q10;
  int[] Tilt_Q14=new int[Silk_define.NB_SUBFR];
  int[] HarmShapeGain_Q14=new int[Silk_define.NB_SUBFR];
  for (i=0; i < Silk_define.NB_SUBFR * Silk_define.SHAPE_LPC_ORDER_MAX; i++) {
    AR2_Q13[i]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FLP.SKP_float2int(psEncCtrl.AR2[i] * 8192.0f));
  }
  short[] ar2_q13=new short[Silk_define.NB_SUBFR * Silk_define.SHAPE_LPC_ORDER_MAX];
  String ar2_q13_filename="D:/gsoc/ar2_q13";
  for (i=0; i < Silk_define.NB_SUBFR; i++) {
    LF_shp_Q14[i]=(Silk_SigProc_FLP.SKP_float2int(psEncCtrl.LF_AR_shp[i] * 16384.0f) << 16) | (0x0000FFFF & Silk_SigProc_FLP.SKP_float2int(psEncCtrl.LF_MA_shp[i] * 16384.0f));
    Tilt_Q14[i]=Silk_SigProc_FLP.SKP_float2int(psEncCtrl.Tilt[i] * 16384.0f);
    HarmShapeGain_Q14[i]=Silk_SigProc_FLP.SKP_float2int(psEncCtrl.HarmShapeGain[i] * 16384.0f);
  }
  Lambda_Q10=Silk_SigProc_FLP.SKP_float2int(psEncCtrl.Lambda * 1024.0f);
  for (i=0; i < Silk_define.NB_SUBFR * Silk_define.LTP_ORDER; i++) {
    LTPCoef_Q14[i]=(short)Silk_SigProc_FLP.SKP_float2int(psEncCtrl.LTPCoef[i] * 16384.0f);
  }
  for (j=0; j < Silk_define.NB_SUBFR >> 1; j++) {
    for (i=0; i < Silk_define.MAX_LPC_ORDER; i++) {
      PredCoef_Q12[j][i]=(short)Silk_SigProc_FLP.SKP_float2int(psEncCtrl.PredCoef[j][i] * 4096.0f);
    }
  }
  for (i=0; i < Silk_define.NB_SUBFR; i++) {
    tmp_float=Silk_SigProc_FIX.SKP_LIMIT((psEncCtrl.Gains[i] * 65536.0f),2147483000.0f,-2147483000.0f);
    Gains_Q16[i]=Silk_SigProc_FLP.SKP_float2int(tmp_float);
    if (psEncCtrl.Gains[i] > 0.0f) {
      assert(tmp_float >= 0.0f);
      assert(Gains_Q16[i] >= 0);
    }
  }
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    LTP_scale_Q14=Silk_tables_other.SKP_Silk_LTPScales_table_Q14[psEncCtrl.sCmn.LTP_scaleIndex];
  }
 else {
    LTP_scale_Q14=0;
  }
  Silk_SigProc_FLP.SKP_float2short_array(x_16,0,x,x_offset,psEnc.sCmn.frame_length);
  short x_16_test[]=new short[Silk_define.MAX_FRAME_LENGTH];
  String x_16_filename="D:/gsoc/x_16";
  short[] PredCoef_Q12_dim1_tmp=new short[PredCoef_Q12.length * PredCoef_Q12[0].length];
  int PredCoef_Q12_offset=0;
  for (int PredCoef_Q12_i=0; PredCoef_Q12_i < PredCoef_Q12.length; PredCoef_Q12_i++) {
    System.arraycopy(PredCoef_Q12[PredCoef_Q12_i],0,PredCoef_Q12_dim1_tmp,PredCoef_Q12_offset,PredCoef_Q12[PredCoef_Q12_i].length);
    PredCoef_Q12_offset+=PredCoef_Q12[PredCoef_Q12_i].length;
  }
  if (useLBRR != 0) {
    psEnc.NoiseShapingQuantizer(psEnc.sCmn,psEncCtrl.sCmn,psEnc.sNSQ_LBRR,x_16,q,psEncCtrl.sCmn.NLSFInterpCoef_Q2,PredCoef_Q12_dim1_tmp,LTPCoef_Q14,AR2_Q13,HarmShapeGain_Q14,Tilt_Q14,LF_shp_Q14,Gains_Q16,Lambda_Q10,LTP_scale_Q14);
  }
 else {
    psEnc.NoiseShapingQuantizer(psEnc.sCmn,psEncCtrl.sCmn,psEnc.sNSQ,x_16,q,psEncCtrl.sCmn.NLSFInterpCoef_Q2,PredCoef_Q12_dim1_tmp,LTPCoef_Q14,AR2_Q13,HarmShapeGain_Q14,Tilt_Q14,LF_shp_Q14,Gains_Q16,Lambda_Q10,LTP_scale_Q14);
  }
}
