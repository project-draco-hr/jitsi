{
  int seed;
  int i, idx, exc_mask;
  exc_mask=Silk_define.CNG_BUF_MASK_MAX;
  while (exc_mask > length) {
    exc_mask=(exc_mask >> 1);
  }
  seed=rand_seed[0];
  for (i=0; i < length; i++) {
    seed=Silk_SigProc_FIX.SKP_RAND(seed);
    idx=(int)((seed >> 24) & exc_mask);
    Silk_typedef.SKP_assert(idx >= 0);
    Silk_typedef.SKP_assert(idx <= Silk_define.CNG_BUF_MASK_MAX);
    residual[residual_offset + i]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(exc_buf_Q10[idx],Gain_Q16),10));
  }
  rand_seed[0]=seed;
}
