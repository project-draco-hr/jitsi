{
  File tmpFile=null;
  try {
    String arg=null;
    String args[]=null;
    final File temp=File.createTempFile("provisioning",".properties");
    tmpFile=temp;
    URL u=new URL(url);
    InetAddress ipaddr=ProvisioningActivator.getNetworkAddressManagerService().getLocalHost(InetAddress.getByName(u.getHost()));
    if (url.indexOf("${uuid}") != -1) {
      url=url.replace("${uuid}",(String)ProvisioningActivator.getConfigurationService().getProperty(PROVISIONING_UUID_PROP));
    }
    if (url.indexOf("${osname}") != -1) {
      url=url.replace("${osname}",System.getProperty("os.name"));
    }
    if (url.indexOf("${arch}") != -1) {
      url=url.replace("${arch}",System.getProperty("os.arch"));
    }
    if (url.indexOf("${resx}") != -1 || url.indexOf("${resy}") != -1) {
      Rectangle screen=ScreenInformation.getScreenBounds();
      if (url.indexOf("${resx}") != -1) {
        url=url.replace("${resx}",String.valueOf(screen.width));
      }
      if (url.indexOf("${resy}") != -1) {
        url=url.replace("${resy}",String.valueOf(screen.height));
      }
    }
    if (url.indexOf("${build}") != -1) {
      url=url.replace("${build}",System.getProperty("sip-communicator.version"));
    }
    if (url.indexOf("${ipaddr}") != -1) {
      url=url.replace("${ipaddr}",ipaddr.getHostAddress());
    }
    if (url.indexOf("${hwaddr}") != -1) {
      if (ipaddr != null) {
        Enumeration<NetworkInterface> en=NetworkInterface.getNetworkInterfaces();
        while (en.hasMoreElements()) {
          NetworkInterface iface=en.nextElement();
          Enumeration<InetAddress> enInet=iface.getInetAddresses();
          while (enInet.hasMoreElements()) {
            InetAddress inet=enInet.nextElement();
            if (inet.equals(ipaddr)) {
              byte hw[]=ProvisioningActivator.getNetworkAddressManagerService().getHardwareAddress(iface);
              if (hw == null)               continue;
              StringBuffer buf=new StringBuffer();
              for (              byte h : hw) {
                int hi=h >= 0 ? h : h + 256;
                String t=new String((hi <= 0xf) ? "0" : "");
                t+=Integer.toHexString(hi);
                buf.append(t);
                buf.append(":");
              }
              buf.deleteCharAt(buf.length() - 1);
              url=url.replace("${hwaddr}",buf.toString());
              break;
            }
          }
        }
      }
    }
    if (url.contains("?")) {
      if ((url.indexOf('?') + 1) != url.length()) {
        arg=url.substring(url.indexOf('?') + 1);
        args=arg.split("&");
      }
      url=url.substring(0,url.indexOf('?'));
    }
    String[] paramNames=null;
    String[] paramValues=null;
    int usernameIx=-1;
    int passwordIx=-1;
    if (args != null && args.length > 0) {
      paramNames=new String[args.length];
      paramValues=new String[args.length];
      for (int i=0; i < args.length; i++) {
        String s=args[i];
        String usernameParam="${username}";
        String passwordParam="${password}";
        if (s.indexOf(usernameParam) != -1) {
          s=s.replace(usernameParam,"");
          usernameIx=i;
        }
 else         if (s.indexOf(passwordParam) != -1) {
          s=s.replace(passwordParam,"");
          passwordIx=i;
        }
        int equalsIndex=s.indexOf("=");
        if (equalsIndex > 0) {
          paramNames[i]=s.substring(0,equalsIndex);
          paramValues[i]=s.substring(equalsIndex + 1);
        }
      }
    }
    HttpUtils.HTTPResponseResult res=HttpUtils.postForm(url,PROPERTY_PROVISIONING_USERNAME,PROPERTY_PROVISIONING_PASSWORD,paramNames,paramValues,usernameIx,passwordIx);
    if (res == null)     return null;
    String userPass[]=res.getCredentials();
    if (userPass[0] != null && userPass[1] != null) {
      provUsername=userPass[0];
      provPassword=userPass[1];
    }
    InputStream in=res.getContent();
    final ProgressMonitorInputStream pin=new ProgressMonitorInputStream(null,u.toString(),in);
    ProgressMonitor pm=pin.getProgressMonitor();
    pm.setMaximum((int)res.getContentLength());
    final BufferedOutputStream bout=new BufferedOutputStream(new FileOutputStream(temp));
    try {
      int read=-1;
      byte[] buff=new byte[1024];
      while ((read=pin.read(buff)) != -1) {
        bout.write(buff,0,read);
      }
      pin.close();
      bout.flush();
      bout.close();
      return temp;
    }
 catch (    Exception e) {
      logger.error("Error saving",e);
      try {
        pin.close();
        bout.close();
      }
 catch (      Exception e1) {
      }
      return null;
    }
  }
 catch (  Exception e) {
    if (logger.isInfoEnabled())     logger.info("Error retrieving provisioning file!",e);
    tmpFile.delete();
    return null;
  }
}
