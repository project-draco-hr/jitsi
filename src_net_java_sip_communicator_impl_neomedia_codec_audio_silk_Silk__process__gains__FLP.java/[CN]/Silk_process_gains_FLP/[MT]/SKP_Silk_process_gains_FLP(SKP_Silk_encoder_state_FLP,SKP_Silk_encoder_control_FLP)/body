{
  SKP_Silk_shape_state_FLP psShapeSt=psEnc.sShape;
  int k;
  int pGains_Q16[]=new int[Silk_define.NB_SUBFR];
  float s, InvMaxSqrVal, gain;
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    s=1.0f - 0.5f * Silk_SigProc_FLP.SKP_sigmoid(0.25f * (psEncCtrl.LTPredCodGain - 12.0f));
    for (k=0; k < Silk_define.NB_SUBFR; k++) {
      psEncCtrl.Gains[k]*=s;
    }
  }
  InvMaxSqrVal=(float)(Math.pow(2.0f,0.33f * (21.0f - psEncCtrl.current_SNR_dB)) / psEnc.sCmn.subfr_length);
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    gain=psEncCtrl.Gains[k];
    gain=(float)Math.sqrt(gain * gain + psEncCtrl.ResNrg[k] * InvMaxSqrVal);
    psEncCtrl.Gains[k]=(gain < 32767.0f ? gain : 32767.0f);
  }
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    pGains_Q16[k]=(int)(psEncCtrl.Gains[k] * 65536.0f);
  }
  int[] LastGainIndex_ptr=new int[1];
  LastGainIndex_ptr[0]=psShapeSt.LastGainIndex;
  Silk_gain_quant.SKP_Silk_gains_quant(psEncCtrl.sCmn.GainsIndices,pGains_Q16,LastGainIndex_ptr,psEnc.sCmn.nFramesInPayloadBuf);
  psShapeSt.LastGainIndex=LastGainIndex_ptr[0];
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    psEncCtrl.Gains[k]=pGains_Q16[k] / 65536.0f;
  }
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    if (psEncCtrl.LTPredCodGain + psEncCtrl.input_tilt > 1.0f) {
      psEncCtrl.sCmn.QuantOffsetType=0;
    }
 else {
      psEncCtrl.sCmn.QuantOffsetType=1;
    }
  }
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    psEncCtrl.Lambda=1.2f - 0.4f * psEnc.speech_activity - 0.3f * psEncCtrl.input_quality + 0.2f * psEncCtrl.sCmn.QuantOffsetType - 0.1f * psEncCtrl.coding_quality;
  }
 else {
    psEncCtrl.Lambda=1.2f - 0.4f * psEnc.speech_activity - 0.4f * psEncCtrl.input_quality + 0.4f * psEncCtrl.sCmn.QuantOffsetType - 0.1f * psEncCtrl.coding_quality;
  }
  assert(psEncCtrl.Lambda >= 0.0f);
  assert(psEncCtrl.Lambda < 2.0f);
}
