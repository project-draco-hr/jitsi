{
  if (event.getType() == ChangeEvent.IFACE_UP) {
    if (connectedInterfaces.isEmpty()) {
      onNetworkUp();
      Iterator<ProtocolProviderService> iter=needsReconnection.iterator();
      while (iter.hasNext()) {
        ProtocolProviderService pp=iter.next();
        if (currentlyReconnecting.containsKey(pp)) {
          currentlyReconnecting.remove(pp).cancel();
        }
        reconnect(pp);
      }
      needsReconnection.clear();
    }
    connectedInterfaces.add((String)event.getSource());
  }
 else   if (event.getType() == ChangeEvent.IFACE_DOWN) {
    String ifaceName=(String)event.getSource();
    connectedInterfaces.remove(ifaceName);
    if (connectedInterfaces.size() > 0) {
      Iterator<Map.Entry<ProtocolProviderService,List<String>>> iter=autoReconnEnabledProviders.entrySet().iterator();
      while (iter.hasNext()) {
        Map.Entry<ProtocolProviderService,List<String>> entry=iter.next();
        if (entry.getValue().contains(ifaceName)) {
          ProtocolProviderService pp=entry.getKey();
          if (currentlyReconnecting.containsKey(pp)) {
            currentlyReconnecting.remove(pp).cancel();
          }
          reconnect(pp);
        }
      }
    }
 else {
      needsReconnection.addAll(autoReconnEnabledProviders.keySet());
      needsReconnection.addAll(currentlyReconnecting.keySet());
      Iterator<ProtocolProviderService> iter=needsReconnection.iterator();
      while (iter.hasNext()) {
        ProtocolProviderService pp=iter.next();
        if (currentlyReconnecting.containsKey(pp)) {
          currentlyReconnecting.remove(pp).cancel();
        }
        unregister(pp,false,null,null);
      }
      connectedInterfaces.clear();
      onNetworkDown();
    }
  }
  if (logger.isTraceEnabled()) {
    logger.trace("Event received " + event + " src="+ event.getSource());
    traceCurrentPPState();
  }
}
