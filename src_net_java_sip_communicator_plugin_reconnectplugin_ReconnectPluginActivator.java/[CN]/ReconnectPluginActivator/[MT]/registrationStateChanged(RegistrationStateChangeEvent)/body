{
  if (!(evt.getSource() instanceof ProtocolProviderService) || !(evt.getNewState().equals(RegistrationState.REGISTERED) || evt.getNewState().equals(RegistrationState.UNREGISTERED) || evt.getNewState().equals(RegistrationState.CONNECTION_FAILED)))   return;
synchronized (this) {
    try {
      ProtocolProviderService pp=(ProtocolProviderService)evt.getSource();
      if (evt.getNewState().equals(RegistrationState.CONNECTION_FAILED)) {
        if (!hasAtLeastOneSuccessfulConnection(pp)) {
          if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID) {
            notify(getResources().getI18NString("service.gui.ERROR"),"service.gui.NON_EXISTING_USER_ID",new String[]{pp.getAccountID().getService()},pp.getAccountID());
          }
 else {
            notify(getResources().getI18NString("service.gui.ERROR"),"plugin.reconnectplugin.CONNECTION_FAILED_MSG",new String[]{pp.getAccountID().getUserID(),pp.getAccountID().getService()},pp.getAccountID());
          }
          return;
        }
        if (needsReconnection.contains(pp))         return;
        if (connectedInterfaces.isEmpty()) {
          needsReconnection.add(pp);
          if (currentlyReconnecting.containsKey(pp))           currentlyReconnecting.remove(pp).cancel();
        }
 else {
          reconnect(pp);
        }
        unregisteringProviders.remove(pp);
        if (logger.isTraceEnabled()) {
          logger.trace("Got Connection Failed for " + pp);
          traceCurrentPPState();
        }
      }
 else       if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
        if (!hasAtLeastOneSuccessfulConnection(pp)) {
          setAtLeastOneSuccessfulConnection(pp,true);
        }
        autoReconnEnabledProviders.put(pp,new ArrayList<String>(connectedInterfaces));
        if (currentlyReconnecting.containsKey(pp))         currentlyReconnecting.remove(pp).cancel();
        unregisteringProviders.remove(pp);
        if (logger.isTraceEnabled()) {
          logger.trace("Got Registered for " + pp);
          traceCurrentPPState();
        }
      }
 else       if (evt.getNewState().equals(RegistrationState.UNREGISTERED)) {
        if (evt.isUserRequest())         autoReconnEnabledProviders.remove(pp);
        if (!unregisteringProviders.contains(pp) && currentlyReconnecting.containsKey(pp)) {
          currentlyReconnecting.remove(pp).cancel();
        }
        unregisteringProviders.remove(pp);
        if (logger.isTraceEnabled()) {
          logger.trace("Got Unregistered for " + pp);
          if (!currentlyReconnecting.containsKey(pp) && !needsReconnection.contains(pp) && logger.isTraceEnabled()) {
            logger.trace("Provider is unregistered and will not " + "be reconnected (maybe on user request): " + pp + " / reason:"+ evt.getReason()+ " / reasonCode:"+ evt.getReasonCode()+ " / oldState:"+ evt.getOldState(),new Exception("Trace exception."));
          }
          traceCurrentPPState();
        }
      }
    }
 catch (    Throwable ex) {
      logger.error("Error dispatching protocol registration change",ex);
    }
  }
}
