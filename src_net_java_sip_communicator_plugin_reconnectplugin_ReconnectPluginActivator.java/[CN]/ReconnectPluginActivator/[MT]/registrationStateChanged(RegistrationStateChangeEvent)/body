{
  if (!(evt.getSource() instanceof ProtocolProviderService))   return;
  ProtocolProviderService pp=(ProtocolProviderService)evt.getSource();
  if (evt.getNewState().equals(RegistrationState.CONNECTION_FAILED)) {
    if (!hasAtLeastOneSuccessfulConnection(pp)) {
      String msgText=getResources().getI18NString("plugin.reconnectplugin.CONNECTION_FAILED_MSG",new String[]{pp.getAccountID().getUserID(),pp.getAccountID().getService()});
      getUIService().getPopupDialog().showMessagePopupDialog(msgText,getResources().getI18NString("service.gui.ERROR"),PopupDialog.ERROR_MESSAGE);
      return;
    }
    if (needsReconnection.contains(pp))     return;
    if (connectedInterfaces.size() == 0)     needsReconnection.add(pp);
 else {
      reconnect(pp);
    }
    unregisteredProviders.remove(pp);
  }
 else   if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    if (!hasAtLeastOneSuccessfulConnection(pp)) {
      setAtLeastOneSuccessfulConnection(pp,true);
    }
    autoReconnEnabledProviders.put(pp,new ArrayList<String>(connectedInterfaces));
    currentlyReconnecting.remove(pp);
  }
 else   if (evt.getNewState().equals(RegistrationState.UNREGISTERED)) {
    autoReconnEnabledProviders.remove(pp);
    if (!unregisteredProviders.contains(pp) && currentlyReconnecting.containsKey(pp)) {
      currentlyReconnecting.remove(pp).cancel();
    }
    unregisteredProviders.remove(pp);
  }
}
