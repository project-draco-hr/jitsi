{
  String namespace=parser.getNamespace();
  IQ iq;
  if (ColibriConferenceIQ.ELEMENT_NAME.equals(parser.getName()) && ColibriConferenceIQ.NAMESPACE.equals(namespace)) {
    ColibriConferenceIQ conference=new ColibriConferenceIQ();
    String conferenceID=parser.getAttributeValue("",ColibriConferenceIQ.ID_ATTR_NAME);
    if ((conferenceID != null) && (conferenceID.length() != 0))     conference.setID(conferenceID);
    boolean done=false;
    ColibriConferenceIQ.Channel channel=null;
    ColibriConferenceIQ.RTCPTerminationStrategy rtcpTerminationStrategy=null;
    ColibriConferenceIQ.SctpConnection sctpConnection=null;
    ColibriConferenceIQ.ChannelBundle bundle=null;
    ColibriConferenceIQ.Content content=null;
    ColibriConferenceIQ.Recording recording=null;
    ColibriConferenceIQ.Endpoint conferenceEndpoint=null;
    StringBuilder ssrc=null;
    SourcePacketExtension ssrcPe=null;
    while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
          String name=parser.getName();
          if (ColibriConferenceIQ.ELEMENT_NAME.equals(name)) {
            done=true;
          }
 else           if (ColibriConferenceIQ.Channel.ELEMENT_NAME.equals(name)) {
            content.addChannel(channel);
            channel=null;
          }
 else           if (ColibriConferenceIQ.SctpConnection.ELEMENT_NAME.equals(name)) {
            if (sctpConnection != null)             content.addSctpConnection(sctpConnection);
            sctpConnection=null;
          }
 else           if (ColibriConferenceIQ.ChannelBundle.ELEMENT_NAME.equals(name)) {
            if (bundle != null) {
              conference.addChannelBundle(bundle);
              bundle=null;
            }
          }
 else           if (ColibriConferenceIQ.Endpoint.ELEMENT_NAME.equals(name)) {
            conference.addEndpoint(conferenceEndpoint);
            conferenceEndpoint=null;
          }
 else           if (ColibriConferenceIQ.Channel.SSRC_ELEMENT_NAME.equals(name)) {
            String s=ssrc.toString().trim();
            if (s.length() != 0) {
              int i;
              if (s.startsWith("-"))               i=Integer.parseInt(s);
 else               i=(int)Long.parseLong(s);
              channel.addSSRC(i);
            }
            ssrc=null;
          }
 else           if (SourcePacketExtension.ELEMENT_NAME.equals(name)) {
            if (channel != null && ssrcPe != null) {
              channel.addSource(ssrcPe);
            }
            ssrcPe=null;
          }
 else           if (ColibriConferenceIQ.Content.ELEMENT_NAME.equals(name)) {
            conference.addContent(content);
            content=null;
          }
 else           if (ColibriConferenceIQ.RTCPTerminationStrategy.ELEMENT_NAME.equals(name)) {
            conference.setRTCPTerminationStrategy(rtcpTerminationStrategy);
            rtcpTerminationStrategy=null;
          }
 else           if (ColibriConferenceIQ.Recording.ELEMENT_NAME.equals(name)) {
            conference.setRecording(recording);
            recording=null;
          }
 else           if (ColibriConferenceIQ.GracefulShutdown.ELEMENT_NAME.equals(name)) {
            conference.setGracefulShutdown(true);
          }
          break;
        }
case XmlPullParser.START_TAG:
{
        String name=parser.getName();
        if (ColibriConferenceIQ.Channel.ELEMENT_NAME.equals(name)) {
          channel=new ColibriConferenceIQ.Channel();
          String direction=parser.getAttributeValue("",ColibriConferenceIQ.Channel.DIRECTION_ATTR_NAME);
          if ((direction != null) && (direction.length() != 0)) {
            channel.setDirection(MediaDirection.parseString(direction));
          }
          String endpoint=parser.getAttributeValue("",ColibriConferenceIQ.Channel.ENDPOINT_ATTR_NAME);
          if ((endpoint != null) && (endpoint.length() != 0))           channel.setEndpoint(endpoint);
          String channelBundleId=parser.getAttributeValue("",ColibriConferenceIQ.ChannelCommon.CHANNEL_BUNDLE_ID_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(channelBundleId))           channel.setChannelBundleId(channelBundleId);
          String expire=parser.getAttributeValue("",ColibriConferenceIQ.Channel.EXPIRE_ATTR_NAME);
          if ((expire != null) && (expire.length() != 0))           channel.setExpire(Integer.parseInt(expire));
          String host=parser.getAttributeValue("",ColibriConferenceIQ.Channel.HOST_ATTR_NAME);
          if ((host != null) && (host.length() != 0))           channel.setHost(host);
          String channelID=parser.getAttributeValue("",ColibriConferenceIQ.Channel.ID_ATTR_NAME);
          if ((channelID != null) && (channelID.length() != 0))           channel.setID(channelID);
          String initiator=parser.getAttributeValue("",ColibriConferenceIQ.Channel.INITIATOR_ATTR_NAME);
          if ((initiator != null) && (initiator.length() != 0))           channel.setInitiator(Boolean.valueOf(initiator));
          String lastN=parser.getAttributeValue("",ColibriConferenceIQ.Channel.LAST_N_ATTR_NAME);
          if ((lastN != null) && (lastN.length() != 0))           channel.setLastN(Integer.parseInt(lastN));
          String adaptiveLastN=parser.getAttributeValue("",ColibriConferenceIQ.Channel.ADAPTIVE_LAST_N_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(adaptiveLastN))           channel.setAdaptiveLastN(Boolean.parseBoolean(adaptiveLastN));
          String receivingSimulcastLayer=parser.getAttributeValue("",ColibriConferenceIQ.Channel.RECEIVING_SIMULCAST_LAYER);
          if ((receivingSimulcastLayer != null) && (receivingSimulcastLayer.length() != 0))           channel.setReceivingSimulcastLayer(Integer.parseInt(receivingSimulcastLayer));
          String rtcpPort=parser.getAttributeValue("",ColibriConferenceIQ.Channel.RTCP_PORT_ATTR_NAME);
          if ((rtcpPort != null) && (rtcpPort.length() != 0))           channel.setRTCPPort(Integer.parseInt(rtcpPort));
          String rtpLevelRelayType=parser.getAttributeValue("",ColibriConferenceIQ.Channel.RTP_LEVEL_RELAY_TYPE_ATTR_NAME);
          if ((rtpLevelRelayType != null) && (rtpLevelRelayType.length() != 0)) {
            channel.setRTPLevelRelayType(rtpLevelRelayType);
          }
          String rtpPort=parser.getAttributeValue("",ColibriConferenceIQ.Channel.RTP_PORT_ATTR_NAME);
          if ((rtpPort != null) && (rtpPort.length() != 0))           channel.setRTPPort(Integer.parseInt(rtpPort));
        }
 else         if (ColibriConferenceIQ.ChannelBundle.ELEMENT_NAME.equals(name)) {
          String bundleId=parser.getAttributeValue("",ColibriConferenceIQ.ChannelBundle.ID_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(bundleId)) {
            bundle=new ColibriConferenceIQ.ChannelBundle(bundleId);
          }
        }
 else         if (ColibriConferenceIQ.RTCPTerminationStrategy.ELEMENT_NAME.equals(name)) {
          rtcpTerminationStrategy=new ColibriConferenceIQ.RTCPTerminationStrategy();
          String strategyName=parser.getAttributeValue("",ColibriConferenceIQ.RTCPTerminationStrategy.NAME_ATTR_NAME);
          if ((strategyName != null) && (strategyName.length() != 0))           rtcpTerminationStrategy.setName(strategyName);
        }
 else         if (ColibriConferenceIQ.Channel.SSRC_ELEMENT_NAME.equals(name)) {
          ssrc=new StringBuilder();
        }
 else         if (SourcePacketExtension.ELEMENT_NAME.equals(name)) {
          ssrcPe=new SourcePacketExtension();
          String ssrcStr=parser.getAttributeValue("",SourcePacketExtension.SSRC_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(ssrcStr)) {
            ssrcPe.setSSRC(Long.parseLong(ssrcStr));
          }
        }
 else         if (ColibriConferenceIQ.Content.ELEMENT_NAME.equals(name)) {
          content=new ColibriConferenceIQ.Content();
          String contentName=parser.getAttributeValue("",ColibriConferenceIQ.Content.NAME_ATTR_NAME);
          if ((contentName != null) && (contentName.length() != 0))           content.setName(contentName);
        }
 else         if (ColibriConferenceIQ.Recording.ELEMENT_NAME.equals(name)) {
          String stateStr=parser.getAttributeValue("",ColibriConferenceIQ.Recording.STATE_ATTR_NAME);
          boolean state=Boolean.parseBoolean(stateStr);
          String token=parser.getAttributeValue("",ColibriConferenceIQ.Recording.TOKEN_ATTR_NAME);
          recording=new ColibriConferenceIQ.Recording(state,token);
        }
 else         if (ColibriConferenceIQ.SctpConnection.ELEMENT_NAME.equals(name)) {
          String endpoint=parser.getAttributeValue("",ColibriConferenceIQ.SctpConnection.ENDPOINT_ATTR_NAME);
          String connID=parser.getAttributeValue("",ColibriConferenceIQ.ChannelCommon.ID_ATTR_NAME);
          if (StringUtils.isNullOrEmpty(connID) && StringUtils.isNullOrEmpty(endpoint)) {
            sctpConnection=null;
            continue;
          }
          sctpConnection=new ColibriConferenceIQ.SctpConnection();
          if (!StringUtils.isNullOrEmpty(connID))           sctpConnection.setID(connID);
          if (!StringUtils.isNullOrEmpty(endpoint))           sctpConnection.setEndpoint(endpoint);
          String port=parser.getAttributeValue("",ColibriConferenceIQ.SctpConnection.PORT_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(port))           sctpConnection.setPort(Integer.parseInt(port));
          String channelBundleId=parser.getAttributeValue("",ColibriConferenceIQ.ChannelCommon.CHANNEL_BUNDLE_ID_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(channelBundleId))           sctpConnection.setChannelBundleId(channelBundleId);
          String initiator=parser.getAttributeValue("",ColibriConferenceIQ.SctpConnection.INITIATOR_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(initiator))           sctpConnection.setInitiator(Boolean.valueOf(initiator));
          String expire=parser.getAttributeValue("",ColibriConferenceIQ.SctpConnection.EXPIRE_ATTR_NAME);
          if (!StringUtils.isNullOrEmpty(expire))           sctpConnection.setExpire(Integer.parseInt(expire));
        }
 else         if (ColibriConferenceIQ.Endpoint.ELEMENT_NAME.equals(name)) {
          String id=parser.getAttributeValue("",ColibriConferenceIQ.Endpoint.ID_ATTR_NAME);
          String endpointName=parser.getAttributeValue("",ColibriConferenceIQ.Endpoint.DISPLAYNAME_ATTR_NAME);
          conferenceEndpoint=new ColibriConferenceIQ.Endpoint(id,endpointName);
        }
 else         if (channel != null || sctpConnection != null || bundle != null) {
          String peName=null;
          String peNamespace=null;
          if (IceUdpTransportPacketExtension.ELEMENT_NAME.equals(name) && IceUdpTransportPacketExtension.NAMESPACE.equals(parser.getNamespace())) {
            peName=name;
            peNamespace=IceUdpTransportPacketExtension.NAMESPACE;
          }
 else           if (PayloadTypePacketExtension.ELEMENT_NAME.equals(name)) {
            peName=name;
            peNamespace=namespace;
          }
 else           if (RtcpFbPacketExtension.ELEMENT_NAME.equals(name) && RtcpFbPacketExtension.NAMESPACE.equals(parser.getNamespace())) {
            peName=name;
            peNamespace=namespace;
          }
 else           if (RTPHdrExtPacketExtension.ELEMENT_NAME.equals(name)) {
            peName=name;
            peNamespace=namespace;
          }
 else           if (RawUdpTransportPacketExtension.ELEMENT_NAME.equals(name) && RawUdpTransportPacketExtension.NAMESPACE.equals(parser.getNamespace())) {
            peName=name;
            peNamespace=RawUdpTransportPacketExtension.NAMESPACE;
          }
 else           if (SourcePacketExtension.ELEMENT_NAME.equals(name) && SourcePacketExtension.NAMESPACE.equals(parser.getNamespace())) {
            peName=name;
            peNamespace=SourcePacketExtension.NAMESPACE;
          }
 else           if (SourceGroupPacketExtension.ELEMENT_NAME.equals(name) && SourceGroupPacketExtension.NAMESPACE.equals(parser.getNamespace())) {
            peName=name;
            peNamespace=SourceGroupPacketExtension.NAMESPACE;
          }
          if (peName == null) {
            throwAway(parser,name);
          }
 else {
            PacketExtension extension=parseExtension(parser,peName,peNamespace);
            if (extension != null) {
              if (channel != null)               addChildExtension(channel,extension);
 else               if (sctpConnection != null)               addChildExtension(sctpConnection,extension);
 else               addChildExtension(bundle,extension);
            }
          }
        }
        break;
      }
case XmlPullParser.TEXT:
{
      if (ssrc != null)       ssrc.append(parser.getText());
      break;
    }
}
}
iq=conference;
}
 else if (GracefulShutdownIQ.ELEMENT_NAME.equals(parser.getName()) && GracefulShutdownIQ.NAMESPACE.equals(namespace)) {
String rootElement=parser.getName();
iq=new GracefulShutdownIQ();
boolean done=false;
while (!done) {
switch (parser.next()) {
case XmlPullParser.END_TAG:
{
    String name=parser.getName();
    if (rootElement.equals(name)) {
      done=true;
    }
    break;
  }
case XmlPullParser.TEXT:
{
  break;
}
}
}
}
 else if (ColibriStatsIQ.ELEMENT_NAME.equals(parser.getName()) && ColibriStatsIQ.NAMESPACE.equals(namespace)) {
String rootElement=parser.getName();
ColibriStatsIQ statsIQ=new ColibriStatsIQ();
iq=statsIQ;
ColibriStatsExtension.Stat stat=null;
boolean done=false;
while (!done) {
switch (parser.next()) {
case XmlPullParser.START_TAG:
{
String name=parser.getName();
if (ColibriStatsExtension.Stat.ELEMENT_NAME.equals(name)) {
  stat=new ColibriStatsExtension.Stat();
  String statName=parser.getAttributeValue("",ColibriStatsExtension.Stat.NAME_ATTR_NAME);
  stat.setName(statName);
  String statValue=parser.getAttributeValue("",ColibriStatsExtension.Stat.VALUE_ATTR_NAME);
  stat.setValue(statValue);
}
break;
}
case XmlPullParser.END_TAG:
{
String name=parser.getName();
if (rootElement.equals(name)) {
done=true;
}
 else if (ColibriStatsExtension.Stat.ELEMENT_NAME.equals(name)) {
if (stat != null) {
  statsIQ.addStat(stat);
  stat=null;
}
}
break;
}
case XmlPullParser.TEXT:
{
break;
}
}
}
}
 else iq=null;
return iq;
}
