{
  ServiceReference[] serRefs=null;
  String osgiFilter="(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.MSN+ ")";
  try {
    serRefs=MsnSlickFixture.bc.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException ex) {
    fail(osgiFilter + " is not a valid osgi filter");
  }
  assertTrue("Failed to find a provider factory service for protocol Msn",serRefs != null && serRefs.length > 0);
  ProtocolProviderFactory msnProviderFactory=(ProtocolProviderFactory)MsnSlickFixture.bc.getService(serRefs[0]);
  assertTrue("There was an account registered with the account mananger " + "before we've installed any",msnProviderFactory.getRegisteredAccounts().size() == 0);
  Hashtable<String,String> msnAccount1Properties=getAccountProperties(MsnProtocolProviderServiceLick.ACCOUNT_1_PREFIX);
  Hashtable<String,String> msnAccount2Properties=getAccountProperties(MsnProtocolProviderServiceLick.ACCOUNT_2_PREFIX);
  Hashtable<String,String> msnAccount3Properties=getAccountProperties(MsnProtocolProviderServiceLick.ACCOUNT_3_PREFIX);
  try {
    msnProviderFactory.installAccount(null,msnAccount1Properties);
    fail("installing an account with a null account id must result " + "in a NullPointerException");
  }
 catch (  NullPointerException exc) {
  }
  msnProviderFactory.installAccount(msnAccount1Properties.get(ProtocolProviderFactory.USER_ID),msnAccount1Properties);
  msnProviderFactory.installAccount(msnAccount2Properties.get(ProtocolProviderFactory.USER_ID),msnAccount2Properties);
  msnProviderFactory.installAccount(msnAccount3Properties.get(ProtocolProviderFactory.USER_ID),msnAccount3Properties);
  try {
    msnProviderFactory.installAccount(msnAccount1Properties.get(ProtocolProviderFactory.USER_ID),msnAccount1Properties);
    fail("An IllegalStateException must be thrown when trying to " + "install a duplicate account");
  }
 catch (  IllegalStateException exc) {
  }
  assertTrue("The newly installed account was not in the acc man's " + "registered accounts!",msnProviderFactory.getRegisteredAccounts().size() == 3);
  osgiFilter="(&(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.MSN+ ")"+ "("+ ProtocolProviderFactory.USER_ID+ "="+ msnAccount1Properties.get(ProtocolProviderFactory.USER_ID)+ "))";
  try {
    serRefs=MsnSlickFixture.bc.getServiceReferences(ProtocolProviderService.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException ex) {
    fail(osgiFilter + "is not a valid osgi filter");
  }
  assertTrue("An protocol provider was apparently not installed as " + "requested.",serRefs != null && serRefs.length > 0);
  Object msnProtocolProvider=MsnSlickFixture.bc.getService(serRefs[0]);
  assertTrue("The installed protocol provider does not implement " + "the protocol provider service.",msnProtocolProvider instanceof ProtocolProviderService);
}
