{
  SwingWorker worker=new SwingWorker(){
    /** 
 * Called on the event dispatching thread (not on the worker thread)
 * after the <code>construct</code> method has returned.
 */
    @Override public void finished(){
      String newMessage=(String)get();
      if (newMessage != null && !newMessage.equals(chatString)) {
        showPreview.getMsgIDToChatString().put(messageID,newMessage);
synchronized (scrollToBottomRunnable) {
          scrollToBottomIsPending=true;
          try {
            Element elem=document.getElement(messageID);
            document.setOuterHTML(elem,newMessage);
          }
 catch (          BadLocationException ex) {
            logger.error("Could not replace chat message",ex);
          }
catch (          IOException ex) {
            logger.error("Could not replace chat message",ex);
          }
        }
      }
    }
    @Override public Object construct() throws Exception {
      ConfigurationService cfg=GuiActivator.getConfigurationService();
      boolean isEnabled=cfg.getBoolean(ReplacementProperty.REPLACEMENT_ENABLE,true);
      boolean isProposalEnabled=cfg.getBoolean(ReplacementProperty.REPLACEMENT_PROPOSAL,true);
      Matcher divMatcher=DIV_PATTERN.matcher(chatString);
      String openingTag="";
      String msgStore=chatString;
      String closingTag="";
      if (divMatcher.find()) {
        openingTag=divMatcher.group(1);
        msgStore=divMatcher.group(2);
        closingTag=divMatcher.group(3);
      }
      int linkCounter=0;
      for (      Map.Entry<String,ReplacementService> entry : GuiActivator.getReplacementSources().entrySet()) {
        ReplacementService source=entry.getValue();
        boolean isSmiley=source instanceof SmiliesReplacementService;
        boolean isDirectImage=source instanceof DirectImageReplacementService;
        boolean isEnabledForSource=cfg.getBoolean(ReplacementProperty.getPropertyName(source.getSourceName()),true);
        String sourcePattern=source.getPattern();
        Pattern p=Pattern.compile(sourcePattern,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Matcher m=p.matcher(msgStore);
        StringBuilder msgBuff=new StringBuilder();
        int startPos=0;
        while (m.find()) {
          msgBuff.append(msgStore.substring(startPos,m.start()));
          startPos=m.end();
          String group=m.group();
          String temp=source.getReplacement(group);
          String group0=m.group(0);
          if (!temp.equals(group0) || isDirectImage) {
            if (isSmiley) {
              if (cfg.getBoolean(ReplacementProperty.getPropertyName("SMILEY"),true)) {
                msgBuff.append(ChatHtmlUtils.createEndPlainTextTag(contentType));
                msgBuff.append("<IMG SRC=\"");
                msgBuff.append(temp);
                msgBuff.append("\" BORDER=\"0\" ALT=\"");
                msgBuff.append(group0);
                msgBuff.append("\"></IMG>");
                msgBuff.append(ChatHtmlUtils.createStartPlainTextTag(contentType));
              }
 else {
                msgBuff.append(group);
              }
            }
 else             if (isEnabled && isEnabledForSource) {
              if (isDirectImage) {
                DirectImageReplacementService service=(DirectImageReplacementService)source;
                if (service.isDirectImage(group) && service.getImageSize(group) != -1) {
                  msgBuff.append("<IMG HEIGHT=\"90\" " + "WIDTH=\"120\" SRC=\"");
                  msgBuff.append(temp);
                  msgBuff.append("\" BORDER=\"0\" ALT=\"");
                  msgBuff.append(group0);
                  msgBuff.append("\"></IMG>");
                }
 else {
                  msgBuff.append(group);
                }
              }
 else {
                msgBuff.append("<IMG HEIGHT=\"90\" " + "WIDTH=\"120\" SRC=\"");
                msgBuff.append(temp);
                msgBuff.append("\" BORDER=\"0\" ALT=\"");
                msgBuff.append(group0);
                msgBuff.append("\"></IMG>");
              }
            }
 else             if (isProposalEnabled) {
              msgBuff.append(group);
              msgBuff.append("</A> <A href=\"jitsi://" + showPreview.getClass().getName() + "/SHOWPREVIEW?"+ messageID+ "#"+ linkCounter+ "\">"+ GuiActivator.getResources().getI18NString("service.gui.SHOW_PREVIEW"));
              showPreview.getMsgIDandPositionToLink().put(messageID + "#" + linkCounter++,group);
              showPreview.getLinkToReplacement().put(group,temp);
            }
 else {
              msgBuff.append(group);
            }
          }
 else {
            msgBuff.append(group);
          }
        }
        msgBuff.append(msgStore.substring(startPos));
        String msgBuffString=msgBuff.toString();
        if (!msgBuffString.equals(msgStore))         msgStore=msgBuffString;
      }
      return openingTag + msgStore + closingTag;
    }
  }
;
  worker.start();
}
