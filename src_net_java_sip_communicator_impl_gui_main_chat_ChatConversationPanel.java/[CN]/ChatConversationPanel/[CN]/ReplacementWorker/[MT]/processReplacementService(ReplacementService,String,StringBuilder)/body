{
  String sourcePattern=service.getPattern();
  Pattern pattern=Pattern.compile(sourcePattern,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
  int startPos=0;
  Matcher plainTextInHtmlMatcher=TEXT_TO_REPLACE_PATTERN.matcher(msg);
  while (plainTextInHtmlMatcher.find()) {
    String plainTextAsHtml=plainTextInHtmlMatcher.group(1);
    int startMatchPosition=plainTextInHtmlMatcher.start(1);
    int endMatchPosition=plainTextInHtmlMatcher.end(1);
    if (!StringUtils.isNullOrEmpty(plainTextAsHtml)) {
      buff.append(msg.substring(startPos,startMatchPosition));
      final String plaintext=StringEscapeUtils.unescapeHtml4(plainTextAsHtml);
      processText(plaintext,buff,pattern,service);
      startPos=endMatchPosition;
    }
  }
  buff.append(msg.substring(startPos));
}
