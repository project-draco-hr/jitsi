{
  if (S.magic_number != 123456789) {
    assert(false);
    return -1;
  }
  if (Silk_resampler_structs.RESAMPLER_SUPPORT_ABOVE_48KHZ != 0) {
    if (S.nPreDownsamplers + S.nPostUpsamplers > 0) {
      int nSamplesIn, nSamplesOut;
      short[] in_buf=new short[480];
      short[] out_buf=new short[480];
      while (inLen > 0) {
        nSamplesIn=Silk_SigProc_FIX.SKP_min(inLen,S.batchSizePrePost);
        nSamplesOut=Silk_macros.SKP_SMULWB(S.ratio_Q16,nSamplesIn);
        Silk_typedef.SKP_assert((nSamplesIn >> S.nPreDownsamplers) <= 480);
        Silk_typedef.SKP_assert((nSamplesOut >> S.nPostUpsamplers) <= 480);
        if (S.nPreDownsamplers > 0) {
          S.down_pre_function(S.sDownPre,in_buf,0,in,in_offset,nSamplesIn);
          if (S.nPostUpsamplers > 0) {
            S.resampler_function(S,out_buf,0,in_buf,0,(nSamplesIn >> S.nPreDownsamplers));
            S.up_post_function(S.sUpPost,out,out_offset,out_buf,0,(nSamplesOut >> S.nPostUpsamplers));
          }
 else {
            S.resampler_function(S,out,out_offset,in_buf,0,(nSamplesIn >> S.nPreDownsamplers));
          }
        }
 else {
          S.resampler_function(S,out_buf,0,in,in_offset,(nSamplesIn >> S.nPreDownsamplers));
          S.up_post_function(S.sUpPost,out,out_offset,out_buf,0,(nSamplesOut >> S.nPostUpsamplers));
        }
        in_offset+=nSamplesIn;
        out_offset+=nSamplesOut;
        inLen-=nSamplesIn;
      }
    }
 else {
      S.resampler_function(S,out,out_offset,in,in_offset,inLen);
    }
  }
 else {
    S.resampler_function(S,out,out_offset,in,in_offset,inLen);
  }
  return 0;
}
