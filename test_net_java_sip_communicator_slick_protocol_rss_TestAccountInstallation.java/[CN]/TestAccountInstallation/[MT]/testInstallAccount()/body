{
  Hashtable accountProperties=new Hashtable();
  ServiceReference[] serRefs=null;
  String osgiFilter="(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.RSS+ ")";
  accountProperties.put(ProtocolProviderFactory.USER_ID,"RSS");
  try {
    serRefs=RssSlickFixture.bc.getServiceReferences(ProtocolProviderFactory.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException ise) {
    fail(osgiFilter + "is not a valid filter");
  }
  assertTrue("Failed to find a provider factory service or protocol RSS",serRefs != null && serRefs.length > 0);
  ProtocolProviderFactory rssProviderFactory=(ProtocolProviderFactory)RssSlickFixture.bc.getService(serRefs[0]);
  assertTrue("There was an account already registered with the account " + "manager",rssProviderFactory.getRegisteredAccounts().size() == 0);
  try {
    rssProviderFactory.installAccount(null,accountProperties);
    fail("Installing an account with a null account id must result in a" + " NullPointerException!");
  }
 catch (  NullPointerException npe) {
  }
  rssProviderFactory.installAccount("RSS",accountProperties);
  try {
    rssProviderFactory.installAccount("RSS",accountProperties);
    fail("An IllegalStateException must be thrown when trying to " + "install a duplicate account.");
  }
 catch (  IllegalStateException ise) {
  }
  assertTrue("Newly installed account is not in the account manager's " + "registered accounts!",rssProviderFactory.getRegisteredAccounts().size() == 1);
  osgiFilter="(&(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.RSS+ ")"+ "("+ ProtocolProviderFactory.USER_ID+ "=RSS))";
  try {
    serRefs=RssSlickFixture.bc.getServiceReferences(ProtocolProviderService.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException ise) {
    fail(osgiFilter + " is not a valid filter");
  }
  assertTrue("A protocol provider was apparently not installed as" + " requested",serRefs != null && serRefs.length > 0);
  Object rssProtocolProvider=RssSlickFixture.bc.getService(serRefs[0]);
  assertTrue("The installed protocol provider does not implement the" + "protocol provider service.",rssProtocolProvider instanceof ProtocolProviderService);
}
