{
  MediaLocator rendererLocator=audioNotifier.getDeviceConfiguration().getAudioNotifyDevice().getLocator();
  if (rendererLocator == null)   return false;
  renderer.setLocator(rendererLocator);
  AudioInputStream audioStream=null;
  try {
    audioStream=AudioSystem.getAudioInputStream(url);
  }
 catch (  IOException ioex) {
    logger.error("Failed to get audio stream " + url,ioex);
  }
catch (  UnsupportedAudioFileException uafex) {
    logger.error("Unsupported format of audio stream " + url,uafex);
  }
  if (audioStream == null)   return false;
  Codec resampler=null;
  try {
    AudioFormat audioStreamFormat=audioStream.getFormat();
    Format rendererFormat=new javax.media.format.AudioFormat(javax.media.format.AudioFormat.LINEAR,audioStreamFormat.getSampleRate(),audioStreamFormat.getSampleSizeInBits(),audioStreamFormat.getChannels());
    Format resamplerFormat=null;
    if (renderer.setInputFormat(rendererFormat) == null) {
      resampler=new SpeexResampler();
      resamplerFormat=rendererFormat;
      resampler.setInputFormat(resamplerFormat);
      Format[] supportedResamplerFormats=resampler.getSupportedOutputFormats(resamplerFormat);
      for (      Format supportedRendererFormat : renderer.getSupportedInputFormats()) {
        for (        Format supportedResamplerFormat : supportedResamplerFormats) {
          if (supportedRendererFormat.matches(supportedResamplerFormat)) {
            rendererFormat=supportedRendererFormat;
            resampler.setOutputFormat(rendererFormat);
            renderer.setInputFormat(rendererFormat);
            break;
          }
        }
      }
    }
    Buffer rendererBuffer=buffer;
    Buffer resamplerBuffer;
    rendererBuffer.setFormat(rendererFormat);
    if (resampler == null)     resamplerBuffer=null;
 else {
      resamplerBuffer=new Buffer();
      bufferData=new byte[bufferData.length];
      resamplerBuffer.setData(bufferData);
      resamplerBuffer.setFormat(resamplerFormat);
      resampler.open();
    }
    try {
      renderer.open();
      renderer.start();
      int bufferLength;
      while (started && ((bufferLength=audioStream.read(bufferData)) != -1)) {
        if (resampler == null) {
          rendererBuffer.setLength(bufferLength);
          rendererBuffer.setOffset(0);
        }
 else {
          resamplerBuffer.setLength(bufferLength);
          resamplerBuffer.setOffset(0);
          rendererBuffer.setLength(0);
          rendererBuffer.setOffset(0);
          resampler.process(resamplerBuffer,rendererBuffer);
        }
        while ((renderer.process(rendererBuffer) & Renderer.INPUT_BUFFER_NOT_CONSUMED) == Renderer.INPUT_BUFFER_NOT_CONSUMED)         ;
      }
    }
 catch (    IOException ioex) {
      logger.error("Failed to read from audio stream " + url,ioex);
      return false;
    }
catch (    ResourceUnavailableException ruex) {
      logger.error("Failed to open PortAudioRenderer.",ruex);
      return false;
    }
  }
 catch (  ResourceUnavailableException ruex) {
    if (resampler != null) {
      logger.error("Failed to open SpeexResampler.",ruex);
      return false;
    }
  }
 finally {
    try {
      audioStream.close();
    }
 catch (    IOException ioex) {
    }
    if (resampler != null)     resampler.close();
  }
  return true;
}
