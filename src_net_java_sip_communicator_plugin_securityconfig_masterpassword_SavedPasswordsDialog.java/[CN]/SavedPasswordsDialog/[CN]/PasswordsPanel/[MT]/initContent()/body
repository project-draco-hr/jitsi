{
  PasswordsTableModel model=(PasswordsTableModel)accountsTable.getModel();
  for (  Map.Entry<AccountID,String> entry : SecurityConfigActivator.getAccountIDsWithSavedPasswords().entrySet()) {
    AccountID accID=entry.getKey();
    String protocol=accID.getAccountPropertyString(ProtocolProviderFactory.PROTOCOL);
    if (protocol == null)     protocol=resources.getI18NString("plugin.securityconfig.masterpassword.PROTOCOL_UNKNOWN");
    model.savedPasswords.add(new PasswordsTableRow(entry.getValue(),protocol,accID.getUserID()));
  }
  for (  Map.Entry<String,String> entry : SecurityConfigActivator.getChatRoomsWithSavedPasswords().entrySet()) {
    String description=entry.getKey();
    model.savedPasswords.add(new PasswordsTableRow(entry.getValue(),resources.getI18NString("service.gui.CHAT_ROOM"),description));
  }
  String PROVISIONING_PROPERTIES_PREFIX="net.java.sip.communicator.plugin.provisioning.auth";
  ConfigurationService configurationService=SecurityConfigActivator.getConfigurationService();
  String uname=configurationService.getString(PROVISIONING_PROPERTIES_PREFIX + ".USERNAME");
  if (uname != null && uname.length() > 0)   model.savedPasswords.add(new PasswordsTableRow(PROVISIONING_PROPERTIES_PREFIX,resources.getI18NString("plugin.provisioning.PROVISIONING"),uname));
  String HTTP_PROPERTIES_PREFIX="net.java.sip.communicator.util.http.credential";
  List<String> httpPasses=configurationService.getPropertyNamesByPrefix(HTTP_PROPERTIES_PREFIX,false);
  int prefLen=HTTP_PROPERTIES_PREFIX.length() + 1;
  for (  String prop : httpPasses) {
    if (prop.contains("PASSWORD") || prefLen > prop.length())     continue;
    model.savedPasswords.add(new PasswordsTableRow(prop,"http://" + prop.substring(prefLen),configurationService.getString(prop)));
  }
}
