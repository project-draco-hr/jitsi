{
  String newContactID="testCreateMoveRemoveMetaContact.ContactID";
  MetaContactGroup parentMetaGroup=fixture.metaClService.getRoot().getMetaContactSubgroup(MetaContactListServiceLick.topLevelGroupName);
  MclEventCollector evtCollector=new MclEventCollector();
  fixture.metaClService.addMetaContactListListener(evtCollector);
  fixture.metaClService.createMetaContact(MclSlickFixture.mockProvider,parentMetaGroup,newContactID);
  fixture.metaClService.removeMetaContactListListener(evtCollector);
  MetaContact newMetaContact=parentMetaGroup.getMetaContact(MclSlickFixture.mockProvider,newContactID);
  assertNotNull("create failed. couldn't find the new contact.",newMetaContact);
  assertEquals("create() created a meta contact with the wrong name.",newContactID,newMetaContact.getDisplayName());
  assertEquals("Events delivered while creating a new meta contact",1,evtCollector.collectedMetaContactEvents.size());
  MetaContactEvent event=(MetaContactEvent)evtCollector.collectedMetaContactEvents.remove(0);
  assertSame("Source contact in MetaContactEvent gen. upon create.",newMetaContact,event.getSourceMetaContact());
  assertEquals("Event ID in MetaContactEvent gen. upon create.",MetaContactEvent.META_CONTACT_ADDED,event.getEventID());
  fixture.metaClService.addMetaContactListListener(evtCollector);
  fixture.metaClService.moveMetaContact(newMetaContact,fixture.metaClService.getRoot());
  fixture.metaClService.removeMetaContactListListener(evtCollector);
  assertNull(newMetaContact.getDisplayName() + " was still in its old location after moving it.",parentMetaGroup.getMetaContact(newMetaContact.getMetaUID()));
  assertNotNull(newMetaContact.getDisplayName() + " was not in the new location after moving it.",fixture.metaClService.getRoot().getMetaContact(newMetaContact.getMetaUID()));
  assertNull("The mock contact corresponding to: " + newMetaContact.getDisplayName() + " was still in its old location after its "+ "encapsulating meta contact was moved",MetaContactListServiceLick.topLevelMockGroup.getContact(newContactID));
  assertNotNull("The mock contact corresponding to: " + newMetaContact.getDisplayName() + " was not moved to its new location after its "+ "encapsulating meta contact was.",MclSlickFixture.mockPresOpSet.getServerStoredContactListRoot().getContact(newContactID));
  assertEquals("Events delivered while moving a meta contact",1,evtCollector.collectedMetaContactEvents.size());
  MetaContactMovedEvent movedEvent=(MetaContactMovedEvent)evtCollector.collectedMetaContactEvents.remove(0);
  assertSame("Source contact in MetaContactEvent gen. upon move.",newMetaContact,movedEvent.getSourceMetaContact());
  assertEquals("Event Property Name in MetaContactEvent gen. upon move.",MetaContactPropertyChangeEvent.META_CONTACT_MOVED,movedEvent.getPropertyName());
  assertEquals("Old Parent in MetaContactEvent gen. upon move.",parentMetaGroup,movedEvent.getOldParent());
  assertEquals("Old Parent in MetaContactEvent gen. upon move.",fixture.metaClService.getRoot(),movedEvent.getNewParent());
  fixture.metaClService.addMetaContactListListener(evtCollector);
  fixture.metaClService.removeMetaContact(newMetaContact);
  fixture.metaClService.removeMetaContactListListener(evtCollector);
  assertNull(newMetaContact.getDisplayName() + " was still in its old location after it was removed.",fixture.metaClService.getRoot().getMetaContact(newMetaContact.getMetaUID()));
  assertNull("The mock contact corresponding to: " + newMetaContact.getDisplayName() + " was not removed after its encapsulating meta contact was.",MclSlickFixture.mockPresOpSet.getServerStoredContactListRoot().getContact(newContactID));
  assertEquals("Events delivered while removing a meta contact",1,evtCollector.collectedMetaContactEvents.size());
  event=(MetaContactEvent)evtCollector.collectedMetaContactEvents.remove(0);
  assertSame("Source contact in MetaContactEvent gen. upon remove.",newMetaContact,event.getSourceMetaContact());
  assertEquals("Event ID in MetaContactEvent gen. upon remove.",MetaContactEvent.META_CONTACT_REMOVED,event.getEventID());
}
