{
  String newGroupName="testGroupChangeEventHandling.NewContactGroup";
  String newInnerGroupName="testGroupChangeEventHandling.NewInnderContactGroup";
  MclEventCollector mclEvtCollector=new MclEventCollector();
  MockContactGroup newContactGroup=new MockContactGroup(newGroupName,fixture.mockProvider);
  MockContactGroup newInnerContactGroup=new MockContactGroup(newGroupName,fixture.mockProvider);
  newContactGroup.addSubGroup(newInnerContactGroup);
  fixture.metaClService.addContactListListener(mclEvtCollector);
  ((MockPersistentPresenceOperationSet)opSetPersPresence).addMockGroupAndFireEvent((MockContactGroup)opSetPersPresence.getServerStoredContactListRoot(),newContactGroup);
  fixture.metaClService.removeContactListListener(mclEvtCollector);
  assertEquals("Number of evts dispatched while adding a contact group",1,mclEvtCollector.collectedMetaContactGroupEvents.size());
  MetaContactGroupEvent evt=(MetaContactGroupEvent)mclEvtCollector.collectedMetaContactGroupEvents.remove(0);
  assertEquals("ID of the generated event",MetaContactGroupEvent.META_CONTACT_GROUP_ADDED,evt.getEventID());
  assertEquals("Name of the source group of the AddEvent.",newContactGroup.getGroupName(),evt.getSourceMetaContactGroup().getGroupName());
  MetaContactGroup newMetaGroup=evt.getSourceMetaContactGroup();
  assertSame("Contact group in the newly added meta group.",newContactGroup,newMetaGroup.getContactGroup(newContactGroup.getGroupName(),fixture.mockProvider));
  assertEquals("Subgroups were not imported in the MetaContactList.",newContactGroup.countSubgroups(),evt.getSourceMetaContactGroup().countSubgroups());
  assertEquals("Source provider for the add event.",fixture.mockProvider,evt.getSourceProvider());
  ContactGroup newProtoGroup=newMetaGroup.getContactGroup(newGroupName,fixture.mockProvider);
  assertNotNull("The new meta contact group did not contain a proto group",newProtoGroup);
  assertEquals("The new meta contact group did not seem to contain " + "the right protocol contact group.",newProtoGroup.getGroupName(),newGroupName);
  assertEquals("The new meta contact group did not seem to contain " + "the right protocol contact group.",newProtoGroup.getProtocolProvider(),fixture.mockProvider);
  fixture.metaClService.addContactListListener(mclEvtCollector);
  opSetPersPresence.renameServerStoredContactGroup(newProtoGroup,renamedGroupName);
  fixture.metaClService.removeContactListListener(mclEvtCollector);
  assertEquals("Number of evts dispatched while renaming a contact group",1,mclEvtCollector.collectedMetaContactGroupEvents.size());
  evt=(MetaContactGroupEvent)mclEvtCollector.collectedMetaContactGroupEvents.remove(0);
  assertEquals("ID of the generated event",MetaContactGroupEvent.CONTACT_GROUP_RENAMED_IN_META_GROUP,evt.getEventID());
  assertEquals("Source group for the RemoveEvent.",newMetaGroup,evt.getSourceMetaContactGroup());
  assertEquals("Source provider for the remove event.",fixture.mockProvider,evt.getSourceProvider());
  Iterator groupsIter=evt.getSourceMetaContactGroup().getContactGroupsForProvider(fixture.mockProvider);
  assertTrue("A proto group was unexplicably removed after renaming.",groupsIter.hasNext());
  assertEquals("The name of a protocol group after renaming.",renamedGroupName,((MockContactGroup)groupsIter.next()).getGroupName());
  fixture.metaClService.addContactListListener(mclEvtCollector);
  opSetPersPresence.removeServerStoredContactGroup(newProtoGroup);
  fixture.metaClService.removeContactListListener(mclEvtCollector);
  assertEquals("Number of evts dispatched while removing a contact group",1,mclEvtCollector.collectedMetaContactGroupEvents.size());
  evt=(MetaContactGroupEvent)mclEvtCollector.collectedMetaContactGroupEvents.remove(0);
  assertEquals("ID of the generated event",MetaContactGroupEvent.CONTACT_GROUP_REMOVED_FROM_META_GROUP,evt.getEventID());
  assertEquals("Source group for the RemoveEvent.",newMetaGroup,evt.getSourceMetaContactGroup());
  assertEquals("Source provider for the remove event.",fixture.mockProvider,evt.getSourceProvider());
}
