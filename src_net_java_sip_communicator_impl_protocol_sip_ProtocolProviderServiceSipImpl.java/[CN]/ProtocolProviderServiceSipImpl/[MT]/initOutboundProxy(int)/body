{
  String proxyAddressStr=accountID.getAccountPropertyString(ProtocolProviderFactory.PROXY_ADDRESS);
  boolean proxyAddressAndPortEntered=false;
  if (proxyAddressStr == null || proxyAddressStr.trim().length() == 0 || accountID.getAccountPropertyBoolean(ProtocolProviderFactory.PROXY_AUTO_CONFIG,false)) {
    String userID=accountID.getAccountPropertyString(ProtocolProviderFactory.USER_ID);
    int domainIx=userID.indexOf("@");
    if (domainIx > 0) {
      proxyAddressStr=userID.substring(domainIx + 1);
    }
 else {
      proxyAddressStr=accountID.getAccountPropertyString(ProtocolProviderFactory.SERVER_ADDRESS);
      if (proxyAddressStr == null || proxyAddressStr.trim().length() == 0) {
        return;
      }
    }
  }
 else {
    if (accountID.getAccountProperty(ProtocolProviderFactory.PROXY_PORT) != null) {
      proxyAddressAndPortEntered=true;
    }
  }
  int proxyPort=ListeningPoint.PORT_5060;
  String proxyTransport=accountID.getAccountPropertyString(ProtocolProviderFactory.PREFERRED_TRANSPORT);
  if (proxyTransport != null && proxyTransport.length() > 0) {
    if (!proxyTransport.equals(ListeningPoint.UDP) && !proxyTransport.equals(ListeningPoint.TCP) && !proxyTransport.equals(ListeningPoint.TLS)) {
      throw new IllegalArgumentException(proxyTransport + " is not a valid transport protocol. Transport must be " + "left blank or set to TCP, UDP or TLS.");
    }
  }
 else {
    proxyTransport=getDefaultTransport();
  }
  InetSocketAddress proxySocketAddress=null;
  try {
    proxyPort=accountID.getAccountPropertyInt(ProtocolProviderFactory.PROXY_PORT,proxyPort);
    if (proxyPort > NetworkUtils.MAX_PORT_NUMBER) {
      throw new IllegalArgumentException(proxyPort + " is larger than " + NetworkUtils.MAX_PORT_NUMBER+ " and does not therefore represent a valid port number.");
    }
    if (accountID.getAccountPropertyBoolean(ProtocolProviderFactory.PROXY_AUTO_CONFIG,false)) {
      if (connectionAddresses == null) {
        ArrayList<InetSocketAddress> proxySocketAddressesList=new ArrayList<InetSocketAddress>();
        ArrayList<String> proxyTransportsList=new ArrayList<String>();
        resolveSipAddress(proxyAddressStr,proxyTransport,proxySocketAddressesList,proxyTransportsList,true);
        connectionTransports=proxyTransportsList.toArray(new String[proxyTransportsList.size()]);
        connectionAddresses=proxySocketAddressesList.toArray(new InetSocketAddress[proxySocketAddressesList.size()]);
      }
      proxyTransport=connectionTransports[ix];
      proxySocketAddress=connectionAddresses[ix];
    }
 else {
      if (proxyAddressAndPortEntered) {
        if (connectionAddresses == null) {
          ArrayList<InetSocketAddress> addresses=new ArrayList<InetSocketAddress>();
          resolveAddresses(proxyAddressStr,addresses,proxyPort);
          connectionAddresses=addresses.toArray(new InetSocketAddress[addresses.size()]);
          connectionTransports=new String[addresses.size()];
          Arrays.fill(connectionTransports,proxyTransport);
        }
        if (connectionAddresses.length > ix)         proxySocketAddress=connectionAddresses[ix];
      }
 else {
        if (connectionAddresses == null) {
          ArrayList<InetSocketAddress> proxySocketAddressesList=new ArrayList<InetSocketAddress>();
          ArrayList<String> proxyTransportsList=new ArrayList<String>();
          resolveSipAddress(proxyAddressStr,proxyTransport,proxySocketAddressesList,proxyTransportsList,false);
          connectionTransports=proxyTransportsList.toArray(new String[proxyTransportsList.size()]);
          connectionAddresses=proxySocketAddressesList.toArray(new InetSocketAddress[proxySocketAddressesList.size()]);
        }
        proxyTransport=connectionTransports[ix];
        proxySocketAddress=connectionAddresses[ix];
      }
    }
    if (proxySocketAddress == null)     throw new UnknownHostException();
    if (this.currentConnectionAddress == null)     this.currentConnectionAddress=proxySocketAddress;
    proxyPort=proxySocketAddress.getPort();
    if (logger.isTraceEnabled())     logger.trace("Setting proxy address = " + proxyAddressStr);
    accountID.putAccountProperty(ProtocolProviderFactory.PROXY_ADDRESS_VALIDATED,Boolean.toString(true));
  }
 catch (  UnknownHostException ex) {
    logger.error(proxyAddressStr + " appears to be an either invalid" + " or inaccessible address.",ex);
    boolean isProxyValidated=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.PROXY_ADDRESS_VALIDATED,false);
    if (!isProxyValidated) {
      throw new IllegalArgumentException(proxyAddressStr + " appears to be an either invalid or" + " inaccessible address.",ex);
    }
  }
  if (connectionAddresses == null || connectionAddresses.length == 0) {
    sipRegistrarConnection=null;
    connectionAddresses=null;
    connectionTransports=null;
    fireRegistrationStateChanged(RegistrationState.UNREGISTERED,RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,"Invalid or inaccessible server address.");
    return;
  }
  if (proxySocketAddress == null) {
    return;
  }
  if (sipRegistrarConnection != null)   sipRegistrarConnection.setTransport(proxyTransport);
  this.outboundProxySocketAddress=new InetSocketAddress(proxySocketAddress.getAddress(),proxyPort);
  this.outboundProxyTransport=proxyTransport;
}
