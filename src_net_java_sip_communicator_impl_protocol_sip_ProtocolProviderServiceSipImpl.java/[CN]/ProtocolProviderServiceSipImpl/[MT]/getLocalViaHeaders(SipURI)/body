{
  ArrayList<ViaHeader> viaHeaders=new ArrayList<ViaHeader>();
  ListeningPoint srcListeningPoint=getListeningPoint(intendedDestination.getTransportParam());
  try {
    InetSocketAddress targetAddress=getIntendedDestination(intendedDestination);
    InetAddress localAddress=SipActivator.getNetworkAddressManagerService().getLocalHost(targetAddress.getAddress());
    int localPort=srcListeningPoint.getPort();
    String transport=srcListeningPoint.getTransport();
    if (ListeningPoint.TCP.equalsIgnoreCase(transport) || ListeningPoint.TLS.equalsIgnoreCase(transport)) {
      InetSocketAddress localSockAddr=sipStackSharing.getLocalAddressForDestination(targetAddress.getAddress(),targetAddress.getPort(),localAddress,transport);
      localPort=localSockAddr.getPort();
    }
    ViaHeader viaHeader=headerFactory.createViaHeader(localAddress.getHostAddress(),localPort,transport,null);
    viaHeaders.add(viaHeader);
    if (logger.isDebugEnabled())     logger.debug("generated via headers:" + viaHeader);
    return viaHeaders;
  }
 catch (  ParseException ex) {
    logger.error("A ParseException occurred while creating Via Headers!",ex);
    throw new OperationFailedException("A ParseException occurred while creating Via Headers!",OperationFailedException.INTERNAL_ERROR,ex);
  }
catch (  InvalidArgumentException ex) {
    logger.error("Unable to create a via header for port " + sipStackSharing.getLP(ListeningPoint.UDP).getPort(),ex);
    throw new OperationFailedException("Unable to create a via header for port " + sipStackSharing.getLP(ListeningPoint.UDP).getPort(),OperationFailedException.INTERNAL_ERROR,ex);
  }
catch (  java.io.IOException ex) {
    logger.error("Unable to create a via header for port " + sipStackSharing.getLP(ListeningPoint.UDP).getPort(),ex);
    throw new OperationFailedException("Unable to create a via header for port " + sipStackSharing.getLP(ListeningPoint.UDP).getPort(),OperationFailedException.NETWORK_FAILURE,ex);
  }
}
