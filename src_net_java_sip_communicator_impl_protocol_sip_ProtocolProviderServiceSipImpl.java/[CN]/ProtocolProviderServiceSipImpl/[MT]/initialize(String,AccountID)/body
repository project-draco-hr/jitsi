{
synchronized (initializationLock) {
    this.accountID=accountID;
    sipFactory=SipFactory.getInstance();
    sipFactory.setPathName("gov.nist");
    Properties properties=new Properties();
    initOutboundProxy(accountID,properties);
    properties.setProperty(JSPNAME_STACK_NAME,"SIP Communicator:" + getAccountID().getAccountUniqueID());
    properties.setProperty(NSPNAME_DEBUG_LOG,NSPVALUE_DEBUG_LOG);
    properties.setProperty(NSPNAME_SERVER_LOG,NSPVALUE_SERVER_LOG);
    properties.setProperty(NSPNAME_CACHE_CLIENT_CONNECTIONS,NSPVALUE_CACHE_CLIENT_CONNECTIONS);
    properties.setProperty(NSPNAME_TRACE_LEVEL,NSPVALUE_TRACE_LEVEL);
    try {
      jainSipStack=sipFactory.createSipStack(properties);
      logger.debug("Created stack: " + jainSipStack);
    }
 catch (    PeerUnavailableException e) {
      logger.fatal("Failed to initialize SIP Stack.",e);
      throw new OperationFailedException("Failed to create sip stack",OperationFailedException.INTERNAL_ERROR,e);
    }
    int preferredSipPort=ListeningPoint.PORT_5060;
    String proxyPortStr=(String)accountID.getAccountProperties().get(PREFERRED_SIP_PORT);
    if (proxyPortStr != null && proxyPortStr.length() > 0) {
      try {
        preferredSipPort=Integer.parseInt(proxyPortStr);
      }
 catch (      NumberFormatException ex) {
        logger.error(proxyPortStr + " is not a valid port value. Expected an integer",ex);
      }
      if (preferredSipPort > NetworkUtils.MAX_PORT_NUMBER)       logger.error(preferredSipPort + " is larger than " + NetworkUtils.MAX_PORT_NUMBER+ " and does not "+ "therefore represent a valid port nubmer.");
    }
    initListeningPoints(preferredSipPort);
    try {
      headerFactory=sipFactory.createHeaderFactory();
      addressFactory=sipFactory.createAddressFactory();
      messageFactory=sipFactory.createMessageFactory();
    }
 catch (    PeerUnavailableException ex) {
      logger.fatal("Failed to ininit SIP factories",ex);
      throw new OperationFailedException("Failed to init SIP factories",OperationFailedException.INTERNAL_ERROR,ex);
    }
    initRegistrarConnection(accountID);
    String ourUserID=(String)accountID.getAccountProperties().get(ProtocolProviderFactory.USER_ID);
    ourDisplayName=(String)accountID.getAccountProperties().get(ProtocolProviderFactory.DISPLAY_NAME);
    String registrarAddressStr=sipRegistrarConnection.getRegistrarAddress().getHostAddress();
    SipURI ourSipURI=null;
    try {
      ourSipURI=addressFactory.createSipURI(ourUserID,registrarAddressStr);
      if (ourDisplayName == null || ourDisplayName.trim().length() == 0) {
        ourDisplayName=ourUserID;
      }
      ourSipAddress=addressFactory.createAddress(ourDisplayName,ourSipURI);
    }
 catch (    ParseException ex) {
      throw new IllegalArgumentException("Could not create a SIP URI for user " + ourUserID + " and registrar "+ registrarAddressStr);
    }
    isInitialized=true;
  }
}
