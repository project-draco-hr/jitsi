{
synchronized (initializationLock) {
    this.accountID=accountID;
    String protocolIconPath=accountID.getAccountPropertyString(ProtocolProviderFactory.PROTOCOL_ICON_PATH);
    if (protocolIconPath == null)     protocolIconPath="resources/images/protocol/sip";
    this.protocolIcon=new ProtocolIconSipImpl(protocolIconPath);
    this.sipStatusEnum=new SipStatusEnum(protocolIconPath);
    if (sipStackSharing == null)     sipStackSharing=new SipStackSharing();
    boolean enablePresence=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_PRESENCE_ENABLED,true);
    boolean forceP2P=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.FORCE_P2P_MODE,true);
    int pollingValue=accountID.getAccountPropertyInt(ProtocolProviderFactory.POLLING_PERIOD,30);
    int subscriptionExpiration=accountID.getAccountPropertyInt(ProtocolProviderFactory.SUBSCRIPTION_EXPIRATION,3600);
    headerFactory=new HeaderFactoryImpl();
    addressFactory=new AddressFactoryImpl();
    ourDisplayName=accountID.getAccountPropertyString(ProtocolProviderFactory.DISPLAY_NAME);
    if (ourDisplayName == null || ourDisplayName.trim().length() == 0) {
      ourDisplayName=accountID.getUserID();
    }
    OperationSetBasicTelephonySipImpl opSetBasicTelephonySipImpl=new OperationSetBasicTelephonySipImpl(this);
    boolean isCallingDisabled=SipActivator.getConfigurationService().getBoolean(IS_CALLING_DISABLED,false);
    boolean isCallingDisabledForAccount=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT,false);
    if (!isCallingDisabled && !isCallingDisabledForAccount) {
      addSupportedOperationSet(OperationSetBasicTelephony.class,opSetBasicTelephonySipImpl);
      addSupportedOperationSet(OperationSetAdvancedTelephony.class,opSetBasicTelephonySipImpl);
      OperationSetAutoAnswerSipImpl autoAnswerOpSet=new OperationSetAutoAnswerSipImpl(this);
      addSupportedOperationSet(OperationSetBasicAutoAnswer.class,autoAnswerOpSet);
      addSupportedOperationSet(OperationSetAdvancedAutoAnswer.class,autoAnswerOpSet);
      addSupportedOperationSet(OperationSetSecureZrtpTelephony.class,opSetBasicTelephonySipImpl);
      addSupportedOperationSet(OperationSetSecureSDesTelephony.class,opSetBasicTelephonySipImpl);
      addSupportedOperationSet(OperationSetVideoTelephony.class,new OperationSetVideoTelephonySipImpl(opSetBasicTelephonySipImpl));
      addSupportedOperationSet(OperationSetTelephonyConferencing.class,new OperationSetTelephonyConferencingSipImpl(this));
      OperationSetDTMFSipImpl operationSetDTMFSip=new OperationSetDTMFSipImpl(this);
      addSupportedOperationSet(OperationSetDTMF.class,operationSetDTMFSip);
      addSupportedOperationSet(OperationSetIncomingDTMF.class,new OperationSetIncomingDTMFSipImpl(this,operationSetDTMFSip));
      boolean isDesktopStreamingDisabled=SipActivator.getConfigurationService().getBoolean(IS_DESKTOP_STREAMING_DISABLED,false);
      boolean isAccountDesktopStreamingDisabled=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_DESKTOP_STREAMING_DISABLED,false);
      if (!isDesktopStreamingDisabled && !isAccountDesktopStreamingDisabled) {
        addSupportedOperationSet(OperationSetDesktopStreaming.class,new OperationSetDesktopStreamingSipImpl(opSetBasicTelephonySipImpl));
        if (!accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_DESKTOP_REMOTE_CONTROL_DISABLED,false)) {
          addSupportedOperationSet(OperationSetDesktopSharingServer.class,new OperationSetDesktopSharingServerSipImpl(opSetBasicTelephonySipImpl));
          addSupportedOperationSet(OperationSetDesktopSharingClient.class,new OperationSetDesktopSharingClientSipImpl(this));
        }
      }
      addSupportedOperationSet(OperationSetJitsiMeetTools.class,new OperationSetJitsiMeetToolsSipImpl());
      boolean isParkingEnabled=accountID.getAccountPropertyBoolean(OperationSetTelephonyPark.IS_CALL_PARK_ENABLED,false);
      if (isParkingEnabled) {
        addSupportedOperationSet(OperationSetTelephonyPark.class,new OperationSetTelephonyParkSipImpl(this));
      }
    }
    if (enablePresence) {
      this.opSetPersPresence=new OperationSetPresenceSipImpl(this,enablePresence,forceP2P,pollingValue,subscriptionExpiration);
      addSupportedOperationSet(OperationSetPersistentPresence.class,opSetPersPresence);
      addSupportedOperationSet(OperationSetPresence.class,opSetPersPresence);
      boolean isMessagingDisabled=SipActivator.getConfigurationService().getBoolean(IS_MESSAGING_DISABLED,false);
      if (!isMessagingDisabled) {
        this.opSetBasicIM=new OperationSetBasicInstantMessagingSipImpl(this);
        addSupportedOperationSet(OperationSetBasicInstantMessaging.class,opSetBasicIM);
        this.opSetTypingNotif=new OperationSetTypingNotificationsSipImpl(this,opSetBasicIM);
        addSupportedOperationSet(OperationSetTypingNotifications.class,opSetTypingNotif);
        addSupportedOperationSet(OperationSetInstantMessageTransform.class,new OperationSetInstantMessageTransformImpl());
      }
      this.opSetSSAccountInfo=new OperationSetServerStoredAccountInfoSipImpl(this);
      opSetSSAccountInfo.setOurDisplayName(ourDisplayName);
      addSupportedOperationSet(OperationSetServerStoredAccountInfo.class,opSetSSAccountInfo);
      addSupportedOperationSet(OperationSetAvatar.class,new OperationSetAvatarSipImpl(this,opSetSSAccountInfo));
    }
    if (accountID.getAccountPropertyBoolean(ProtocolProviderFactory.VOICEMAIL_ENABLED,true)) {
      this.opSetMWI=new OperationSetMessageWaitingSipImpl(this);
      addSupportedOperationSet(OperationSetMessageWaiting.class,opSetMWI);
    }
    if (getAccountID().getAccountPropertyString(ProtocolProviderFactory.CUSAX_PROVIDER_ACCOUNT_PROP) != null) {
      addSupportedOperationSet(OperationSetCusaxUtils.class,new OperationSetCusaxUtilsSipImpl(this));
    }
    this.capabilities=new ClientCapabilities(this);
    this.sipSecurityManager=new SipSecurityManager(accountID,this);
    sipSecurityManager.setHeaderFactory(headerFactory);
    ProtocolProviderExtensions.registerCustomOperationSets(this);
    isInitialized=true;
  }
}
