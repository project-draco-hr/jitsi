{
  Request request=requestEvent.getRequest();
  if (getRegistrarConnection() != null && !getRegistrarConnection().isRegistrarless() && !getRegistrarConnection().isRequestFromSameConnection(request)) {
    logger.warn("Received request not from our proxy, ignoring it! " + "Request:" + request);
    if (requestEvent.getServerTransaction() != null) {
      try {
        requestEvent.getServerTransaction().terminate();
      }
 catch (      Throwable e) {
        logger.warn("Failed to properly terminate transaction for " + "a rogue request. Well ... so be it " + "Request:"+ request);
      }
    }
    return;
  }
  EventHeader eventHeader=(EventHeader)request.getHeader(EventHeader.NAME);
  if (eventHeader != null) {
    boolean eventKnown;
synchronized (this.registeredEvents) {
      eventKnown=this.registeredEvents.contains(eventHeader.getEventType());
    }
    if (!eventKnown) {
      ServerTransaction serverTransaction=requestEvent.getServerTransaction();
      if (serverTransaction == null) {
        try {
          serverTransaction=SipStackSharing.getOrCreateServerTransaction(requestEvent);
        }
 catch (        TransactionAlreadyExistsException ex) {
          logger.error("Failed to create a new server" + "transaction for an incoming request\n" + "(Next message contains the request)",ex);
          return;
        }
catch (        TransactionUnavailableException ex) {
          logger.error("Failed to create a new server" + "transaction for an incoming request\n" + "(Next message contains the request)",ex);
          return;
        }
      }
      Response response=null;
      try {
        response=this.getMessageFactory().createResponse(Response.BAD_EVENT,request);
      }
 catch (      ParseException e) {
        logger.error("failed to create the 489 response",e);
        return;
      }
      try {
        serverTransaction.sendResponse(response);
        return;
      }
 catch (      SipException e) {
        logger.error("failed to send the response",e);
      }
catch (      InvalidArgumentException e) {
        logger.error("invalid argument provided while trying" + " to send the response",e);
      }
    }
  }
  String method=request.getMethod();
  List<MethodProcessor> processors=methodProcessors.get(method);
  boolean processedAtLeastOnce=false;
  if (processors != null) {
    if (logger.isDebugEnabled())     logger.debug("Found " + processors.size() + " processor(s) for method "+ method);
    for (    MethodProcessor processor : processors) {
      if (processor.processRequest(requestEvent)) {
        processedAtLeastOnce=true;
        break;
      }
    }
  }
  if (!processedAtLeastOnce) {
    ServerTransaction serverTransaction;
    try {
      serverTransaction=SipStackSharing.getOrCreateServerTransaction(requestEvent);
      if (serverTransaction == null) {
        logger.warn("Could not create a transaction for a " + "non-supported method " + request.getMethod());
        return;
      }
      TransactionState state=serverTransaction.getState();
      if (TransactionState.TRYING.equals(state)) {
        Response response=this.getMessageFactory().createResponse(Response.NOT_IMPLEMENTED,request);
        serverTransaction.sendResponse(response);
      }
    }
 catch (    Throwable exc) {
      logger.warn("Could not respond to a non-supported method " + request.getMethod(),exc);
    }
  }
}
