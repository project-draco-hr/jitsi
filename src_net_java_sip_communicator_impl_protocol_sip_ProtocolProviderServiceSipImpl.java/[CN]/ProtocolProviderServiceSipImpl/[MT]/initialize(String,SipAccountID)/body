{
synchronized (initializationLock) {
    this.accountID=accountID;
    String protocolIconPath=accountID.getAccountPropertyString(ProtocolProviderFactory.PROTOCOL_ICON_PATH);
    if (protocolIconPath == null)     protocolIconPath="resources/images/protocol/sip";
    this.protocolIcon=new ProtocolIconSipImpl(protocolIconPath);
    this.sipStatusEnum=new SipStatusEnum(protocolIconPath);
    initOutboundProxy(accountID);
    int preferredSipPort=ListeningPoint.PORT_5060;
    String proxyPortStr=SipActivator.getConfigurationService().getString(PREFERRED_SIP_PORT);
    if (proxyPortStr != null && proxyPortStr.length() > 0) {
      try {
        preferredSipPort=Integer.parseInt(proxyPortStr);
      }
 catch (      NumberFormatException ex) {
        logger.error(proxyPortStr + " is not a valid port value. Expected an integer",ex);
      }
      if (preferredSipPort > NetworkUtils.MAX_PORT_NUMBER) {
        logger.error(preferredSipPort + " is larger than " + NetworkUtils.MAX_PORT_NUMBER+ " and does not "+ "therefore represent a valid port nubmer.");
      }
    }
    if (sipStackSharing == null)     sipStackSharing=new SipStackSharing();
    boolean enablePresence=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_PRESENCE_ENABLED,true);
    boolean forceP2P=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.FORCE_P2P_MODE,true);
    int pollingValue=accountID.getAccountPropertyInt(ProtocolProviderFactory.POLLING_PERIOD,30);
    int subscriptionExpiration=accountID.getAccountPropertyInt(ProtocolProviderFactory.SUBSCRIPTION_EXPIRATION,3600);
    headerFactory=new HeaderFactoryImpl();
    addressFactory=new AddressFactoryImpl();
    initRegistrarConnection(accountID);
    OperationSetAdvancedTelephony opSetAdvancedTelephony=new OperationSetBasicTelephonySipImpl(this);
    this.supportedOperationSets.put(OperationSetBasicTelephony.class.getName(),opSetAdvancedTelephony);
    this.supportedOperationSets.put(OperationSetAdvancedTelephony.class.getName(),opSetAdvancedTelephony);
    this.supportedOperationSets.put(OperationSetSecureTelephony.class.getName(),opSetAdvancedTelephony);
    OperationSetPersistentPresence opSetPersPresence=new OperationSetPresenceSipImpl(this,enablePresence,forceP2P,pollingValue,subscriptionExpiration);
    this.supportedOperationSets.put(OperationSetPersistentPresence.class.getName(),opSetPersPresence);
    this.supportedOperationSets.put(OperationSetPresence.class.getName(),opSetPersPresence);
    OperationSetBasicInstantMessagingSipImpl opSetBasicIM=new OperationSetBasicInstantMessagingSipImpl(this);
    this.supportedOperationSets.put(OperationSetBasicInstantMessaging.class.getName(),opSetBasicIM);
    OperationSetTypingNotificationsSipImpl opSetTyping=new OperationSetTypingNotificationsSipImpl(this,opSetBasicIM);
    this.supportedOperationSets.put(OperationSetTypingNotifications.class.getName(),opSetTyping);
    supportedOperationSets.put(OperationSetVideoTelephony.class.getName(),new OperationSetVideoTelephonySipImpl());
    OperationSetDTMF opSetDTMF=new OperationSetDTMFSipImpl(this);
    this.supportedOperationSets.put(OperationSetDTMF.class.getName(),opSetDTMF);
    new ClientCapabilities(this);
    ourDisplayName=accountID.getAccountPropertyString(ProtocolProviderFactory.DISPLAY_NAME);
    if (ourDisplayName == null || ourDisplayName.trim().length() == 0) {
      ourDisplayName=accountID.getUserID();
    }
    this.sipSecurityManager=new SipSecurityManager(accountID);
    sipSecurityManager.setHeaderFactory(headerFactory);
    isInitialized=true;
  }
}
