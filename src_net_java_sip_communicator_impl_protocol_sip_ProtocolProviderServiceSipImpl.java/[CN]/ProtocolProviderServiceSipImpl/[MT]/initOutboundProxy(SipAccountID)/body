{
  String proxyAddressStr=accountID.getAccountPropertyString(ProtocolProviderFactory.PROXY_ADDRESS);
  if (proxyAddressStr == null || proxyAddressStr.trim().length() == 0)   return;
  InetAddress proxyAddress=null;
  int proxyPort=ListeningPoint.PORT_5060;
  try {
    String proxyTransport=accountID.getAccountPropertyString(ProtocolProviderFactory.PREFERRED_TRANSPORT);
    if (proxyTransport == null)     proxyTransport=getDefaultTransport();
    InetSocketAddress proxySocketAddress=resolveSipAddress(proxyAddressStr,proxyTransport);
    proxyAddress=proxySocketAddress.getAddress();
    proxyPort=proxySocketAddress.getPort();
    proxyAddressStr=proxyAddress.getHostName();
    logger.trace("Setting proxy address = " + proxyAddressStr);
    accountID.putAccountProperty(ProtocolProviderFactory.PROXY_ADDRESS_VALIDATED,Boolean.toString(true));
  }
 catch (  UnknownHostException ex) {
    logger.error(proxyAddressStr + " appears to be an either invalid" + " or inaccessible address.",ex);
    boolean isProxyValidated=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.PROXY_ADDRESS_VALIDATED,false);
    if (!isProxyValidated) {
      throw new IllegalArgumentException(proxyAddressStr + " appears to be an either invalid or" + " inaccessible address.",ex);
    }
  }
  if (proxyAddressStr == null || proxyAddressStr.length() == 0 || proxyAddress == null) {
    return;
  }
  proxyPort=accountID.getAccountPropertyInt(ProtocolProviderFactory.PROXY_PORT,proxyPort);
  if (proxyPort > NetworkUtils.MAX_PORT_NUMBER) {
    throw new IllegalArgumentException(proxyPort + " is larger than " + NetworkUtils.MAX_PORT_NUMBER+ " and does not therefore represent a valid port nubmer.");
  }
  String proxyTransport=accountID.getAccountPropertyString(ProtocolProviderFactory.PREFERRED_TRANSPORT);
  if (proxyTransport != null && proxyTransport.length() > 0) {
    if (!proxyTransport.equals(ListeningPoint.UDP) && !proxyTransport.equals(ListeningPoint.TCP) && !proxyTransport.equals(ListeningPoint.TLS)) {
      throw new IllegalArgumentException(proxyTransport + " is not a valid transport protocol. Transport must be " + "left blanc or set to TCP, UDP or TLS.");
    }
  }
 else {
    proxyTransport=ListeningPoint.UDP;
  }
  StringBuffer proxyStringBuffer=new StringBuffer(proxyAddress.getHostAddress());
  if (proxyAddress instanceof Inet6Address) {
    proxyStringBuffer.insert(0,'[');
    proxyStringBuffer.append(']');
  }
  proxyStringBuffer.append(':');
  proxyStringBuffer.append(Integer.toString(proxyPort));
  proxyStringBuffer.append('/');
  proxyStringBuffer.append(proxyTransport);
  this.outboundProxyString=proxyStringBuffer.toString();
  this.outboundProxySocketAddress=new InetSocketAddress(proxyAddress,proxyPort);
  this.outboundProxyTransport=proxyTransport;
}
