{
  Map<String,String> accountProperties=new Hashtable<String,String>();
  accountProperties.put(ProtocolProviderFactory.PROTOCOL,ProtocolNames.FACEBOOK);
  accountProperties.put(ProtocolProviderFactory.PROTOCOL_ICON_PATH,"resources/images/protocol/facebook");
  if (registration.isRememberPassword()) {
    accountProperties.put(ProtocolProviderFactory.PASSWORD,registration.getPassword());
  }
  accountProperties.put("SEND_KEEP_ALIVE",Boolean.TRUE.toString());
  if (isModification) {
    providerFactory.uninstallAccount(protocolProvider.getAccountID());
    this.protocolProvider=null;
    this.isModification=false;
  }
  accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,SERVER_ADDRESS);
  accountProperties.put(ProtocolProviderFactory.SERVER_PORT,"5222");
  accountProperties.put(ProtocolProviderFactory.RESOURCE,"sip-comm");
  accountProperties.put(ProtocolProviderFactory.RESOURCE_PRIORITY,"10");
  Throwable exception=null;
  try {
    AccountID accountID=providerFactory.installAccount(user,accountProperties);
    ServiceReference serRef=providerFactory.getProviderForAccount(accountID);
    protocolProvider=(ProtocolProviderService)FacebookAccRegWizzActivator.bundleContext.getService(serRef);
  }
 catch (  IllegalArgumentException exc) {
    exception=exc;
  }
catch (  IllegalStateException exc) {
    exception=exc;
  }
  if (exception != null)   FacebookAccRegWizzActivator.getUIService().getPopupDialog().showMessagePopupDialog(exception.getMessage(),Resources.getString("service.gui.ERROR"),PopupDialog.ERROR_MESSAGE);
  return protocolProvider;
}
