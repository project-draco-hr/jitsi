{
  final Credential.Builder builder=new Credential.Builder(BearerToken.authorizationHeaderAccessMethod());
  builder.setTokenServerUrl(GOOGLE_OAUTH2_TOKEN_SERVER);
  builder.setTransport(new NetHttpTransport());
  builder.setJsonFactory(new JacksonFactory());
  builder.setClientAuthentication(new HttpExecuteInterceptor(){
    @Override public void intercept(    HttpRequest request) throws IOException {
      final Object data=((UrlEncodedContent)request.getContent()).getData();
      if (data instanceof RefreshTokenRequest) {
        final RefreshTokenRequest content=(RefreshTokenRequest)data;
        content.put("client_id",GOOGLE_API_CLIENT_ID);
        content.put("client_secret",GOOGLE_API_CLIENT_SECRET);
        LOGGER.info("Inserting client authentication data into " + "refresh token request.");
        if (LOGGER.isDebugEnabled()) {
          LOGGER.debug("Request: " + content.toString());
        }
      }
 else {
        LOGGER.debug("Unexpected type of request found.");
      }
    }
  }
);
  builder.addRefreshListener(new CredentialRefreshListener(){
    @Override public void onTokenResponse(    Credential credential,    TokenResponse tokenResponse) throws IOException {
      LOGGER.debug("Successful token refresh response: " + tokenResponse.toPrettyString());
      store.set(credential);
    }
    @Override public void onTokenErrorResponse(    Credential credential,    TokenErrorResponse tokenErrorResponse) throws IOException {
      if (LOGGER.isDebugEnabled()) {
        LOGGER.debug("Failed token refresh response: " + tokenErrorResponse.toPrettyString());
      }
      LOGGER.error("Failed to refresh OAuth2 token: " + tokenErrorResponse.getError() + ": "+ tokenErrorResponse.getErrorDescription());
    }
  }
);
  final Credential credential=builder.build();
  credential.setAccessToken(data.accessToken);
  credential.setRefreshToken(data.refreshToken);
  credential.setExpiresInSeconds(data.expiration);
  return credential;
}
