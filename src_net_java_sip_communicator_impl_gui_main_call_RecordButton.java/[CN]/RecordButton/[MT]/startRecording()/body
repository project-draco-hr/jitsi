{
  String savedCallsPath=configuration.getString(Recorder.SAVED_CALLS_PATH);
  String callFormat;
  if ((savedCallsPath == null) || (savedCallsPath.length() == 0)) {
    if (callFileChooser == null) {
      callFileChooser=GenericFileDialog.create(null,resources.getI18NString("plugin.callrecordingconfig.SAVE_CALL"),SipCommFileChooser.SAVE_FILE_OPERATION);
      callFileChooser.addFilter(new SipCommFileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || isSupportedFormat(f);
        }
        @Override public String getDescription(){
          StringBuilder description=new StringBuilder();
          description.append("Recorded call");
          Recorder recorder;
          try {
            recorder=getRecorder();
          }
 catch (          OperationFailedException ofex) {
            logger.error("Failed to get Recorder",ofex);
            recorder=null;
          }
          if (recorder != null) {
            List<String> supportedFormats=recorder.getSupportedFormats();
            if (supportedFormats != null) {
              description.append(" (");
              boolean firstSupportedFormat=true;
              for (              String supportedFormat : supportedFormats) {
                if (firstSupportedFormat)                 firstSupportedFormat=false;
 else                 description.append(", ");
                description.append("*.");
                description.append(supportedFormat);
              }
              description.append(')');
            }
          }
          return description.toString();
        }
      }
);
    }
    callFileChooser.setStartPath(createDefaultFilename(null));
    File selectedFile=callFileChooser.getFileFromDialog();
    if (selectedFile != null) {
      callFilename=selectedFile.getAbsolutePath();
      callFormat=SoundFileUtils.getExtension(selectedFile);
      if ((callFormat != null) && (callFormat.length() != 0)) {
        if (!isSupportedFormat(selectedFile)) {
          if (SoundFileUtils.isSoundFile(selectedFile)) {
            callFilename=callFilename.substring(0,callFilename.lastIndexOf('.'));
          }
          String configuredFormat=configuration.getString(Recorder.FORMAT);
          callFormat=(configuredFormat != null && configuredFormat.length() != 0) ? configuredFormat : SoundFileUtils.DEFAULT_CALL_RECORDING_FORMAT;
          callFilename+='.' + callFormat;
        }
        configuration.setProperty(Recorder.FORMAT,callFormat);
      }
    }
 else {
      return false;
    }
  }
 else {
    callFilename=createDefaultFilename(savedCallsPath);
    callFormat=SoundFileUtils.getExtension(new File(callFilename));
  }
  Throwable exception=null;
  try {
    Recorder recorder=getRecorder();
    if (recorder != null) {
      if ((callFormat == null) || (callFormat.length() <= 0))       callFormat=SoundFileUtils.DEFAULT_CALL_RECORDING_FORMAT;
      recorder.start(callFormat,callFilename);
    }
    this.recorder=recorder;
  }
 catch (  IOException ioex) {
    exception=ioex;
  }
catch (  MediaException mex) {
    exception=mex;
  }
catch (  OperationFailedException ofex) {
    exception=ofex;
  }
  if ((recorder == null) || (exception != null)) {
    logger.error("Failed to start recording call " + call + " into file "+ callFilename,exception);
    return false;
  }
 else   return true;
}
