{
  addContactItem.setText(GuiActivator.getResources().getI18NString("service.gui.ADD_CONTACT_TO") + " " + metaContact.getDisplayName());
  Iterator<MetaContactGroup> groups=GuiActivator.getContactListService().getRoot().getSubgroups();
  if (groups.hasNext()) {
    JLabel infoLabel=new JLabel(GuiActivator.getResources().getI18NString("service.gui.SELECT_GROUP"));
    infoLabel.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
    infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));
    this.moveToMenu.add(infoLabel);
    this.moveToMenu.addSeparator();
  }
  while (groups.hasNext()) {
    MetaContactGroup group=groups.next();
    if (!group.isPersistent())     continue;
    JMenuItem menuItem=new JMenuItem(group.getGroupName());
    menuItem.setName(moveToPrefix + group.getMetaUID());
    menuItem.addActionListener(this);
    this.moveToMenu.add(menuItem);
  }
  Iterator<Contact> contacts=metaContact.getContacts();
  if (metaContact.getContactCount() > 1) {
    Icon deleteIcon=new ImageIcon(ImageLoader.getImage(ImageLoader.DELETE_16x16_ICON));
    JMenuItem allItem=createMenuItem(allContactsString,removeContactPrefix + "allContacts",deleteIcon);
    JMenuItem allItem1=new JMenuItem(allContactsString);
    allItem1.addActionListener(this);
    allItem1.setName(moveSubcontactPrefix + "allContacts");
    this.removeContactMenu.add(allItem);
    this.moveSubcontactMenu.add(allItem1);
    this.removeContactMenu.addSeparator();
    this.moveSubcontactMenu.addSeparator();
  }
  List<ProtocolProviderService> providers=CallManager.getTelephonyProviders();
  boolean hasPhones=false;
  boolean hasVideoDetail=false;
  boolean separator=false;
  boolean routingForVideoEnabled=false;
  boolean routingForDesktopEnabled=false;
  while (contacts.hasNext()) {
    Contact contact=contacts.next();
    ProtocolProviderService protocolProvider=contact.getProtocolProvider();
    String contactAddress=contact.getAddress();
    Icon protocolIcon=new ImageIcon(createContactStatusImage(contact));
    this.removeContactMenu.add(createMenuItem(contactAddress,removeContactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
    this.moveSubcontactMenu.add(createMenuItem(contactAddress,moveSubcontactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
    OperationSetServerStoredContactInfo infoOpSet=contact.getProtocolProvider().getOperationSet(OperationSetServerStoredContactInfo.class);
    Iterator<GenericDetail> details=null;
    ArrayList<String> phones=new ArrayList<String>();
    if (infoOpSet != null) {
      try {
        details=infoOpSet.getAllDetailsForContact(contact);
        while (details.hasNext()) {
          GenericDetail d=details.next();
          if (d instanceof PhoneNumberDetail && !(d instanceof PagerDetail) && !(d instanceof FaxDetail)) {
            PhoneNumberDetail pnd=(PhoneNumberDetail)d;
            if (pnd.getNumber() != null && pnd.getNumber().length() > 0) {
              String localizedType;
              if (d instanceof WorkPhoneDetail) {
                localizedType=GuiActivator.getResources().getI18NString("service.gui.WORK_PHONE");
              }
 else               if (d instanceof MobilePhoneDetail) {
                localizedType=GuiActivator.getResources().getI18NString("service.gui.MOBILE_PHONE");
              }
 else               if (d instanceof VideoDetail) {
                hasVideoDetail=true;
                localizedType=GuiActivator.getResources().getI18NString("service.gui.VIDEO_PHONE");
              }
 else {
                localizedType=GuiActivator.getResources().getI18NString("service.gui.PHONE");
              }
              phones.add(pnd.getNumber() + " (" + localizedType+ ")");
              hasPhones=true;
            }
          }
        }
      }
 catch (      Throwable t) {
        logger.error("Error obtaining server stored contact info");
      }
    }
    routingForVideoEnabled=ConfigurationUtils.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && phones.size() > 0 && AccountUtils.getOpSetRegisteredProviders(OperationSetVideoTelephony.class,null,null).size() > 0;
    routingForDesktopEnabled=ConfigurationUtils.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && phones.size() > 0 && AccountUtils.getOpSetRegisteredProviders(OperationSetDesktopSharingServer.class,null,null).size() > 0;
    if (metaContact.getContactCount() > 1 || phones.size() > 0) {
      if (protocolProvider.getOperationSet(OperationSetBasicTelephony.class) != null && hasContactCapabilities(contact,OperationSetBasicTelephony.class)) {
        callContactMenu.add(createMenuItem(contactAddress,callContactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
        separator=true;
      }
      if (protocolProvider.getOperationSet(OperationSetVideoTelephony.class) != null && hasContactCapabilities(contact,OperationSetVideoTelephony.class) || routingForVideoEnabled || hasVideoDetail) {
        videoCallMenu.add(createMenuItem(contactAddress,videoCallPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
      if (protocolProvider.getOperationSet(OperationSetDesktopSharingServer.class) != null && hasContactCapabilities(contact,OperationSetDesktopSharingServer.class) || routingForDesktopEnabled || hasVideoDetail) {
        multiContactFullShareMenu.add(createMenuItem(contactAddress,fullDesktopSharingPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
        multiContactRegionShareMenu.add(createMenuItem(contactAddress,regionDesktopSharingPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
      OperationSetExtendedAuthorizations authOpSet=protocolProvider.getOperationSet(OperationSetExtendedAuthorizations.class);
      if (authOpSet != null && authOpSet.getSubscriptionStatus(contact) != null && !authOpSet.getSubscriptionStatus(contact).equals(SubscriptionStatus.Subscribed)) {
        if (firstUnsubscribedContact == null)         firstUnsubscribedContact=contact;
        multiContactRequestAuthMenu.add(createMenuItem(contactAddress,requestAuthPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
    }
    for (    String phone : phones) {
      String p=phone.substring(0,phone.lastIndexOf("(") - 1);
      if (providers.size() > 0) {
        JMenuItem menu=createMenuItem(phone,callPhonePrefix + p,null);
        callContactMenu.add(menu);
        separator=true;
      }
    }
    if (separator && contacts.hasNext()) {
      callContactMenu.addSeparator();
      separator=false;
    }
  }
  Component c=null;
  if (callContactMenu.getMenuComponentCount() > 0)   c=callContactMenu.getMenuComponent(callContactMenu.getMenuComponentCount() - 1);
  if (c != null && (c instanceof JSeparator)) {
    callContactMenu.remove(c);
  }
  this.add(sendMessageItem);
  if (metaContact.getDefaultContact(OperationSetSmsMessaging.class) != null) {
    this.add(sendSmsItem);
    sendSmsItem.addActionListener(this);
    sendSmsItem.setName("sendSms");
  }
  if (callContactMenu.getItemCount() > 1) {
    this.add(callContactMenu);
  }
 else {
    if ((hasPhones && callContactMenu.getItemCount() > 0)) {
      JMenuItem item=callContactMenu.getItem(0);
      this.callItem.setName(item.getName());
    }
 else {
      this.callItem.setName("call");
    }
    this.callItem.addActionListener(this);
    this.add(callItem);
  }
  if (videoCallMenu.getItemCount() > 1) {
    this.add(videoCallMenu);
  }
 else {
    this.add(videoCallItem);
    this.videoCallItem.setName("videoCall");
    this.videoCallItem.addActionListener(this);
  }
  if (multiContactFullShareMenu.getItemCount() > 1) {
    add(multiContactFullShareMenu);
    add(multiContactRegionShareMenu);
  }
 else {
    fullShareMenuItem.setName("shareFullScreen");
    fullShareMenuItem.addActionListener(this);
    add(fullShareMenuItem);
    regionShareMenuItem.setName("shareRegion");
    regionShareMenuItem.addActionListener(this);
    add(regionShareMenuItem);
  }
  add(sendFileItem);
  addSeparator();
  if (!ConfigurationUtils.isContactMoveDisabled() && !ConfigurationUtils.isCreateGroupDisabled()) {
    add(moveToMenu);
    add(moveSubcontactMenu);
    addSeparator();
  }
  if (!ConfigurationUtils.isAddContactDisabled()) {
    add(addContactItem);
    addSeparator();
  }
  separator=false;
  if (!ConfigurationUtils.isRemoveContactDisabled()) {
    if (metaContact.getContactCount() > 1) {
      add(removeContactMenu);
      separator=true;
    }
 else {
      Icon deleteIcon=new ImageIcon(ImageLoader.getImage(ImageLoader.DELETE_16x16_ICON));
      JMenuItem removeContactItem=createMenuItem(removeString,removeContactPrefix + "allContacts",deleteIcon);
      add(removeContactItem);
      separator=true;
    }
  }
  if (!ConfigurationUtils.isContactRenameDisabled()) {
    add(renameContactItem);
    separator=true;
  }
  if (separator) {
    addSeparator();
  }
  add(viewHistoryItem);
  addSeparator();
  Contact defaultContact=metaContact.getDefaultContact();
  int authRequestItemCount=multiContactRequestAuthMenu.getItemCount();
  if (authRequestItemCount > 1) {
    this.add(multiContactRequestAuthMenu);
  }
 else   if (authRequestItemCount == 1 || (metaContact.getContactCount() == 1 && defaultContact.getProtocolProvider().getOperationSet(OperationSetExtendedAuthorizations.class) != null) && !SubscriptionStatus.Subscribed.equals(defaultContact.getProtocolProvider().getOperationSet(OperationSetExtendedAuthorizations.class).getSubscriptionStatus(defaultContact))) {
    this.add(requestAuthMenuItem);
    this.requestAuthMenuItem.setName("requestAuth");
    this.requestAuthMenuItem.addActionListener(this);
  }
  initPluginComponents();
  sendMessageItem.setName("sendMessage");
  sendFileItem.setName("sendFile");
  moveToMenu.setName("moveToGroup");
  addContactItem.setName("addContact");
  renameContactItem.setName("renameContact");
  viewHistoryItem.setName("viewHistory");
  sendMessageItem.addActionListener(this);
  sendFileItem.addActionListener(this);
  renameContactItem.addActionListener(this);
  viewHistoryItem.addActionListener(this);
  addContactItem.addActionListener(this);
  if (metaContact.getDefaultContact(OperationSetFileTransfer.class) == null)   this.sendFileItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetBasicTelephony.class) == null && (!hasPhones || CallManager.getTelephonyProviders().size() == 0))   this.callItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetVideoTelephony.class) == null && !routingForVideoEnabled && !hasVideoDetail) {
    this.videoCallItem.setEnabled(false);
  }
  if (metaContact.getDefaultContact(OperationSetDesktopSharingServer.class) == null && !routingForDesktopEnabled && !hasVideoDetail) {
    fullShareMenuItem.setEnabled(false);
    regionShareMenuItem.setEnabled(false);
  }
  if (metaContact.getDefaultContact(OperationSetBasicInstantMessaging.class) == null)   this.sendMessageItem.setEnabled(false);
}
