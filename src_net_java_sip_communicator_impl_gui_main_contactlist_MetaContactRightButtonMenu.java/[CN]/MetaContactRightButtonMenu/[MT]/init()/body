{
  addContactItem.setText(GuiActivator.getResources().getI18NString("service.gui.ADD_CONTACT_TO") + " " + metaContact.getDisplayName());
  Iterator<MetaContactGroup> groups=GuiActivator.getContactListService().getRoot().getSubgroups();
  if (groups.hasNext()) {
    JLabel infoLabel=new JLabel(GuiActivator.getResources().getI18NString("service.gui.SELECT_GROUP"));
    infoLabel.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
    infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));
    this.moveToMenu.add(infoLabel);
    this.moveToMenu.addSeparator();
  }
  if (GuiActivator.getContactList().getRootUIGroup() != null) {
    JMenuItem menuItem=new JMenuItem(GuiActivator.getContactList().getRootUIGroup().getDisplayName());
    menuItem.setName(moveToPrefix + GuiActivator.getContactListService().getRoot().getMetaUID());
    menuItem.addActionListener(this);
    this.moveToMenu.add(menuItem);
  }
  while (groups.hasNext()) {
    MetaContactGroup group=groups.next();
    if (!group.isPersistent())     continue;
    JMenuItem menuItem=new JMenuItem(group.getGroupName());
    menuItem.setName(moveToPrefix + group.getMetaUID());
    menuItem.addActionListener(this);
    this.moveToMenu.add(menuItem);
  }
  boolean hasOnlyReadonlyContacts=true;
  boolean hasAnyReadonlyContact=false;
  Iterator<Contact> iter=metaContact.getContacts();
  while (iter.hasNext()) {
    Contact c=iter.next();
    OperationSetPersistentPresencePermissions opsetPermissions=c.getProtocolProvider().getOperationSet(OperationSetPersistentPresencePermissions.class);
    if (opsetPermissions == null || !opsetPermissions.isReadOnly(c)) {
      hasOnlyReadonlyContacts=false;
    }
    if (opsetPermissions != null && opsetPermissions.isReadOnly(c)) {
      hasAnyReadonlyContact=true;
    }
  }
  Iterator<Contact> contacts=metaContact.getContacts();
  if (metaContact.getContactCount() > 1) {
    Icon deleteIcon=new ImageIcon(ImageLoader.getImage(ImageLoader.DELETE_16x16_ICON));
    JMenuItem allItem=createMenuItem(allContactsString,removeContactPrefix + "allContacts",deleteIcon);
    JMenuItem allItem1=new JMenuItem(allContactsString);
    allItem1.addActionListener(this);
    allItem1.setName(moveSubcontactPrefix + "allContacts");
    if (!hasAnyReadonlyContact) {
      this.removeContactMenu.add(allItem);
      this.moveSubcontactMenu.add(allItem1);
      this.removeContactMenu.addSeparator();
      this.moveSubcontactMenu.addSeparator();
    }
  }
  contactPhoneUtil=MetaContactPhoneUtil.getPhoneUtil(metaContact);
  boolean hasPersistableAddress=false;
  while (contacts.hasNext()) {
    Contact contact=contacts.next();
    ProtocolProviderService protocolProvider=contact.getProtocolProvider();
    String contactPersistableAddress=contact.getPersistableAddress();
    String contactAddress=contact.getAddress();
    Icon protocolIcon=new ImageIcon(createContactStatusImage(contact));
    boolean isContactReadonly=false;
    OperationSetPersistentPresencePermissions opsetPermissions=protocolProvider.getOperationSet(OperationSetPersistentPresencePermissions.class);
    if (opsetPermissions != null && opsetPermissions.isReadOnly(contact))     isContactReadonly=true;
    if (!isContactReadonly)     this.removeContactMenu.add(new ContactMenuItem(contact,contactAddress,removeContactPrefix,protocolIcon));
    if (contactPersistableAddress != null) {
      hasPersistableAddress=true;
      if (!isContactReadonly)       this.moveSubcontactMenu.add(new ContactMenuItem(contact,contactPersistableAddress,moveSubcontactPrefix,protocolIcon));
    }
    List<String> phones=contactPhoneUtil.getPhones(contact);
    if (metaContact.getContactCount() > 1 || phones.size() > 0) {
      if (contactPhoneUtil.isCallEnabled(contact)) {
        addCallMenuContact(contact,protocolIcon);
        separator=true;
      }
      if (contactPhoneUtil.isVideoCallEnabled(contact)) {
        videoCallMenu.add(new ContactMenuItem(contact,contactAddress,videoCallPrefix,protocolIcon));
      }
      if (contactPhoneUtil.isDesktopSharingEnabled(contact)) {
        multiContactFullShareMenu.add(new ContactMenuItem(contact,contactAddress,fullDesktopSharingPrefix,protocolIcon));
        multiContactRegionShareMenu.add(new ContactMenuItem(contact,contactAddress,regionDesktopSharingPrefix,protocolIcon));
      }
      OperationSetExtendedAuthorizations authOpSet=protocolProvider.getOperationSet(OperationSetExtendedAuthorizations.class);
      OperationSetMultiUserChat opSetMUC=protocolProvider.getOperationSet(OperationSetMultiUserChat.class);
      if (authOpSet != null && authOpSet.getSubscriptionStatus(contact) != null && !authOpSet.getSubscriptionStatus(contact).equals(SubscriptionStatus.Subscribed) && (opSetMUC == null || !opSetMUC.isPrivateMessagingContact(contactAddress))) {
        if (firstUnsubscribedContact == null)         firstUnsubscribedContact=contact;
        multiContactRequestAuthMenu.add(new ContactMenuItem(contact,contactAddress,requestAuthPrefix,protocolIcon));
      }
    }
    addCallMenuPhones(phones);
    addVideoMenuPhones(contact);
    if (separator && contacts.hasNext()) {
      callContactMenu.addSeparator();
      separator=false;
    }
  }
  Component c=null;
  if (callContactMenu.getMenuComponentCount() > 0)   c=callContactMenu.getMenuComponent(callContactMenu.getMenuComponentCount() - 1);
  if (c != null && (c instanceof JSeparator)) {
    callContactMenu.remove(c);
  }
  this.add(sendMessageItem);
  if (metaContact.getDefaultContact(OperationSetSmsMessaging.class) != null) {
    this.add(sendSmsItem);
    sendSmsItem.addActionListener(this);
    sendSmsItem.setName("sendSms");
  }
  if (callContactMenu.getItemCount() > 1) {
    this.add(callContactMenu);
  }
 else {
    if (callContactMenu.getItemCount() > 0) {
      JMenuItem item=callContactMenu.getItem(0);
      this.callItem.setName(item.getName());
    }
 else {
      this.callItem.setName("call");
    }
    this.callItem.addActionListener(this);
    this.add(callItem);
  }
  if (videoCallMenu.getItemCount() > 1) {
    this.add(videoCallMenu);
  }
 else {
    if (videoCallMenu.getItemCount() > 0) {
      JMenuItem item=videoCallMenu.getItem(0);
      this.videoCallItem.setName(item.getName());
    }
 else {
      this.videoCallItem.setName("videoCall");
    }
    this.videoCallItem.addActionListener(this);
    this.add(videoCallItem);
  }
  if (multiContactFullShareMenu.getItemCount() > 1) {
    add(multiContactFullShareMenu);
    add(multiContactRegionShareMenu);
  }
 else {
    if (multiContactFullShareMenu.getItemCount() > 0) {
      JMenuItem item=multiContactFullShareMenu.getItem(0);
      this.fullShareMenuItem.setName(item.getName());
      JMenuItem ritem=multiContactRegionShareMenu.getItem(0);
      this.regionShareMenuItem.setName(ritem.getName());
    }
 else {
      this.fullShareMenuItem.setName("shareFullScreen");
      this.regionShareMenuItem.setName("shareRegion");
    }
    this.fullShareMenuItem.addActionListener(this);
    this.regionShareMenuItem.addActionListener(this);
    this.add(fullShareMenuItem);
    this.add(regionShareMenuItem);
  }
  add(sendFileItem);
  addSeparator();
  if (!ConfigurationUtils.isContactMoveDisabled() && !ConfigurationUtils.isCreateGroupDisabled() && hasPersistableAddress) {
    boolean addSeparator=false;
    if (!hasAnyReadonlyContact) {
      add(moveToMenu);
      addSeparator=true;
    }
    if (moveSubcontactMenu.getItemCount() > 0) {
      add(moveSubcontactMenu);
      addSeparator=true;
    }
    if (addSeparator)     addSeparator();
  }
  if (!ConfigurationUtils.isAddContactDisabled() && !ConfigurationUtils.isMergeContactDisabled() && !hasAnyReadonlyContact) {
    add(addContactItem);
    addSeparator();
  }
  separator=false;
  if (!ConfigurationUtils.isRemoveContactDisabled()) {
    if (metaContact.getContactCount() > 1) {
      add(removeContactMenu);
      separator=true;
    }
 else     if (!hasOnlyReadonlyContacts) {
      Icon deleteIcon=new ImageIcon(ImageLoader.getImage(ImageLoader.DELETE_16x16_ICON));
      JMenuItem removeContactItem=createMenuItem(removeString,removeContactPrefix + "allContacts",deleteIcon);
      add(removeContactItem);
      separator=true;
    }
  }
  if (!ConfigurationUtils.isContactRenameDisabled()) {
    add(renameContactItem);
    separator=true;
  }
  if (separator) {
    addSeparator();
  }
  add(viewHistoryItem);
  addSeparator();
  Contact defaultContact=metaContact.getDefaultContact();
  int authRequestItemCount=multiContactRequestAuthMenu.getItemCount();
  OperationSetMultiUserChat opSetMUC=defaultContact.getProtocolProvider().getOperationSet(OperationSetMultiUserChat.class);
  if (authRequestItemCount > 1) {
    this.add(multiContactRequestAuthMenu);
  }
 else   if (authRequestItemCount == 1 || (metaContact.getContactCount() == 1 && defaultContact.getProtocolProvider().getOperationSet(OperationSetExtendedAuthorizations.class) != null && (opSetMUC == null || !opSetMUC.isPrivateMessagingContact(defaultContact.getAddress()))) && !SubscriptionStatus.Subscribed.equals(defaultContact.getProtocolProvider().getOperationSet(OperationSetExtendedAuthorizations.class).getSubscriptionStatus(defaultContact))) {
    this.add(requestAuthMenuItem);
    this.requestAuthMenuItem.setName("requestAuth");
    this.requestAuthMenuItem.addActionListener(this);
  }
  initPluginComponents();
  sendMessageItem.setName("sendMessage");
  sendFileItem.setName("sendFile");
  moveToMenu.setName("moveToGroup");
  addContactItem.setName("addContact");
  renameContactItem.setName("renameContact");
  viewHistoryItem.setName("viewHistory");
  sendMessageItem.addActionListener(this);
  sendFileItem.addActionListener(this);
  renameContactItem.addActionListener(this);
  viewHistoryItem.addActionListener(this);
  addContactItem.addActionListener(this);
  if (metaContact.getDefaultContact(OperationSetFileTransfer.class) == null)   this.sendFileItem.setEnabled(false);
  if (!contactPhoneUtil.isCallEnabled()) {
    this.callItem.setEnabled(false);
  }
  if (!contactPhoneUtil.isVideoCallEnabled()) {
    this.videoCallItem.setEnabled(false);
  }
  if (!contactPhoneUtil.isDesktopSharingEnabled()) {
    fullShareMenuItem.setEnabled(false);
    regionShareMenuItem.setEnabled(false);
  }
  if (metaContact.getDefaultContact(OperationSetBasicInstantMessaging.class) == null)   this.sendMessageItem.setEnabled(false);
}
