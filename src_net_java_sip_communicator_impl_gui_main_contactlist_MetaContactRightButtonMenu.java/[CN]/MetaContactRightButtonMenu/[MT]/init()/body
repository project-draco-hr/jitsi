{
  addContactItem.setText(GuiActivator.getResources().getI18NString("service.gui.ADD_CONTACT_TO") + " " + metaContact.getDisplayName());
  Iterator<MetaContactGroup> groups=GuiActivator.getContactListService().getRoot().getSubgroups();
  if (groups.hasNext()) {
    JLabel infoLabel=new JLabel(GuiActivator.getResources().getI18NString("service.gui.SELECT_GROUP"));
    infoLabel.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
    infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));
    this.moveToMenu.add(infoLabel);
    this.moveToMenu.addSeparator();
  }
  while (groups.hasNext()) {
    MetaContactGroup group=groups.next();
    JMenuItem menuItem=new JMenuItem(group.getGroupName());
    menuItem.setName(moveToPrefix + group.getMetaUID());
    menuItem.addActionListener(this);
    this.moveToMenu.add(menuItem);
  }
  Iterator<Contact> contacts=metaContact.getContacts();
  if (metaContact.getContactCount() > 1) {
    JMenuItem allItem=new JMenuItem(allContactsString);
    JMenuItem allItem1=new JMenuItem(allContactsString);
    allItem.addActionListener(this);
    allItem1.addActionListener(this);
    allItem.setName(removeContactPrefix + "allContacts");
    allItem1.setName(moveSubcontactPrefix + "allContacts");
    this.removeContactMenu.add(allItem);
    this.moveSubcontactMenu.add(allItem1);
    this.removeContactMenu.addSeparator();
    this.moveSubcontactMenu.addSeparator();
  }
  while (contacts.hasNext()) {
    Contact contact=contacts.next();
    ProtocolProviderService protocolProvider=contact.getProtocolProvider();
    String contactDisplayName=contact.getDisplayName();
    Icon protocolIcon=new ImageIcon(createContactStatusImage(contact));
    this.removeContactMenu.add(createMenuItem(contactDisplayName,removeContactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
    this.moveSubcontactMenu.add(createMenuItem(contactDisplayName,moveSubcontactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
    if (metaContact.getContactCount() > 1) {
      if (protocolProvider.getOperationSet(OperationSetBasicTelephony.class) != null && hasContactCapabilities(contact,OperationSetBasicTelephony.class)) {
        callContactMenu.add(createMenuItem(contactDisplayName,callContactPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
      if (protocolProvider.getOperationSet(OperationSetVideoTelephony.class) != null && hasContactCapabilities(contact,OperationSetVideoTelephony.class)) {
        videoCallMenu.add(createMenuItem(contactDisplayName,videoCallPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
      if (protocolProvider.getOperationSet(OperationSetDesktopSharingServer.class) != null && hasContactCapabilities(contact,OperationSetDesktopSharingServer.class)) {
        desktopSharingMenu.add(createMenuItem(contactDisplayName,desktopSharingPrefix + contact.getAddress() + protocolProvider.getProtocolName(),protocolIcon));
      }
    }
  }
  this.add(sendMessageItem);
  this.add(sendSmsItem);
  if (callContactMenu.getItemCount() > 1) {
    this.add(callContactMenu);
  }
 else {
    this.add(callItem);
    this.callItem.setName("call");
    this.callItem.addActionListener(this);
  }
  if (videoCallMenu.getItemCount() > 1) {
    this.add(videoCallMenu);
  }
 else {
    this.add(videoCallItem);
    this.videoCallItem.setName("videoCall");
    this.videoCallItem.addActionListener(this);
  }
  if (desktopSharingMenu.getItemCount() > 1) {
    this.add(desktopSharingMenu);
  }
 else {
    this.add(desktopSharingItem);
    this.desktopSharingItem.setName("desktopSharing");
    this.desktopSharingItem.addActionListener(this);
  }
  this.add(sendFileItem);
  this.addSeparator();
  this.add(moveToMenu);
  this.add(moveSubcontactMenu);
  this.addSeparator();
  this.add(addContactItem);
  this.addSeparator();
  this.add(removeContactMenu);
  this.add(renameContactItem);
  this.addSeparator();
  this.add(viewHistoryItem);
  this.initPluginComponents();
  this.sendMessageItem.setName("sendMessage");
  this.sendSmsItem.setName("sendSms");
  this.sendFileItem.setName("sendFile");
  this.moveToMenu.setName("moveToGroup");
  this.addContactItem.setName("addContact");
  this.renameContactItem.setName("renameContact");
  this.viewHistoryItem.setName("viewHistory");
  this.sendMessageItem.addActionListener(this);
  this.sendSmsItem.addActionListener(this);
  this.sendFileItem.addActionListener(this);
  this.renameContactItem.addActionListener(this);
  this.viewHistoryItem.addActionListener(this);
  this.addContactItem.addActionListener(this);
  if (metaContact.getDefaultContact(OperationSetFileTransfer.class) == null)   this.sendFileItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetBasicTelephony.class) == null)   this.callItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetVideoTelephony.class) == null)   this.videoCallItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetDesktopSharingServer.class) == null)   this.desktopSharingItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetBasicInstantMessaging.class) == null)   this.sendMessageItem.setEnabled(false);
  if (metaContact.getDefaultContact(OperationSetSmsMessaging.class) == null)   this.sendSmsItem.setEnabled(false);
}
