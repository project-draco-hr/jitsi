{
  if (text == null)   return null;
  final Stack<ControlChar> formatting=new Stack<ControlChar>();
  final StringBuilder builder=new StringBuilder();
  for (int i=0; i < text.length(); i++) {
    char val=text.charAt(i);
    ControlChar control=ControlChar.byCode(val);
    if (control != null) {
switch (control) {
case ITALICS:
case UNDERLINE:
case BOLD:
        if (formatting.size() > 0 && formatting.peek() == control) {
          formatting.pop();
          builder.append(control.getHtmlEnd());
        }
 else {
          formatting.push(control);
          builder.append(control.getHtmlStart());
        }
      break;
case NORMAL:
    while (formatting.size() > 0) {
      ControlChar c=formatting.pop();
      builder.append(c.getHtmlEnd());
    }
  break;
case COLOR:
if (formatting.size() > 0 && formatting.peek() == control) {
  formatting.pop();
  builder.append(control.getHtmlEnd());
}
 else {
  final List<String> adds=new LinkedList<String>();
  try {
    final Color foreground=parseForegroundColor(text.substring(i + 1));
    adds.add("color=\"" + foreground.getHtml() + "\"");
    i+=2;
    final Color background=parseBackgroundColor(text.substring(i + 1));
    adds.add("bgcolor=\"" + background.getHtml() + "\"");
    i+=3;
  }
 catch (  IllegalArgumentException e) {
    LOGGER.trace("Invalid color code.",e);
  }
  formatting.push(control);
  String htmlTag=control.getHtmlStart(adds.toArray(new String[adds.size()]));
  builder.append(htmlTag);
}
break;
default :
LOGGER.warn("Unsupported IRC control code encountered: " + control);
break;
}
}
 else {
builder.append(val);
}
}
while (formatting.size() > 0) {
builder.append(formatting.pop().getHtmlEnd());
}
return builder.toString();
}
