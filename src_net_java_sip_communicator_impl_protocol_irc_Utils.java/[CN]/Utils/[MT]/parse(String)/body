{
  if (text == null)   return null;
  FormattedTextBuilder builder=new FormattedTextBuilder();
  for (int i=0; i < text.length(); i++) {
    char val=text.charAt(i);
switch (val) {
case '\u0002':
      if (builder.isActive(ControlChar.Bold.class)) {
        builder.cancel(ControlChar.Bold.class,true);
      }
 else {
        builder.apply(new ControlChar.Bold());
      }
    break;
case '\u0016':
  if (builder.isActive(ControlChar.Italics.class)) {
    builder.cancel(ControlChar.Italics.class,true);
  }
 else {
    builder.apply(new ControlChar.Italics());
  }
break;
case '\u001F':
if (builder.isActive(ControlChar.Underline.class)) {
builder.cancel(ControlChar.Underline.class,true);
}
 else {
builder.apply(new ControlChar.Underline());
}
break;
case '\u0003':
Color foreground=null;
Color background=null;
try {
foreground=parseForegroundColor(text.substring(i + 1));
i+=2;
background=parseBackgroundColor(text.substring(i + 1));
i+=3;
}
 catch (IllegalArgumentException e) {
LOGGER.debug("Invalid color code: " + text.substring(i + 1),e);
}
catch (ArrayIndexOutOfBoundsException e) {
LOGGER.debug("Unknown color code referenced: " + text.substring(i + 1),e);
}
if (foreground == null && background == null) {
builder.cancel(ControlChar.ColorFormat.class,false);
}
 else {
builder.apply(new ControlChar.ColorFormat(foreground,background));
}
break;
case '\u000F':
builder.cancelAll();
break;
default :
builder.append(val);
break;
}
}
return builder.done();
}
