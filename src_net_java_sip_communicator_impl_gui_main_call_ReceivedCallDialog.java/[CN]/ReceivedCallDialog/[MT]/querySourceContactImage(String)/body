{
  Pattern filterPattern=Pattern.compile("^" + Pattern.quote(peerString) + "$",Pattern.UNICODE_CASE);
  Iterator<ExternalContactSource> contactSources=TreeContactList.getContactSources().iterator();
  final Vector<ContactQuery> loadedQueries=new Vector<ContactQuery>();
  while (contactSources.hasNext()) {
    if (imageSeachCanceled)     return;
    final ExternalContactSource contactSource=contactSources.next();
    if (contactSource instanceof ExtendedContactSourceService) {
      ContactQuery query=((ExtendedContactSourceService)contactSource).queryContactSource(filterPattern);
      loadedQueries.add(query);
      List<SourceContact> results=query.getQueryResults();
      if (results != null && !results.isEmpty()) {
        Iterator<SourceContact> resultsIter=results.iterator();
        while (resultsIter.hasNext()) {
          byte[] image=resultsIter.next().getImage();
          if (image != null && image.length > 0) {
            setCallImage(image);
            cancelImageQueries(loadedQueries);
            return;
          }
        }
      }
      query.addContactQueryListener(new ContactQueryListener(){
        public void queryStatusChanged(        ContactQueryStatusEvent event){
        }
        public void contactReceived(        ContactReceivedEvent event){
          SourceContact sourceContact=event.getContact();
          byte[] image=sourceContact.getImage();
          if (image != null && image.length > 0) {
            setCallImage(image);
            cancelImageQueries(loadedQueries);
            imageSeachCanceled=true;
          }
        }
      }
);
    }
  }
}
