{
  if (logger.isInfoEnabled())   logger.info("creating outgoing call...");
  if (protocolProvider.getConnection() == null || call == null) {
    throw new OperationFailedException("Failed to create OutgoingJingleSession." + " We don't have a valid XMPPConnection.",OperationFailedException.INTERNAL_ERROR);
  }
  String fullCalleeURI=null;
  DiscoverInfo di=null;
  int bestPriority=-1;
  Iterator<Presence> it=getProtocolProvider().getConnection().getRoster().getPresences(calleeAddress);
  while (it.hasNext()) {
    Presence presence=it.next();
    String calleeURI=presence.getFrom();
    int priority=(presence.getPriority() == Integer.MIN_VALUE) ? 0 : presence.getPriority();
    try {
      DiscoverInfo discoverInfo=protocolProvider.getDiscoveryManager().discoverInfo(calleeURI);
      if (discoverInfo.containsFeature(ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE)) {
        if (priority > bestPriority) {
          bestPriority=priority;
          di=discoverInfo;
          fullCalleeURI=calleeURI;
        }
      }
    }
 catch (    XMPPException ex) {
      logger.warn("could not retrieve info for " + fullCalleeURI,ex);
    }
  }
  if (di != null) {
    if (logger.isInfoEnabled())     logger.info(calleeAddress + ": jingle supported ");
  }
 else {
    if (logger.isInfoEnabled())     logger.info(calleeAddress + ": jingle not supported ?");
    throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + calleeAddress + " does not support jingle",OperationFailedException.INTERNAL_ERROR);
  }
  if (logger.isInfoEnabled()) {
    logger.info("Choose one is: " + fullCalleeURI + " "+ bestPriority);
  }
  CallPeerJabberImpl peer=null;
  try {
    peer=call.initiateSession(fullCalleeURI,di,sessionInitiateExtensions);
  }
 catch (  Throwable t) {
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
    throw new OperationFailedException("Failed to create a call",OperationFailedException.INTERNAL_ERROR,t);
  }
  return peer;
}
