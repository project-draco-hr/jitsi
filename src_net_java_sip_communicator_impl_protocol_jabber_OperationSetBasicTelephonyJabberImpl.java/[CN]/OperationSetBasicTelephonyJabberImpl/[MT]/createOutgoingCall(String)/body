{
  OutgoingJingleSession outJS;
  logger.info("creating outgoing call...");
  if (protocolProvider.getConnection() == null) {
    throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + "we don't have a valid XMPPConnection.",OperationFailedException.INTERNAL_ERROR);
  }
  String fullCalleeURI=null;
  if (calleeAddress.indexOf('/') > 0) {
    fullCalleeURI=calleeAddress;
  }
 else {
    fullCalleeURI=protocolProvider.getConnection().getRoster().getPresence(calleeAddress).getFrom();
  }
  if (fullCalleeURI.indexOf('/') < 0) {
    throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + "User " + calleeAddress + " is unknown to us.",OperationFailedException.INTERNAL_ERROR);
  }
  try {
    DiscoverInfo di=ServiceDiscoveryManager.getInstanceFor(protocolProvider.getConnection()).discoverInfo(fullCalleeURI);
    if (di.containsFeature("http://www.xmpp.org/extensions/xep-0166.html#ns")) {
      logger.info(fullCalleeURI + ": jingle supported ");
    }
 else {
      logger.info(calleeAddress + ": jingle not supported ??? ");
    }
  }
 catch (  XMPPException ex) {
    logger.warn("could not retrieve info for " + fullCalleeURI,ex);
  }
  try {
    outJS=jingleManager.createOutgoingJingleSession(fullCalleeURI);
  }
 catch (  XMPPException ex) {
    throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + "This is most probably a network connection error.",OperationFailedException.INTERNAL_ERROR,ex);
  }
  CallJabberImpl call=new CallJabberImpl(protocolProvider);
  CallPeerJabberImpl callParticipant=new CallPeerJabberImpl(calleeAddress,call);
  callParticipant.setJingleSession(outJS);
  callParticipant.setState(CallParticipantState.INITIATING_CALL);
  fireCallEvent(CallEvent.CALL_INITIATED,call);
  activeCallsRepository.addCall(call);
  outJS.start();
  return (CallJabberImpl)callParticipant.getCall();
}
