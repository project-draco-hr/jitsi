{
  if (logger.isInfoEnabled())   logger.info("creating outgoing call...");
  if (protocolProvider.getConnection() == null) {
    throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + "we don't have a valid XMPPConnection.",OperationFailedException.INTERNAL_ERROR);
  }
  String fullCalleeURI=null;
  if (calleeAddress.indexOf('/') > 0) {
    fullCalleeURI=calleeAddress;
  }
 else {
    fullCalleeURI=protocolProvider.getConnection().getRoster().getPresence(calleeAddress).getFrom();
  }
  DiscoverInfo di=null;
  try {
    di=protocolProvider.getDiscoveryManager().discoverInfo(fullCalleeURI);
    if (di.containsFeature(ProtocolProviderServiceJabberImpl.URN_XMPP_JINGLE)) {
      if (logger.isInfoEnabled())       logger.info(fullCalleeURI + ": jingle supported ");
    }
 else {
      if (logger.isInfoEnabled())       logger.info(calleeAddress + ": jingle not supported ??? ");
      throw new OperationFailedException("Failed to create OutgoingJingleSession.\n" + fullCalleeURI + " does not support jingle",OperationFailedException.INTERNAL_ERROR);
    }
  }
 catch (  XMPPException ex) {
    logger.warn("could not retrieve info for " + fullCalleeURI,ex);
  }
  CallJabberImpl call=new CallJabberImpl(this);
  try {
    call.initiateSession(fullCalleeURI,di);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new OperationFailedException("Failed to create a call",OperationFailedException.INTERNAL_ERROR,t);
  }
  return call;
}
