{
  if (!(packet instanceof JingleIQ) && !(packet instanceof SessionIQ)) {
    String packetID=packet.getPacketID();
    AbstractCallPeer<?,?> callPeer=activeCallsRepository.findCallPeerBySessInitPacketID(packetID);
    if (callPeer == null) {
      callPeer=activeGTalkCallsRepository.findCallPeerBySessInitPacketID(packetID);
    }
    if (callPeer != null) {
      XMPPError error=packet.getError();
      if (error != null) {
        String errorMessage=error.getMessage();
        logger.error("Received an error: code=" + error.getCode() + " message="+ errorMessage);
        String message;
        if (errorMessage == null) {
          Roster roster=getProtocolProvider().getConnection().getRoster();
          String packetFrom=packet.getFrom();
          message="Service unavailable";
          if (!roster.contains(packetFrom)) {
            message+=": try adding the contact " + packetFrom + " to your contact list first.";
          }
        }
 else         message=errorMessage;
        callPeer.setState(CallPeerState.FAILED,message);
      }
    }
    return false;
  }
  if (packet instanceof JingleIQ) {
    JingleIQ jingleIQ=(JingleIQ)packet;
    if (jingleIQ.getAction() == JingleAction.SESSION_INITIATE) {
      return jingleIQ.containsContentChildOfType(RtpDescriptionPacketExtension.class);
    }
    String sid=jingleIQ.getSID();
    return (activeCallsRepository.findSID(sid) != null);
  }
 else   if (packet instanceof SessionIQ) {
    SessionIQ sessionIQ=(SessionIQ)packet;
    if (sessionIQ.getGTalkType() == GTalkType.INITIATE) {
      return true;
    }
 else {
      String sid=sessionIQ.getID();
      return (activeGTalkCallsRepository.findSID(sid) != null);
    }
  }
  return false;
}
