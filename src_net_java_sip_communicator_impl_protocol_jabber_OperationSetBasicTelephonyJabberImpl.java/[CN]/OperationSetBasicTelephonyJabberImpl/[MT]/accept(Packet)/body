{
  String sid=null;
  if (!(packet instanceof JingleIQ) && !(packet instanceof SessionIQ)) {
    AbstractCallPeer<?,?> callPeer=activeCallsRepository.findCallPeerBySessInitPacketID(packet.getPacketID());
    if (callPeer == null) {
      callPeer=activeGTalkCallsRepository.findCallPeerBySessInitPacketID(packet.getPacketID());
    }
    if (callPeer != null) {
      XMPPError error=packet.getError();
      if (error != null) {
        logger.error("Received an error: code=" + error.getCode() + " message="+ error.getMessage());
        String message="Service unavailable";
        Roster roster=getProtocolProvider().getConnection().getRoster();
        if (!roster.contains(packet.getFrom())) {
          message+=": try adding the contact to your contact " + "list first.";
        }
        if (error.getMessage() != null)         message=error.getMessage();
        callPeer.setState(CallPeerState.FAILED,message);
      }
    }
    return false;
  }
  if (packet instanceof JingleIQ) {
    JingleIQ jingleIQ=(JingleIQ)packet;
    if (jingleIQ.getAction() == JingleAction.SESSION_INITIATE) {
      return jingleIQ.containsContentChildOfType(RtpDescriptionPacketExtension.class);
    }
    sid=jingleIQ.getSID();
    return (activeCallsRepository.findSID(sid) != null);
  }
 else   if (packet instanceof SessionIQ) {
    SessionIQ sessionIQ=(SessionIQ)packet;
    if (sessionIQ.getGTalkType() == GTalkType.INITIATE) {
      return true;
    }
    sid=sessionIQ.getID();
    return (activeGTalkCallsRepository.findSID(sid) != null);
  }
  return false;
}
