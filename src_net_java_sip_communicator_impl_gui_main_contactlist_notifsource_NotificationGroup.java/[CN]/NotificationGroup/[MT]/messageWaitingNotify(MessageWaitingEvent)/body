{
  Iterator<NotificationMessage> messages=event.getMessages();
  if (messages != null) {
    Hashtable<String,NotificationContact> contactToRemove=(Hashtable<String,NotificationContact>)contacts.clone();
    while (messages.hasNext()) {
      NotificationMessage message=messages.next();
      if (message.getMessageGroup().equals(groupName)) {
        String messageIdentifier=message.getFromContact() + message.getMessageDetails();
        contactToRemove.remove(messageIdentifier);
      }
    }
    TreeContactList contactList=GuiActivator.getContactList();
    for (    NotificationContact c : contactToRemove.values()) {
      contactList.removeContact(c);
    }
    messages=event.getMessages();
    while (messages.hasNext()) {
      NotificationMessage message=messages.next();
      if (message.getMessageGroup().equals(groupName)) {
        String messageIdentifier=message.getFromContact() + message.getMessageDetails();
        NotificationContact contact=contacts.get(messageIdentifier);
        boolean isNew=false;
        if (contact == null) {
          contact=new NotificationContact(this,event.getSourceProvider(),event.getMessageType(),message);
          contacts.put(messageIdentifier,contact);
          isNew=true;
        }
        contact.setMessageAccount(event.getAccount());
        addNotificationContact(contact,isNew);
      }
    }
  }
 else {
    ProtocolProviderService protocolProvider=event.getSourceProvider();
    NotificationContact contact=contacts.get(protocolProvider.toString());
    boolean isNew=false;
    if (contact == null) {
      contact=new NotificationContact(this,protocolProvider,event.getMessageType(),null);
      contacts.put(protocolProvider.toString(),contact);
      isNew=true;
    }
    contact.setMessageAccount(event.getAccount());
    contact.setUnreadMessageCount(event.getUnreadMessages());
    contact.setReadMessageCount(event.getReadMessages());
    addNotificationContact(contact,isNew);
  }
}
