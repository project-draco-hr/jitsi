{
  String content=null;
  try {
    Request req=requestEvent.getRequest();
    if (req.getHeader(SMS_RECEIVED_MESSAGE_HEADER) == null)     return true;
    content=new String(req.getRawContent(),getCharset(req));
  }
 catch (  UnsupportedEncodingException ex) {
    logger.debug("failed to convert the message charset");
    content=new String(requestEvent.getRequest().getRawContent());
  }
  FromHeader fromHeader=(FromHeader)requestEvent.getRequest().getHeader(FromHeader.NAME);
  if (fromHeader == null) {
    logger.error("received a request without a from header");
    return false;
  }
  Contact from=resolveContact(fromHeader.getAddress().getURI().toString());
  Message newMessage=createMessage(content);
  if (from == null) {
    logger.debug("received a message from an unknown contact: " + fromHeader.getAddress().getURI().toString());
    from=opSetPersPresence.createVolatileContact(fromHeader.getAddress().getURI().toString().substring(4));
  }
  try {
    Response ok=sipProvider.getMessageFactory().createResponse(Response.OK,requestEvent.getRequest());
    SipProvider jainSipProvider=(SipProvider)requestEvent.getSource();
    jainSipProvider.getNewServerTransaction(requestEvent.getRequest()).sendResponse(ok);
  }
 catch (  ParseException exc) {
    logger.error("failed to build the response",exc);
  }
catch (  SipException exc) {
    logger.error("failed to send the response : " + exc.getMessage(),exc);
  }
catch (  InvalidArgumentException exc) {
    logger.debug("Invalid argument for createResponse : " + exc.getMessage(),exc);
  }
  MessageReceivedEvent msgReceivedEvt=new MessageReceivedEvent(newMessage,from,new Date(),MessageReceivedEvent.SMS_MESSAGE_RECEIVED);
  fireMessageEvent(msgReceivedEvt);
  return false;
}
