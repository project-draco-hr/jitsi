{
  if (this.presenceEnabled == false)   return false;
  ClientTransaction clientTransaction=responseEvent.getClientTransaction();
  Response response=responseEvent.getResponse();
  CSeqHeader cseq=(CSeqHeader)response.getHeader(CSeqHeader.NAME);
  if (cseq == null) {
    logger.error("An incoming response did not contain a CSeq header");
    return false;
  }
  String method=cseq.getMethod();
  boolean processed=false;
  if (method.equals(Request.PUBLISH)) {
    if (response.getStatusCode() != Response.UNAUTHORIZED && response.getStatusCode() != Response.PROXY_AUTHENTICATION_REQUIRED && response.getStatusCode() != Response.INTERVAL_TOO_BRIEF) {
synchronized (this.waitedCallIds) {
        this.waitedCallIds.remove(((CallIdHeader)response.getHeader(CallIdHeader.NAME)).getCallId());
      }
    }
    if (response.getStatusCode() == Response.OK) {
      SIPETagHeader etHeader=(SIPETagHeader)response.getHeader(SIPETagHeader.NAME);
      if (etHeader == null) {
        if (logger.isDebugEnabled())         logger.debug("can't find the ETag header");
        return false;
      }
      this.distantPAET=etHeader.getETag();
      ExpiresHeader expires=(ExpiresHeader)response.getHeader(ExpiresHeader.NAME);
      if (expires == null) {
        logger.error("no Expires header in the response");
        return false;
      }
      if (expires.getExpires() == 0) {
        this.distantPAET=null;
        return true;
      }
      if (this.republishTask != null)       this.republishTask.cancel();
      this.republishTask=new RePublishTask();
      int republishDelay=expires.getExpires();
      if (republishDelay >= (2 * REFRESH_MARGIN))       republishDelay-=REFRESH_MARGIN;
      timer.schedule(this.republishTask,republishDelay * 1000);
    }
 else     if (response.getStatusCode() == Response.UNAUTHORIZED || response.getStatusCode() == Response.PROXY_AUTHENTICATION_REQUIRED) {
      try {
        processAuthenticationChallenge(clientTransaction,response,(SipProvider)responseEvent.getSource());
      }
 catch (      OperationFailedException e) {
        logger.error("can't handle the challenge",e);
        return false;
      }
    }
 else     if (response.getStatusCode() == Response.INTERVAL_TOO_BRIEF) {
      MinExpiresHeader min=(MinExpiresHeader)response.getHeader(MinExpiresHeader.NAME);
      if (min == null) {
        logger.error("can't find a min expires header in the 423" + " error message");
        return false;
      }
      Request req=null;
      try {
        req=createPublish(min.getExpires(),true);
      }
 catch (      OperationFailedException e) {
        logger.error("can't create the new publish request",e);
        return false;
      }
      ClientTransaction transac=null;
      try {
        transac=this.parentProvider.getDefaultJainSipProvider().getNewClientTransaction(req);
      }
 catch (      TransactionUnavailableException e) {
        logger.error("can't create the client transaction",e);
        return false;
      }
      try {
        transac.sendRequest();
      }
 catch (      SipException e) {
        logger.error("can't send the PUBLISH request",e);
        return false;
      }
    }
 else     if (response.getStatusCode() == Response.CONDITIONAL_REQUEST_FAILED) {
      this.distantPAET=null;
      Request req=null;
      try {
        req=createPublish(this.subscriptionDuration,true);
      }
 catch (      OperationFailedException e) {
        logger.error("can't create the new publish request",e);
        return false;
      }
      ClientTransaction transac=null;
      try {
        transac=this.parentProvider.getDefaultJainSipProvider().getNewClientTransaction(req);
      }
 catch (      TransactionUnavailableException e) {
        logger.error("can't create the client transaction",e);
        return false;
      }
      try {
        transac.sendRequest();
      }
 catch (      SipException e) {
        logger.error("can't send the PUBLISH request",e);
        return false;
      }
    }
 else {
      if (logger.isDebugEnabled())       logger.debug("error received from the network" + response);
      this.distantPAET=null;
      if (this.useDistantPA) {
        if (logger.isDebugEnabled())         logger.debug("we enter into the peer-to-peer mode" + " as the distant PA mode fails");
        setUseDistantPA(false);
      }
    }
    processed=true;
  }
  return processed;
}
