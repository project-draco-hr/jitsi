{
  Document doc=convertDocument(presenceDoc);
  if (doc == null)   return;
  if (logger.isDebugEnabled())   logger.debug("parsing:\n" + presenceDoc);
  NodeList presList=doc.getElementsByTagNameNS(NS_VALUE,PRESENCE_ELEMENT);
  if (presList.getLength() == 0) {
    presList=doc.getElementsByTagNameNS(ANY_NS,PRESENCE_ELEMENT);
    if (presList.getLength() == 0) {
      logger.error("no presence element in this document");
      return;
    }
  }
  if (presList.getLength() > 1) {
    logger.warn("more than one presence element in this document");
  }
  Node presNode=presList.item(0);
  if (presNode.getNodeType() != Node.ELEMENT_NODE) {
    logger.error("the presence node is not an element");
    return;
  }
  Element presence=(Element)presNode;
  PresenceStatus personStatus=null;
  URI personStatusIcon=null;
  NodeList personList=presence.getElementsByTagNameNS(ANY_NS,PERSON_ELEMENT);
  if (personList.getLength() > 0) {
    Node personNode=personList.item(0);
    if (personNode.getNodeType() != Node.ELEMENT_NODE) {
      logger.error("the person node is not an element");
      return;
    }
    Element person=(Element)personNode;
    NodeList activityList=person.getElementsByTagNameNS(ANY_NS,ACTIVITY_ELEMENT);
    if (activityList.getLength() > 0) {
      Element activity=null;
      for (int i=0; i < activityList.getLength(); i++) {
        Node activityNode=activityList.item(i);
        if (activityNode.getNodeType() != Node.ELEMENT_NODE)         continue;
        activity=(Element)activityNode;
        NodeList statusList=activity.getChildNodes();
        for (int j=0; j < statusList.getLength(); j++) {
          Node statusNode=statusList.item(j);
          if (statusNode.getNodeType() == Node.ELEMENT_NODE) {
            String statusname=statusNode.getLocalName();
            if (statusname.equals(AWAY_ELEMENT)) {
              personStatus=sipStatusEnum.getStatus(SipStatusEnum.AWAY);
              break;
            }
 else             if (statusname.equals(BUSY_ELEMENT)) {
              personStatus=sipStatusEnum.getStatus(SipStatusEnum.BUSY);
              break;
            }
 else             if (statusname.equals(OTP_ELEMENT)) {
              personStatus=sipStatusEnum.getStatus(SipStatusEnum.ON_THE_PHONE);
              break;
            }
          }
        }
        if (personStatus != null)         break;
      }
    }
    NodeList statusIconList=person.getElementsByTagNameNS(ANY_NS,STATUS_ICON_ELEMENT);
    if (statusIconList.getLength() > 0) {
      Element statusIcon;
      Node statusIconNode=statusIconList.item(0);
      if (statusIconNode.getNodeType() == Node.ELEMENT_NODE) {
        statusIcon=(Element)statusIconNode;
        String content=getTextContent(statusIcon);
        if (content != null && content.trim().length() != 0) {
          try {
            personStatusIcon=URI.create(content);
          }
 catch (          IllegalArgumentException ex) {
            logger.error("Person's status icon uri: " + content + " is invalid");
          }
        }
      }
    }
  }
  if (personStatusIcon != null) {
    String contactID=XMLUtils.getAttribute(presNode,ENTITY_ATTRIBUTE);
    if (contactID.startsWith("pres:")) {
      contactID=contactID.substring("pres:".length());
    }
    Contact contact=resolveContactID(contactID);
    updateContactIcon((ContactSipImpl)contact,personStatusIcon);
  }
  List<Object[]> newPresenceStates=new Vector<Object[]>(3,2);
  NodeList tupleList=getPidfChilds(presence,TUPLE_ELEMENT);
  for (int i=0; i < tupleList.getLength(); i++) {
    Node tupleNode=tupleList.item(i);
    if (tupleNode.getNodeType() != Node.ELEMENT_NODE)     continue;
    Element tuple=(Element)tupleNode;
    NodeList contactList=getPidfChilds(tuple,CONTACT_ELEMENT);
    List<Object[]> sipcontact=new Vector<Object[]>(1,3);
    String contactID=null;
    if (contactList.getLength() == 0) {
      contactID=XMLUtils.getAttribute(presNode,ENTITY_ATTRIBUTE);
      if (contactID.startsWith("pres:")) {
        contactID=contactID.substring("pres:".length());
      }
      Contact tmpContact=resolveContactID(contactID);
      if (tmpContact != null) {
        sipcontact.add(new Object[]{tmpContact,new Float(0f)});
      }
    }
 else {
      for (int j=0; j < contactList.getLength(); j++) {
        Node contactNode=contactList.item(j);
        if (contactNode.getNodeType() != Node.ELEMENT_NODE)         continue;
        Element contact=(Element)contactNode;
        contactID=getTextContent(contact);
        if (contactID.startsWith("pres:")) {
          contactID=contactID.substring("pres:".length());
        }
        Contact tmpContact=resolveContactID(contactID);
        if (tmpContact == null)         continue;
        Object tab[]=new Object[2];
        String prioStr=contact.getAttribute(PRIORITY_ATTRIBUTE);
        Float prio=null;
        try {
          if (prioStr == null || prioStr.length() == 0) {
            prio=new Float(0f);
          }
 else {
            prio=Float.valueOf(prioStr);
          }
        }
 catch (        NumberFormatException e) {
          if (logger.isDebugEnabled())           logger.debug("contact priority is not a valid float",e);
          prio=new Float(0f);
        }
        if (prio.floatValue() < 0) {
          prio=new Float(0f);
        }
        if (prio.floatValue() > 1) {
          prio=new Float(1f);
        }
        tab[0]=tmpContact;
        tab[1]=prio;
        boolean contactAlreadyListed=false;
        for (int k=0; k < sipcontact.size(); k++) {
          Object[] tmp=sipcontact.get(k);
          if (((Contact)tmp[0]).equals(tmpContact)) {
            contactAlreadyListed=true;
            if (((Float)tmp[1]).floatValue() < prio.floatValue()) {
              sipcontact.remove(k);
              sipcontact.add(tab);
            }
            break;
          }
        }
        if (!contactAlreadyListed) {
          sipcontact.add(tab);
        }
      }
    }
    if (sipcontact.isEmpty()) {
      if (logger.isDebugEnabled())       logger.debug("no contact found for id: " + contactID);
      continue;
    }
    if (personStatus != null) {
      newPresenceStates=setStatusForContacts(personStatus,sipcontact,newPresenceStates);
      continue;
    }
    NodeList statusList=getPidfChilds(tuple,STATUS_ELEMENT);
    int index=statusList.getLength() - 1;
    Node statusNode=null;
    do {
      Node temp=statusList.item(index);
      if (temp.getNodeType() == Node.ELEMENT_NODE) {
        statusNode=temp;
        break;
      }
      index--;
    }
 while (index >= 0);
    Element basic=null;
    if (statusNode == null) {
      if (logger.isDebugEnabled())       logger.debug("no valid status in this tuple");
    }
 else {
      Element status=(Element)statusNode;
      NodeList basicList=getPidfChilds(status,BASIC_ELEMENT);
      index=basicList.getLength() - 1;
      Node basicNode=null;
      do {
        Node temp=basicList.item(index);
        if (temp.getNodeType() == Node.ELEMENT_NODE) {
          basicNode=temp;
          break;
        }
        index--;
      }
 while (index >= 0);
      if (basicNode == null) {
        if (logger.isDebugEnabled())         logger.debug("no valid <basic> in this status");
      }
 else {
        basic=(Element)basicNode;
      }
    }
    NodeList noteList=getPidfChilds(tuple,NOTE_ELEMENT);
    boolean changed=false;
    for (int k=0; k < noteList.getLength() && !changed; k++) {
      Node noteNode=noteList.item(k);
      if (noteNode.getNodeType() != Node.ELEMENT_NODE)       continue;
      Element note=(Element)noteNode;
      String state=getTextContent(note);
      Iterator<PresenceStatus> states=sipStatusEnum.getSupportedStatusSet();
      while (states.hasNext()) {
        PresenceStatus current=states.next();
        if (current.getStatusName().equalsIgnoreCase(state)) {
          changed=true;
          newPresenceStates=setStatusForContacts(current,sipcontact,newPresenceStates);
          break;
        }
      }
    }
    if (changed == false && basic != null) {
      if (getTextContent(basic).equalsIgnoreCase(ONLINE_STATUS)) {
        newPresenceStates=setStatusForContacts(sipStatusEnum.getStatus(SipStatusEnum.ONLINE),sipcontact,newPresenceStates);
      }
 else       if (getTextContent(basic).equalsIgnoreCase(OFFLINE_STATUS)) {
        newPresenceStates=setStatusForContacts(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE),sipcontact,newPresenceStates);
      }
    }
 else {
      if (changed == false) {
        if (logger.isDebugEnabled())         logger.debug("no suitable presence state found in this " + "tuple");
      }
    }
  }
  for (  Object[] tab : newPresenceStates) {
    ContactSipImpl contact=(ContactSipImpl)tab[0];
    PresenceStatus status=(PresenceStatus)tab[2];
    changePresenceStatusForContact(contact,status);
  }
}
