{
  Document doc=convertDocument(presenceDoc);
  if (doc == null) {
    return;
  }
  logger.debug("parsing:\n" + presenceDoc);
  NodeList presList=doc.getElementsByTagNameNS(NS_VALUE,PRESENCE_ELEMENT);
  if (presList.getLength() == 0) {
    logger.error("no presence element in this document");
    return;
  }
  if (presList.getLength() > 1) {
    logger.warn("more than one presence element in this document");
  }
  Node presNode=presList.item(0);
  if (presNode.getNodeType() != Node.ELEMENT_NODE) {
    logger.error("the presence node is not an element");
    return;
  }
  Element presence=(Element)presNode;
  SipStatusEnum personStatus=null;
  NodeList personList=presence.getElementsByTagNameNS(ANY_NS,PERSON_ELEMENT);
  if (personList.getLength() > 1) {
    logger.error("more than one person in this document");
    return;
  }
  if (personList.getLength() > 0) {
    Node personNode=personList.item(0);
    if (personNode.getNodeType() != Node.ELEMENT_NODE) {
      logger.error("the person node is not an element");
      return;
    }
    Element person=(Element)personNode;
    NodeList activityList=person.getElementsByTagNameNS(ANY_NS,ACTIVITY_ELEMENT);
    if (activityList.getLength() > 0) {
      Element activity=null;
      for (int i=0; i < activityList.getLength(); i++) {
        Node activityNode=activityList.item(i);
        if (activityNode.getNodeType() != Node.ELEMENT_NODE) {
          continue;
        }
        activity=(Element)activityNode;
        NodeList statusList=activity.getChildNodes();
        for (int j=0; j < statusList.getLength(); j++) {
          Node statusNode=statusList.item(j);
          if (statusNode.getNodeType() == Node.ELEMENT_NODE) {
            String statusname=statusNode.getLocalName();
            if (statusname.equals(AWAY_ELEMENT)) {
              personStatus=SipStatusEnum.AWAY;
              break;
            }
 else             if (statusname.equals(BUSY_ELEMENT)) {
              personStatus=SipStatusEnum.BUSY;
              break;
            }
 else             if (statusname.equals(OTP_ELEMENT)) {
              personStatus=SipStatusEnum.ON_THE_PHONE;
              break;
            }
          }
        }
        if (personStatus != null)         break;
      }
    }
  }
  NodeList tupleList=presence.getElementsByTagNameNS(NS_VALUE,TUPLE_ELEMENT);
  for (int i=0; i < tupleList.getLength(); i++) {
    Node tupleNode=tupleList.item(i);
    if (tupleNode.getNodeType() != Node.ELEMENT_NODE) {
      continue;
    }
    Element tuple=(Element)tupleNode;
    NodeList contactList=tuple.getElementsByTagNameNS(NS_VALUE,CONTACT_ELEMENT);
    Vector sipcontact=new Vector(1,3);
    String contactID=null;
    if (contactList.getLength() == 0) {
      contactID=XMLUtils.getAttribute(presNode,ENTITY_ATTRIBUTE);
      if (contactID.startsWith("pres:"))       contactID=contactID.substring("pres:".length());
      Contact tmpContact=resolveContactID(contactID);
      if (tmpContact != null) {
        sipcontact.add(tmpContact);
      }
    }
 else {
      for (int j=0; j < contactList.getLength(); j++) {
        Node contactNode=contactList.item(j);
        if (contactNode.getNodeType() != Node.ELEMENT_NODE) {
          continue;
        }
        Element contact=(Element)contactNode;
        contactID=getTextContent(contact);
        Contact tmpContact=resolveContactID(contactID);
        if (tmpContact != null) {
          sipcontact.add(tmpContact);
        }
      }
    }
    if (sipcontact.isEmpty()) {
      logger.debug("no contact found for id: " + contactID);
      continue;
    }
    if (personStatus != null) {
      for (int j=0; j < sipcontact.size(); j++) {
        changePresenceStatusForContact((ContactSipImpl)sipcontact.get(j),personStatus);
      }
      continue;
    }
    NodeList statusList=tuple.getElementsByTagNameNS(NS_VALUE,STATUS_ELEMENT);
    int index=statusList.getLength() - 1;
    Node statusNode=null;
    do {
      Node temp=statusList.item(index);
      if (temp.getNodeType() == Node.ELEMENT_NODE) {
        statusNode=temp;
        break;
      }
      index--;
    }
 while (index >= 0);
    Element basic=null;
    if (statusNode == null) {
      logger.debug("no valid status in this tuple");
    }
 else {
      Element status=(Element)statusNode;
      NodeList basicList=status.getElementsByTagNameNS(NS_VALUE,BASIC_ELEMENT);
      index=basicList.getLength() - 1;
      Node basicNode=null;
      do {
        Node temp=basicList.item(index);
        if (temp.getNodeType() == Node.ELEMENT_NODE) {
          basicNode=temp;
          break;
        }
        index--;
      }
 while (index >= 0);
      if (basicNode == null) {
        logger.debug("no valid <basic> in this status");
      }
 else {
        basic=(Element)basicNode;
      }
    }
    NodeList noteList=tuple.getElementsByTagNameNS(NS_VALUE,NOTE_ELEMENT);
    boolean changed=false;
    for (int k=0; k < noteList.getLength() && !changed; k++) {
      Node noteNode=noteList.item(k);
      if (noteNode.getNodeType() != Node.ELEMENT_NODE) {
        continue;
      }
      Element note=(Element)noteNode;
      String state=getTextContent(note);
      Iterator states=SipStatusEnum.supportedStatusSet();
      while (states.hasNext()) {
        SipStatusEnum current=(SipStatusEnum)states.next();
        if (current.getStatusName().equalsIgnoreCase(state)) {
          changed=true;
          for (int j=0; j < sipcontact.size(); j++) {
            changePresenceStatusForContact((ContactSipImpl)sipcontact.get(j),current);
          }
          break;
        }
      }
    }
    if (changed == false && basic != null) {
      if (getTextContent(basic).equalsIgnoreCase(ONLINE_STATUS)) {
        for (int j=0; j < sipcontact.size(); j++) {
          changePresenceStatusForContact((ContactSipImpl)sipcontact.get(j),SipStatusEnum.ONLINE);
        }
      }
 else       if (getTextContent(basic).equalsIgnoreCase(OFFLINE_STATUS)) {
        for (int j=0; j < sipcontact.size(); j++) {
          changePresenceStatusForContact((ContactSipImpl)sipcontact.get(j),SipStatusEnum.OFFLINE);
        }
      }
    }
 else {
      if (changed == false) {
        logger.debug("no suitable presence state found in this " + "tuple");
      }
    }
  }
}
