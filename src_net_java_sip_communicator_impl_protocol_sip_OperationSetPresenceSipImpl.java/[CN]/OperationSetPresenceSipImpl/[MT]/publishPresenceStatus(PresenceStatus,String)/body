{
  PresenceStatus oldStatus=this.presenceStatus;
  this.presenceStatus=status;
  String oldMessage=this.statusMessage;
  this.statusMessage=statusMsg;
  if (this.presenceEnabled == false || parentProvider.getRegistrarConnection() instanceof SipRegistrarlessConnection) {
    this.fireProviderStatusChangeEvent(oldStatus);
    this.fireProviderMsgStatusChangeEvent(oldMessage);
    return;
  }
  if (!status.equals(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE)))   assertConnected();
  if (this.useDistantPA) {
    Request req=null;
    if (status.equals(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE))) {
      req=createPublish(0,false);
synchronized (this.waitedCallIds) {
        this.waitedCallIds.add(((CallIdHeader)req.getHeader(CallIdHeader.NAME)).getCallId());
      }
    }
 else {
      req=createPublish(this.subscriptionDuration,true);
    }
    ClientTransaction transac=null;
    try {
      transac=this.parentProvider.getDefaultJainSipProvider().getNewClientTransaction(req);
    }
 catch (    TransactionUnavailableException e) {
      logger.error("can't create the client transaction",e);
      throw new OperationFailedException("can't create the client transaction",OperationFailedException.NETWORK_FAILURE);
    }
    try {
      transac.sendRequest();
    }
 catch (    SipException e) {
      logger.error("can't send the PUBLISH request",e);
      throw new OperationFailedException("can't send the PUBLISH request",OperationFailedException.NETWORK_FAILURE);
    }
  }
 else {
    String subscriptionState;
    String reason;
    if (status.equals(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE))) {
      subscriptionState=SubscriptionStateHeader.TERMINATED;
      reason=SubscriptionStateHeader.PROBATION;
    }
 else {
      subscriptionState=SubscriptionStateHeader.ACTIVE;
      reason=null;
    }
    notifier.notifyAll(subscriptionState,reason);
  }
  if (status.equals(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE)))   unsubscribeToAllContact();
  this.fireProviderStatusChangeEvent(oldStatus);
  this.fireProviderMsgStatusChangeEvent(oldMessage);
}
