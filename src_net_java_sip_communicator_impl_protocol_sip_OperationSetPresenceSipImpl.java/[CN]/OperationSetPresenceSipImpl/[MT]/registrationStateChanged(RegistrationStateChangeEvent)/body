{
  if (evt.getNewState().equals(RegistrationState.UNREGISTERING)) {
    cancelTimer();
    ssContactList.destroy();
    try {
      publishPresenceStatus(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE),"");
    }
 catch (    OperationFailedException e) {
      logger.error("can't set the offline mode",e);
    }
    stopEvents();
  }
 else   if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    if (logger.isDebugEnabled()) {
      logger.debug("enter registered state");
    }
    ssContactList.init();
    if ((presenceEnabled == false) || (pollingTask != null)) {
      return;
    }
    Iterator<ContactGroup> groupsIter=getServerStoredContactListRoot().subgroups();
    while (groupsIter.hasNext()) {
      ContactGroup group=groupsIter.next();
      Iterator<Contact> contactsIter=group.contacts();
      while (contactsIter.hasNext()) {
        ContactSipImpl contact=(ContactSipImpl)contactsIter.next();
        if (contact.isResolved()) {
          if (logger.isDebugEnabled())           logger.debug("contact " + contact + " already resolved");
          continue;
        }
        forcePollContact(contact);
      }
    }
    Iterator<Contact> rootContactsIter=getServerStoredContactListRoot().contacts();
    while (rootContactsIter.hasNext()) {
      ContactSipImpl contact=(ContactSipImpl)rootContactsIter.next();
      if (contact.isResolved()) {
        if (logger.isDebugEnabled())         logger.debug("contact " + contact + " already resolved");
        continue;
      }
      forcePollContact(contact);
    }
    pollingTask=new PollOfflineContactsTask();
    timer.schedule(pollingTask,pollingTaskPeriod,pollingTaskPeriod);
  }
 else   if (evt.getNewState() == RegistrationState.CONNECTION_FAILED) {
    Iterator<Contact> rootcontactsIter=getServerStoredContactListRoot().contacts();
    while (rootcontactsIter.hasNext()) {
      ContactSipImpl contact=(ContactSipImpl)rootcontactsIter.next();
      PresenceStatus oldContactStatus=contact.getPresenceStatus();
      contact.setResolved(false);
      if (subscriber != null)       try {
        subscriber.removeSubscription(getAddress(contact));
      }
 catch (      OperationFailedException ex) {
        if (logger.isDebugEnabled())         logger.debug("Failed to remove subscription to contact " + contact);
      }
      if (!oldContactStatus.isOnline())       continue;
      contact.setPresenceStatus(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));
      fireContactPresenceStatusChangeEvent(contact,contact.getParentContactGroup(),oldContactStatus);
    }
    Iterator<ContactGroup> groupsIter=getServerStoredContactListRoot().subgroups();
    while (groupsIter.hasNext()) {
      ContactGroup group=groupsIter.next();
      Iterator<Contact> contactsIter=group.contacts();
      while (contactsIter.hasNext()) {
        ContactSipImpl contact=(ContactSipImpl)contactsIter.next();
        PresenceStatus oldContactStatus=contact.getPresenceStatus();
        contact.setResolved(false);
        if (subscriber != null)         try {
          subscriber.removeSubscription(getAddress(contact));
        }
 catch (        OperationFailedException ex) {
          if (logger.isDebugEnabled())           logger.debug("Failed to remove subscription to contact " + contact);
        }
        if (!oldContactStatus.isOnline())         continue;
        contact.setPresenceStatus(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));
        fireContactPresenceStatusChangeEvent(contact,contact.getParentContactGroup(),oldContactStatus);
      }
    }
    cancelTimer();
    waitedCallIds.clear();
  }
}
