{
  if (evt.getNewState().equals(RegistrationState.UNREGISTERING)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Enter unregistering state");
    }
    cancelTimer();
    ssContactList.destroy();
    try {
      publishPresenceStatus(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE),"");
    }
 catch (    OperationFailedException e) {
      logger.error("can't set the offline mode",e);
    }
    stopEvents();
  }
 else   if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    if (logger.isDebugEnabled()) {
      logger.debug("enter registered state");
    }
    ssContactList.init();
    if ((!presenceEnabled) || (pollingTask != null)) {
      return;
    }
    for (    ContactSipImpl contact : ssContactList.getAllContacts(ssContactList.getRootGroup())) {
      forcePollContact(contact);
    }
    pollingTask=new PollOfflineContactsTask();
    timer.schedule(pollingTask,pollingTaskPeriod,pollingTaskPeriod);
    if (this.useDistantPA) {
      try {
        watcherInfoSubscriber.subscribe(new WatcherInfoSubscriberSubscription(parentProvider.getRegistrarConnection().getAddressOfRecord()));
      }
 catch (      OperationFailedException ex) {
        logger.error("Failed to create and send the subcription " + "for watcher info.",ex);
      }
    }
  }
 else   if (evt.getNewState().equals(RegistrationState.CONNECTION_FAILED) || evt.getNewState().equals(RegistrationState.AUTHENTICATION_FAILED)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Enter connction failed state");
    }
    ssContactList.destroy();
    for (    ContactSipImpl contact : ssContactList.getAllContacts(ssContactList.getRootGroup())) {
      PresenceStatus oldContactStatus=contact.getPresenceStatus();
      if (subscriber != null) {
        try {
          subscriber.removeSubscription(getAddress(contact));
        }
 catch (        OperationFailedException ex) {
          if (logger.isDebugEnabled()) {
            logger.debug("Failed to remove subscription to contact " + contact);
          }
        }
      }
      if (!oldContactStatus.isOnline()) {
        continue;
      }
      contact.setPresenceStatus(sipStatusEnum.getStatus(SipStatusEnum.OFFLINE));
      fireContactPresenceStatusChangeEvent(contact,contact.getParentContactGroup(),oldContactStatus);
    }
    if (this.useDistantPA) {
      try {
        watcherInfoSubscriber.removeSubscription(parentProvider.getRegistrarConnection().getAddressOfRecord());
      }
 catch (      Throwable ex) {
        logger.error("Failed to remove subscription " + "for watcher info.",ex);
      }
    }
    cancelTimer();
    waitedCallIds.clear();
    PresenceStatus oldStatus=this.presenceStatus;
    this.presenceStatus=sipStatusEnum.getStatus(SipStatusEnum.OFFLINE);
    this.fireProviderStatusChangeEvent(oldStatus);
  }
}
