{
  logger.debug("let's subscribe " + contactIdentifier);
  ContactSipImpl contact=(ContactSipImpl)resolveContactID(contactIdentifier);
  if (contact != null && contact.isPersistent()) {
    throw new OperationFailedException("Contact " + contactIdentifier + " already exists.",OperationFailedException.SUBSCRIPTION_ALREADY_EXISTS);
  }
 else   if (!contact.isPersistent()) {
    ContactGroupSipImpl oldParentGroup=(ContactGroupSipImpl)contact.getParentContactGroup();
    oldParentGroup.removeContact(contact);
    fireSubscriptionEvent(contact,oldParentGroup,SubscriptionEvent.SUBSCRIPTION_REMOVED);
  }
  Address contactAddress;
  try {
    contactAddress=parentProvider.parseAddressString(contactIdentifier);
  }
 catch (  ParseException exc) {
    throw new IllegalArgumentException(contactIdentifier + " is not a valid string.",exc);
  }
  contact=new ContactSipImpl(contactAddress,this.parentProvider);
  ((ContactGroupSipImpl)parentGroup).addContact(contact);
  fireSubscriptionEvent(contact,parentGroup,SubscriptionEvent.SUBSCRIPTION_CREATED);
  if (this.presenceEnabled == false)   return;
  assertConnected();
  Request subscription;
  try {
    subscription=createSubscription(contact,this.subscriptionDuration);
  }
 catch (  OperationFailedException ex) {
    logger.error("Failed to create the subcription",ex);
    throw new OperationFailedException("Failed to create the subscription",OperationFailedException.INTERNAL_ERROR);
  }
  ClientTransaction subscribeTransaction;
  SipProvider jainSipProvider=this.parentProvider.getDefaultJainSipProvider();
  try {
    subscribeTransaction=jainSipProvider.getNewClientTransaction(subscription);
  }
 catch (  TransactionUnavailableException ex) {
    logger.error("Failed to create subscriptionTransaction.\n" + "This is most probably a network connection error.",ex);
    throw new OperationFailedException("Failed to create the subscription transaction",OperationFailedException.NETWORK_FAILURE);
  }
  CallIdHeader idheader=(CallIdHeader)subscription.getHeader(CallIdHeader.NAME);
  this.subscribedContacts.put(idheader.getCallId(),contact);
  try {
    subscribeTransaction.sendRequest();
  }
 catch (  SipException ex) {
    logger.error("Failed to send the message.",ex);
    this.subscribedContacts.remove(idheader.getCallId());
    throw new OperationFailedException("Failed to send the subscription",OperationFailedException.NETWORK_FAILURE);
  }
}
