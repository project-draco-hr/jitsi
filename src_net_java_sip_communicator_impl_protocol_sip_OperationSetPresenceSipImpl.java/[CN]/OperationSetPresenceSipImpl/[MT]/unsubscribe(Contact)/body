{
  if (!(contact instanceof ContactSipImpl)) {
    throw new IllegalArgumentException("the contact is not a SIP" + " contact");
  }
  ContactSipImpl sipcontact=(ContactSipImpl)contact;
  if (this.useDistantPA) {
    Request req=createPublish(0);
    ClientTransaction transac=null;
    try {
      transac=this.parentProvider.getDefaultJainSipProvider().getNewClientTransaction(req);
    }
 catch (    TransactionUnavailableException e) {
      logger.debug("can't create the client transaction",e);
      throw new OperationFailedException("can't create the client transaction",OperationFailedException.NETWORK_FAILURE);
    }
    try {
      transac.sendRequest();
    }
 catch (    SipException e) {
      logger.debug("can't send the PUBLISH request");
      throw new OperationFailedException("can't send the PUBLISH request",OperationFailedException.NETWORK_FAILURE);
    }
    this.distantPAET=null;
    return;
  }
  Dialog dialog=sipcontact.getClientDialog();
  if (this.subscribedContacts.get(dialog.getCallId().getCallId()) == null) {
    throw new IllegalArgumentException("trying to unregister a not " + "registered contact");
  }
  if (!contact.getPresenceStatus().equals(SipStatusEnum.OFFLINE) && !contact.getPresenceStatus().equals(SipStatusEnum.UNKNOWN) && sipcontact.isResolvable()) {
    assertConnected();
    ClientTransaction transac=null;
    try {
      transac=createSubscription(0,dialog);
    }
 catch (    OperationFailedException e) {
      logger.debug("failed to create the unsubscription",e);
      throw e;
    }
    try {
      dialog.sendRequest(transac);
    }
 catch (    Exception e) {
      logger.debug("Can't send the request");
      throw new OperationFailedException("Failed to send the subscription message",OperationFailedException.NETWORK_FAILURE);
    }
  }
  terminateSubscription(sipcontact);
  this.subscribedContacts.remove(dialog.getCallId().getCallId());
  ((ContactGroupSipImpl)sipcontact.getParentContactGroup()).removeContact(sipcontact);
  fireSubscriptionEvent(sipcontact,sipcontact.getParentContactGroup(),SubscriptionEvent.SUBSCRIPTION_REMOVED);
}
