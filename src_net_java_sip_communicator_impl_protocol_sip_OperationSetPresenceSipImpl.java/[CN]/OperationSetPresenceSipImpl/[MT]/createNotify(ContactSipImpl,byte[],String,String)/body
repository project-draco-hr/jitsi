{
  Dialog dialog=contact.getServerDialog();
  if (dialog == null) {
    throw new OperationFailedException("the server dialog of the " + "contact is null",OperationFailedException.INTERNAL_ERROR);
  }
  Request req=null;
  try {
    req=dialog.createRequest(Request.NOTIFY);
  }
 catch (  SipException e) {
    logger.debug("Can't create the NOTIFY message");
    throw new OperationFailedException("Can't create the NOTIFY" + " message",OperationFailedException.INTERNAL_ERROR,e);
  }
  InetAddress destinationInetAddress=null;
  Address toAddress=dialog.getRemoteTarget();
  if (toAddress == null) {
    toAddress=dialog.getRemoteParty();
  }
  try {
    destinationInetAddress=InetAddress.getByName(((SipURI)toAddress.getURI()).getHost());
  }
 catch (  UnknownHostException ex) {
    throw new OperationFailedException(((SipURI)toAddress.getURI()).getHost() + " is not a valid internet address ",OperationFailedException.INTERNAL_ERROR,ex);
  }
  ArrayList viaHeaders=null;
  MaxForwardsHeader maxForwards=null;
  try {
    viaHeaders=this.parentProvider.getLocalViaHeaders(destinationInetAddress,this.parentProvider.getDefaultListeningPoint());
    maxForwards=this.parentProvider.getMaxForwardsHeader();
  }
 catch (  OperationFailedException e) {
    logger.debug("cant retrive the via headers or the max forward",e);
    throw new OperationFailedException("Can't create the NOTIFY" + " message",OperationFailedException.INTERNAL_ERROR);
  }
  EventHeader evHeader=null;
  try {
    evHeader=this.parentProvider.getHeaderFactory().createEventHeader("presence");
  }
 catch (  ParseException e) {
    logger.error("An unexpected error occurred while" + "constructing the EventHeader",e);
    throw new OperationFailedException("Can't create the Event" + " header",OperationFailedException.INTERNAL_ERROR,e);
  }
  ContactHeader contactHeader=this.parentProvider.getContactHeader();
  SubscriptionStateHeader sStateHeader=null;
  try {
    sStateHeader=this.parentProvider.getHeaderFactory().createSubscriptionStateHeader(subscriptionState);
    if (reason != null && reason.trim().length() != 0) {
      sStateHeader.setReasonCode(reason);
    }
  }
 catch (  ParseException e) {
    logger.debug("can't create the Subscription-State header",e);
    throw new OperationFailedException("Can't create the " + "Subscription-State header",OperationFailedException.INTERNAL_ERROR,e);
  }
  ContentTypeHeader cTypeHeader=null;
  try {
    cTypeHeader=this.parentProvider.getHeaderFactory().createContentTypeHeader("application",PIDF_XML);
  }
 catch (  ParseException e) {
    logger.debug("can't create the Content-Type header",e);
    throw new OperationFailedException("Can't create the " + "Content-type header",OperationFailedException.INTERNAL_ERROR,e);
  }
  req.setHeader(maxForwards);
  req.setHeader(evHeader);
  req.setHeader(sStateHeader);
  req.setHeader(contactHeader);
  ClientTransaction transac=null;
  try {
    transac=this.parentProvider.getDefaultJainSipProvider().getNewClientTransaction(req);
  }
 catch (  TransactionUnavailableException ex) {
    logger.error("Failed to create subscriptionTransaction.\n" + "This is most probably a network connection error.",ex);
    throw new OperationFailedException("Can't create the " + "Content-length header",OperationFailedException.NETWORK_FAILURE,ex);
  }
  req.addHeader((Header)viaHeaders.get(0));
  try {
    req.setContent(doc,cTypeHeader);
  }
 catch (  ParseException e) {
    logger.debug("Failed to add the presence document",e);
    throw new OperationFailedException("Can't add the presence " + "document to the request",OperationFailedException.INTERNAL_ERROR,e);
  }
  return transac;
}
