{
  super(provider);
  this.contactListRoot=new ContactGroupSipImpl("RootGroup",provider);
  this.parentProvider.addRegistrationStateChangeListener(this);
  this.presenceEnabled=presenceEnabled;
  this.subscriptionDuration=(subscriptionExpiration > 0) ? subscriptionExpiration : PRESENCE_DEFAULT_EXPIRE;
  if (this.presenceEnabled) {
    this.subscriber=new EventPackageSubscriber(this.parentProvider,"presence",this.subscriptionDuration,PIDF_XML,this.timer,REFRESH_MARGIN);
    this.notifier=new EventPackageNotifier(this.parentProvider,"presence",PRESENCE_DEFAULT_EXPIRE,PIDF_XML,this.timer){
      /** 
 * Creates a new <tt>PresenceNotificationSubscription</tt>
 * instance.
 * @param fromAddress our AOR
 * @param eventId the event id to use.
 */
      protected Subscription createSubscription(      Address fromAddress,      String eventId){
        return new PresenceNotifierSubscription(fromAddress,eventId);
      }
    }
;
  }
 else {
    this.subscriber=null;
    this.notifier=null;
  }
  this.parentProvider.registerMethodProcessor(Request.SUBSCRIBE,this);
  this.parentProvider.registerMethodProcessor(Request.NOTIFY,this);
  this.parentProvider.registerMethodProcessor(Request.PUBLISH,this);
  this.parentProvider.registerEvent("presence");
  logger.debug("presence initialized with :" + presenceEnabled + ", "+ forceP2PMode+ ", "+ pollingPeriod+ ", "+ subscriptionExpiration+ " for "+ this.parentProvider.getOurDisplayName());
  this.pollingTaskPeriod=(pollingPeriod > 0) ? (pollingPeriod * 1000) : 30000;
  this.useDistantPA=!forceP2PMode;
  this.sipStatusEnum=parentProvider.getSipStatusEnum();
  this.presenceStatus=sipStatusEnum.getStatus(SipStatusEnum.OFFLINE);
}
