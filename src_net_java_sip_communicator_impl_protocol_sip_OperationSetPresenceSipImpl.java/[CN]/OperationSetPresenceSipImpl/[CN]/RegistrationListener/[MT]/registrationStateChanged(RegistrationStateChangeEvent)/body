{
  if (evt.getNewState() == RegistrationState.UNREGISTERING) {
    timer.cancel();
    try {
      publishPresenceStatus(SipStatusEnum.OFFLINE,"");
    }
 catch (    OperationFailedException e) {
      logger.error("can't set the offline mode",e);
    }
    Thread t=new Thread(new unregisteringThread());
    t.setDaemon(false);
    t.start();
    PresenceStatus oldStatus=presenceStatus;
    presenceStatus=SipStatusEnum.OFFLINE;
    fireProviderStatusChangeEvent(oldStatus);
  }
 else   if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    logger.debug("enter registered state");
    Iterator groupsIter=getServerStoredContactListRoot().subgroups();
    while (groupsIter.hasNext()) {
      ContactGroupSipImpl group=(ContactGroupSipImpl)groupsIter.next();
      Iterator contactsIter=group.contacts();
      while (contactsIter.hasNext()) {
        ContactSipImpl contact=(ContactSipImpl)contactsIter.next();
        if (contact.isResolved()) {
          logger.debug("contact " + contact + " already resolved");
          continue;
        }
        Request subscription;
        try {
          subscription=createSubscription(contact,SUBSCRIBE_DEFAULT_EXPIRE);
        }
 catch (        OperationFailedException ex) {
          logger.error("Failed to create the subcription",ex);
          return;
        }
        ClientTransaction subscribeTransaction;
        SipProvider jainSipProvider=parentProvider.getDefaultJainSipProvider();
        try {
          subscribeTransaction=jainSipProvider.getNewClientTransaction(subscription);
        }
 catch (        TransactionUnavailableException ex) {
          logger.error("Failed to create subscriptionTransaction.\n" + "This is most probably a network" + " connection error.",ex);
          return;
        }
        CallIdHeader idheader=(CallIdHeader)subscription.getHeader(CallIdHeader.NAME);
        subscribedContacts.put(idheader.getCallId(),contact);
        logger.debug("added a contact at :" + idheader.getCallId());
        try {
          subscribeTransaction.sendRequest();
        }
 catch (        SipException ex) {
          logger.error("Failed to send the message.",ex);
          subscribedContacts.remove(idheader.getCallId());
          return;
        }
      }
    }
    timer=new Timer(true);
    pollingTask=new PollOfflineContactsTask();
    timer.schedule(pollingTask,POLLING_TASK_PERIOD,POLLING_TASK_PERIOD);
  }
}
