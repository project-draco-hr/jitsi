{
  long encoder=FFmpeg.avcodec_find_encoder(FFmpeg.CODEC_ID_MP3);
  if (encoder == 0) {
    throw new ResourceUnavailableException("Could not find FFmpeg encoder CODEC_ID_MP3");
  }
  avctx=FFmpeg.avcodec_alloc_context();
  if (avctx == 0) {
    throw new ResourceUnavailableException("Could not allocate AVCodecContext" + " for FFmpeg encoder CODEC_ID_MP3");
  }
  int avcodec_open=-1;
  try {
    AudioFormat inputFormat=(AudioFormat)getInputFormat();
    int channels=inputFormat.getChannels();
    int sampleRate=(int)inputFormat.getSampleRate();
    if (channels == Format.NOT_SPECIFIED)     channels=1;
    FFmpeg.avcodeccontext_set_bit_rate(avctx,128000);
    FFmpeg.avcodeccontext_set_channels(avctx,channels);
    try {
      FFmpeg.avcodeccontext_set_sample_fmt(avctx,FFmpeg.AV_SAMPLE_FMT_S16);
    }
 catch (    UnsatisfiedLinkError ule) {
      logger.warn("The FFmpeg JNI library is out-of-date.");
    }
    if (sampleRate != Format.NOT_SPECIFIED)     FFmpeg.avcodeccontext_set_sample_rate(avctx,sampleRate);
    avcodec_open=FFmpeg.avcodec_open(avctx,encoder);
    frameSizeInBytes=FFmpeg.avcodeccontext_get_frame_size(avctx) * (inputFormat.getSampleSizeInBits() / 8) * channels;
  }
  finally {
    if (avcodec_open < 0) {
      FFmpeg.av_free(avctx);
      avctx=0;
    }
  }
  if (avctx == 0) {
    throw new ResourceUnavailableException("Could not open FFmpeg encoder CODEC_ID_MP3");
  }
}
