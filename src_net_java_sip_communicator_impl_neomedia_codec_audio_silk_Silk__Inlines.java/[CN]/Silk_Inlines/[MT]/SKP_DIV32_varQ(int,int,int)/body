{
  int a_headrm, b_headrm, lshift;
  int b32_inv, a32_nrm, b32_nrm, result;
  assert(b32 != 0);
  assert(Qres >= 0);
  a_headrm=Integer.numberOfLeadingZeros(Math.abs(a32)) - 1;
  a32_nrm=a32 << a_headrm;
  b_headrm=Integer.numberOfLeadingZeros(Math.abs(b32)) - 1;
  b32_nrm=b32 << b_headrm;
  b32_inv=(Integer.MAX_VALUE >> 2) / (b32_nrm >> 16);
  result=Silk_macros.SKP_SMULWB(a32_nrm,b32_inv);
  a32_nrm-=Silk_SigProc_FIX.SKP_SMMUL(b32_nrm,result) << 3;
  result=Silk_macros.SKP_SMLAWB(result,a32_nrm,b32_inv);
  lshift=29 + a_headrm - b_headrm - Qres;
  if (lshift <= 0) {
    return Silk_SigProc_FIX.SKP_LSHIFT_SAT32(result,-lshift);
  }
 else {
    if (lshift < 32) {
      return result >> lshift;
    }
 else {
      return 0;
    }
  }
}
