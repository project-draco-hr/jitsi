{
  labelsPanel.add(serverLabel);
  labelsPanel.add(userIDLabel);
  labelsPanel.add(passLabel);
  labelsPanel.add(pass2Label);
  labelsPanel.add(portLabel);
  userIDField.setColumns(30);
  serverPanel.add(serverField,BorderLayout.CENTER);
  serverPanel.add(chooseButton,BorderLayout.EAST);
  valuesPanel.add(serverPanel);
  valuesPanel.add(userIDField);
  valuesPanel.add(passField);
  valuesPanel.add(pass2Field);
  valuesPanel.add(portField);
  serverField.getDocument().addDocumentListener(this);
  userIDField.getDocument().addDocumentListener(this);
  passField.getDocument().addDocumentListener(this);
  pass2Field.getDocument().addDocumentListener(this);
  portField.getDocument().addDocumentListener(this);
  userIDPassPanel.add(labelsPanel,BorderLayout.WEST);
  userIDPassPanel.add(valuesPanel,BorderLayout.CENTER);
  chooseButton.setText(Resources.getString("chooseLabel"));
  chooseButton.setMnemonic(Resources.getMnemonic("chooseLabel"));
  westIconLabel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(20,20,20,20),BorderFactory.createTitledBorder("")));
  try {
    westIconLabel.setIcon(new ImageIcon(ImageIO.read(new ByteArrayInputStream(Resources.getImage(Resources.PAGE_IMAGE)))));
  }
 catch (  IOException e) {
    logger.error("Could not read image.",e);
  }
  westPanel.add(westIconLabel,BorderLayout.NORTH);
  this.mainPanel.add(westPanel,BorderLayout.WEST);
  chooseButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      jabberServerChooserDialog=new JabberServerChooserDialog();
      if (jabberServerChooserDialog.isOK) {
        serverField.setText(jabberServerChooserDialog.serverSelected);
      }
    }
  }
);
  okButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (new String(passField.getPassword()).equals(new String(pass2Field.getPassword()))) {
        new Thread(){
          public void run(){
            boolean result=addNewAccount(serverField.getText(),Integer.parseInt(portField.getText()),userIDField.getText(),new String(passField.getPassword()));
            if (result == true) {
              isOK=true;
              userID=new String(userIDField.getText());
              password=new String(passField.getPassword());
              server=new String(serverField.getText());
              port=new String(portField.getText());
              dispose();
            }
          }
        }
.start();
        loadingAccountGlassPane.setVisible(true);
      }
 else {
        JOptionPane.showMessageDialog(null,Resources.getString("notSamePassword"),Resources.getString("xmppError"),JOptionPane.ERROR_MESSAGE);
      }
    }
  }
);
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      dispose();
    }
  }
);
  okButton.setText(Resources.getString("okLabel"));
  okButton.setMnemonic(Resources.getMnemonic("okLabel"));
  okButton.setEnabled(false);
  cancelButton.setText(Resources.getString("cancelLabel"));
  cancelButton.setMnemonic(Resources.getMnemonic("cancelLabel"));
  buttonBox.setBorder(new EmptyBorder(new Insets(5,10,5,10)));
  buttonBox.add(okButton);
  buttonBox.add(Box.createHorizontalStrut(10));
  buttonBox.add(cancelButton);
  buttonPanel.add(buttonBox);
  this.mainPanel.add(userIDPassPanel,BorderLayout.CENTER);
  this.mainPanel.add(buttonPanel,BorderLayout.SOUTH);
  mainPanel.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));
  this.getContentPane().add(mainPanel,BorderLayout.NORTH);
  this.setVisible(true);
}
