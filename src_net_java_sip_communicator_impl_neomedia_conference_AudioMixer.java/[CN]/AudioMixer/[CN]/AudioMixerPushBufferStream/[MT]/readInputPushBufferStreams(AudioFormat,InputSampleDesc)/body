{
  InputStreamDesc[] inputStreams=inputSampleDesc.inputStreams;
  int[][] inputSamples=inputSampleDesc.inputSamples;
  int maxInputSampleCount=0;
  for (int i=0; i < inputStreams.length; i++) {
    InputStreamDesc inputStreamDesc=inputStreams[i];
    SourceStream inputStream=inputStreamDesc.getInputStream();
    if (inputStream instanceof PushBufferStream) {
      int[] inputStreamSamples=read((PushBufferStream)inputStream,outputFormat,maxInputSampleCount);
      int inputStreamSampleCount;
      if (inputStreamSamples != null) {
        inputStreamSampleCount=inputStreamSamples.length;
        if (inputStreamSampleCount != 0) {
          inputSamples[i]=inputStreamSamples;
          if (maxInputSampleCount < inputStreamSampleCount)           maxInputSampleCount=inputStreamSampleCount;
        }
 else         if (logger.isTraceEnabled())         inputStreamDesc.nonContributingReadCount++;
      }
 else       if (logger.isTraceEnabled())       inputStreamDesc.nonContributingReadCount++;
      if (logger.isTraceEnabled() && (TRACE_NON_CONTRIBUTING_READ_COUNT > 0) && (inputStreamDesc.nonContributingReadCount >= TRACE_NON_CONTRIBUTING_READ_COUNT)) {
        logger.trace("Failed to read actual inputSamples more than " + inputStreamDesc.nonContributingReadCount + " times from inputStream with hash code "+ inputStreamDesc.getInputStream().hashCode());
        inputStreamDesc.nonContributingReadCount=0;
      }
    }
  }
  return maxInputSampleCount;
}
