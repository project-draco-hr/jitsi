{
  dataSource=mediaControl.createDataSourceForEncodings(mediaEncoding);
  PushBufferDataSource pbds=(PushBufferDataSource)dataSource;
  PushBufferStream pbss[]=pbds.getStreams();
  rtpMgrs=new RTPManager[pbss.length];
  SessionAddress localAddr, destAddr;
  InetAddress ipAddr;
  SendStream sendStream;
  int port;
  for (int i=0; i < pbss.length; i++) {
    try {
      rtpMgrs[i]=RTPManager.newInstance();
      port=remotePort + 2 * i;
      ipAddr=InetAddress.getByName(remoteAddress);
      localAddr=new SessionAddress(InetAddress.getByName(this.localAddress),localPort);
      destAddr=new SessionAddress(ipAddr,port);
      rtpMgrs[i].addReceiveStreamListener(this);
      rtpMgrs[i].addSessionListener(this);
      BufferControl bc=(BufferControl)rtpMgrs[i].getControl("javax.media.control.BufferControl");
      if (bc != null) {
        int bl=160;
        bc.setBufferLength(bl);
      }
      try {
        rtpMgrs[i].initialize(localAddr);
      }
 catch (      InvalidSessionAddressException e) {
        SessionAddress sessAddr=new SessionAddress();
        localAddr=new SessionAddress(sessAddr.getDataAddress(),localPort);
        rtpMgrs[i].initialize(localAddr);
      }
      rtpMgrs[i].addTarget(destAddr);
      logger.info("Created RTP session at " + localPort + " to: "+ remoteAddress+ " "+ port);
      sendStream=rtpMgrs[i].createSendStream(dataSource,i);
      sendStreams.add(sendStream);
      sendStream.start();
    }
 catch (    Exception e) {
      throw new MediaException("Failed to create transmitter",MediaException.INTERNAL_ERROR,e);
    }
  }
}
