{
  Request cancel=serverTransaction.getRequest();
  try {
    Response ok=messageFactory.createResponse(Response.OK,cancel);
    serverTransaction.sendResponse(ok);
    if (logger.isDebugEnabled())     logger.debug("sent an ok response to a CANCEL request:\n" + ok);
  }
 catch (  ParseException ex) {
    logAndFail("Failed to create an OK Response to a CANCEL.",ex);
    return;
  }
catch (  Exception ex) {
    logAndFail("Failed to send an OK Response to a CANCEL.",ex);
    return;
  }
  try {
    Transaction tran=getLatestInviteTransaction();
    if (!(tran instanceof ServerTransaction)) {
      logger.error("Received a misplaced CANCEL request!");
      return;
    }
    ServerTransaction inviteTran=(ServerTransaction)tran;
    Request invite=getLatestInviteTransaction().getRequest();
    Response requestTerminated=messageFactory.createResponse(Response.REQUEST_TERMINATED,invite);
    inviteTran.sendResponse(requestTerminated);
    if (logger.isDebugEnabled())     logger.debug("sent request terminated response:\n" + requestTerminated);
  }
 catch (  ParseException ex) {
    logger.error("Failed to create a REQUEST_TERMINATED Response to " + "an INVITE request.",ex);
  }
catch (  Exception ex) {
    logger.error("Failed to send an REQUEST_TERMINATED Response to " + "an INVITE request.",ex);
  }
  ReasonHeader reasonHeader=(ReasonHeader)cancel.getHeader(ReasonHeader.NAME);
  if (reasonHeader != null) {
    setState(CallPeerState.DISCONNECTED,reasonHeader.getText(),reasonHeader.getCause());
  }
 else   setState(CallPeerState.DISCONNECTED);
}
