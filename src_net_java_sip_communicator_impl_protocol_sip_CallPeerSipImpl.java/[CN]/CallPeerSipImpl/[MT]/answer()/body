{
  Transaction transaction=getLatestInviteTransaction();
  if (transaction == null || !(transaction instanceof ServerTransaction)) {
    setState(CallPeerState.DISCONNECTED);
    throw new OperationFailedException("Failed to extract a ServerTransaction " + "from the call's associated dialog!",OperationFailedException.INTERNAL_ERROR);
  }
  CallPeerState peerState=getState();
  if (peerState.equals(CallPeerState.CONNECTED) || CallPeerState.isOnHold(peerState)) {
    logger.info("Ignoring user request to answer a CallPeer " + "that is already connected. CP:");
    return;
  }
  ServerTransaction serverTransaction=(ServerTransaction)transaction;
  Response ok=null;
  try {
    ok=messageFactory.createResponse(Response.OK,serverTransaction.getRequest());
  }
 catch (  ParseException ex) {
    setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to construct an OK response to an INVITE request",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  ContentTypeHeader contentTypeHeader=null;
  try {
    contentTypeHeader=getProtocolProvider().getHeaderFactory().createContentTypeHeader("application","sdp");
  }
 catch (  ParseException ex) {
    setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to create a content type header for the OK response",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  try {
    serverTransaction.sendResponse(ok);
    if (logger.isDebugEnabled())     logger.debug("sent response\n" + ok);
  }
 catch (  Exception ex) {
    setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to send an OK response to an INVITE request",OperationFailedException.NETWORK_FAILURE,ex,logger);
  }
}
