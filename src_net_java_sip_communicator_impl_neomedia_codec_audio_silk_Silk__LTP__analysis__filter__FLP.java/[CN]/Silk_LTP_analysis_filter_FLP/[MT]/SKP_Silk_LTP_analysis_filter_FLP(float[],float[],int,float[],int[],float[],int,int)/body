{
  final float[] x_ptr;
  float[] x_lag_ptr;
  int x_ptr_offset, x_lag_ptr_offset;
  float Btmp[]=new float[Silk_define.LTP_ORDER];
  float[] LTP_res_ptr;
  int LTP_res_ptr_offset;
  float inv_gain;
  int k, i, j;
  x_ptr=x;
  x_ptr_offset=x_offset;
  LTP_res_ptr=LTP_res;
  LTP_res_ptr_offset=0;
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    x_lag_ptr=x_ptr;
    x_lag_ptr_offset=x_ptr_offset - pitchL[k];
    inv_gain=invGains[k];
    for (i=0; i < Silk_define.LTP_ORDER; i++) {
      Btmp[i]=B[k * Silk_define.LTP_ORDER + i];
    }
    for (i=0; i < subfr_length + pre_length; i++) {
      LTP_res_ptr[LTP_res_ptr_offset + i]=x_ptr[x_ptr_offset + i];
      for (j=0; j < Silk_define.LTP_ORDER; j++) {
        LTP_res_ptr[LTP_res_ptr_offset + i]-=Btmp[j] * x_lag_ptr[x_lag_ptr_offset + Silk_define.LTP_ORDER / 2 - j];
      }
      LTP_res_ptr[LTP_res_ptr_offset + i]*=inv_gain;
      x_lag_ptr_offset++;
    }
    LTP_res_ptr_offset+=subfr_length + pre_length;
    x_ptr_offset+=subfr_length;
  }
}
