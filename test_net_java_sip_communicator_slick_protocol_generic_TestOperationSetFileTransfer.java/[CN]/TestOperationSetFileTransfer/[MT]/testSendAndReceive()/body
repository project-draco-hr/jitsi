{
  if (!enableTestSendAndReceive())   return;
  logger.trace("Start test : send and receive ok.");
  File fileToTransfer=getTempFileToTransfer(123456);
  OperationSetFileTransfer ftOpSet1=getOpSetFilTransfer1();
  OperationSetFileTransfer ftOpSet2=getOpSetFilTransfer2();
  FileTransferStatusEventCollector senderStatusListener=new FileTransferStatusEventCollector("Sender");
  FileTransferEventCollector senderFTListerner=new FileTransferEventCollector("Sender",senderStatusListener);
  ftOpSet1.addFileTransferListener(senderFTListerner);
  FileTransferStatusEventCollector receiverStatusListener=new FileTransferStatusEventCollector("Receiver");
  FileTransferEventCollector receiverFTListerner=new FileTransferEventCollector("Receiver",receiverStatusListener);
  ftOpSet2.addFileTransferListener(receiverFTListerner);
  try {
    ftOpSet1.sendFile(getContact1(),fileToTransfer);
    senderFTListerner.waitForEvent(2000);
    receiverFTListerner.waitForEvent(8000);
    senderStatusListener.waitForEvent(2000);
    assertEquals("A file transfer created must be received on send side",1,senderFTListerner.collectedEvents.size());
    FileTransferCreatedEvent fileTransferCreatedEvent=(FileTransferCreatedEvent)senderFTListerner.collectedEvents.get(0);
    assertEquals("FileTransfer file",fileTransferCreatedEvent.getFileTransfer().getLocalFile(),fileToTransfer);
    assertEquals("A file transfer status changed - preparing received on send side",1,senderStatusListener.collectedEvents.size());
    FileTransferStatusChangeEvent fileTransferStatusEvent=senderStatusListener.collectedEvents.get(0);
    assertEquals("Event must be preparing",FileTransferStatusChangeEvent.PREPARING,fileTransferStatusEvent.getNewStatus());
    assertEquals("A file transfer request must be received on the receiver side",1,receiverFTListerner.collectedEvents.size());
    FileTransferRequestEvent fileTransferRequestEvent=(FileTransferRequestEvent)receiverFTListerner.collectedEvents.get(0);
    IncomingFileTransferRequest req=fileTransferRequestEvent.getRequest();
    assertEquals("FileTransfer file name must be the same",req.getFileName(),fileToTransfer.getName());
    assertEquals("FileTransfer file size must be the same",req.getFileSize(),fileToTransfer.length());
    senderFTListerner.clear();
    receiverFTListerner.clear();
    senderStatusListener.clear();
    File receiveFile=getFileService().getTemporaryFile();
    req.acceptFile(receiveFile);
    senderFTListerner.waitForEvent(4000);
    receiverFTListerner.waitForEvent(4000);
    assertEquals("A file transfer created must be received on receiver side",1,receiverFTListerner.collectedEvents.size());
    fileTransferCreatedEvent=(FileTransferCreatedEvent)receiverFTListerner.collectedEvents.get(0);
    assertEquals("FileTransfer file",fileTransferCreatedEvent.getFileTransfer().getLocalFile(),receiveFile);
    receiverStatusListener.waitForEvent(30000,3);
    assertEquals("A file transfer status changed - " + "preparing, inprogress and completed received on receiver side",3,receiverStatusListener.collectedEvents.size());
    fileTransferStatusEvent=receiverStatusListener.collectedEvents.get(0);
    assertEquals("Event must be preparing",FileTransferStatusChangeEvent.PREPARING,fileTransferStatusEvent.getNewStatus());
    fileTransferStatusEvent=receiverStatusListener.collectedEvents.get(1);
    assertEquals("Event must be completed",FileTransferStatusChangeEvent.IN_PROGRESS,fileTransferStatusEvent.getNewStatus());
    fileTransferStatusEvent=receiverStatusListener.collectedEvents.get(2);
    assertEquals("Event must be completed",FileTransferStatusChangeEvent.COMPLETED,fileTransferStatusEvent.getNewStatus());
    senderStatusListener.waitForEvent(4000,2);
    assertTrue("Completed event must be received",senderStatusListener.contains(FileTransferStatusChangeEvent.COMPLETED));
  }
  finally {
    ftOpSet1.removeFileTransferListener(senderFTListerner);
    ftOpSet2.addFileTransferListener(receiverFTListerner);
  }
}
