{
  mockProvider=new MockProvider("MessageHistoryMockUser");
  Map supportedOperationSets=mockProvider.getSupportedOperationSets();
  mockPresOpSet=(MockPersistentPresenceOperationSet)supportedOperationSets.get(OperationSetPersistentPresence.class.getName());
  mockBImOpSet=(MockBasicInstantMessaging)supportedOperationSets.get(OperationSetBasicInstantMessaging.class.getName());
  msgHistoryServiceRef=MsgHistoryServiceLick.bc.getServiceReference(MessageHistoryService.class.getName());
  msgHistoryService=(MessageHistoryService)MsgHistoryServiceLick.bc.getService(msgHistoryServiceRef);
  MockContactGroup root=(MockContactGroup)mockPresOpSet.getServerStoredContactListRoot();
  testContact=new MockContact(TEST_CONTACT_NAME,mockProvider);
  root.addContact(testContact);
  metaCLref=MsgHistoryServiceLick.bc.getServiceReference(MetaContactListService.class.getName());
  metaClService=(MetaContactListService)MsgHistoryServiceLick.bc.getService(metaCLref);
  System.setProperty(MetaContactListService.PROVIDER_MASK_PROPERTY,"1");
  Hashtable mockProvProperties=new Hashtable();
  mockProvProperties.put(ProtocolProviderFactory.PROTOCOL,mockProvider.getProtocolName());
  mockProvProperties.put(MetaContactListService.PROVIDER_MASK_PROPERTY,"1");
  mockPrServiceRegistration=MsgHistoryServiceLick.bc.registerService(ProtocolProviderService.class.getName(),mockProvider,mockProvProperties);
  logger.debug("Registered a mock protocol provider! ");
  testMetaContact=metaClService.getRoot().getMetaContact(mockProvider,TEST_CONTACT_NAME);
  messagesToSend=new Message[]{mockBImOpSet.createMessage("test message word1"),mockBImOpSet.createMessage("test message word2"),mockBImOpSet.createMessage("test message word3"),mockBImOpSet.createMessage("test message word4"),mockBImOpSet.createMessage("test message word5")};
}
