{
  ChatRoom room=null;
  try {
    room=mockMultiChat.findRoom(TEST_ROOM_NAME);
  }
 catch (  Exception ex) {
    fail("Cannot find room!" + ex.getMessage());
  }
  Collection rs=msgHistoryService.findByKeyword(room,"test");
  assertTrue("Nothing found findByKeyword ",!rs.isEmpty());
  Vector msgs=getChatMessages(rs);
  assertTrue("Messages too few - findByKeyword",msgs.size() >= 5);
  rs=msgHistoryService.findByKeyword(room,"Test",false);
  assertTrue("Nothing found findByKeyword caseINsensitive search",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertTrue("Messages too few - findByKeyword",msgs.size() >= 5);
  rs=msgHistoryService.findByKeyword(room,"Test",true);
  assertFalse("Something found by findByKeyword casesensitive search",!rs.isEmpty());
  rs=msgHistoryService.findByEndDate(room,controlDate2);
  assertTrue("Nothing found findByEndDate",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertTrue("Messages too few - findByEndDate",msgs.size() >= 3);
  rs=msgHistoryService.findByKeywords(room,new String[]{"test","word2"});
  assertTrue("Nothing found findByKeywords",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertTrue("Messages too few - findByKeywords",msgs.size() >= 1);
  rs=msgHistoryService.findByKeywords(room,new String[]{"test1","word2"});
  assertFalse("Something found findByKeywords",!rs.isEmpty());
  rs=msgHistoryService.findByPeriod(room,controlDate1,controlDate2);
  assertTrue("Nothing found findByPeriod",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 2",msgs.size(),2);
  assertTrue("Message no found",msgs.contains(messagesToSend[1].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[2].getContent()));
  rs=msgHistoryService.findByPeriod(room,controlDate1,controlDate2,new String[]{"word2"});
  assertTrue("Nothing found findByPeriod",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 1",msgs.size(),1);
  assertTrue("Message no found",msgs.contains(messagesToSend[1].getContent()));
  rs=msgHistoryService.findByStartDate(room,controlDate2);
  assertTrue("Nothing found findByStartDate",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 2",msgs.size(),2);
  assertTrue("Message no found",msgs.contains(messagesToSend[3].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[4].getContent()));
  rs=msgHistoryService.findLast(room,3);
  assertTrue("Nothing found 8",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 3",msgs.size(),3);
  assertTrue("Message no found",msgs.contains(messagesToSend[2].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[3].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[4].getContent()));
  rs=msgHistoryService.findFirstMessagesAfter(room,controlDate1,3);
  assertTrue("Nothing found 9",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 3",msgs.size(),3);
  assertTrue("Message no found",msgs.contains(messagesToSend[1].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[2].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[3].getContent()));
  rs=msgHistoryService.findLastMessagesBefore(room,controlDate2,3);
  assertTrue("Nothing found 10",!rs.isEmpty());
  msgs=getChatMessages(rs);
  assertEquals("Messages must be 3",msgs.size(),3);
  assertTrue("Message no found",msgs.contains(messagesToSend[0].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[1].getContent()));
  assertTrue("Message no found",msgs.contains(messagesToSend[2].getContent()));
}
