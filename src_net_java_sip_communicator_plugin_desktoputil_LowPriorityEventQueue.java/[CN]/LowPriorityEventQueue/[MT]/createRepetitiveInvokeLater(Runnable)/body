{
  return new Runnable(){
    /** 
 * The <tt>AWTEvent</tt> instance which is to execute the
 * specified <tt>runnable</tt> on {@link #eventQueue} i.e. the
 * application's <tt>EventQueue</tt> instance.
 */
    private AWTEvent event;
    /** 
 * The <tt>EventQueue</tt> instance on which {@link #event} is
 * to execute the specified <tt>runnable</tt> i.e. the
 * application's <tt>EventQueue</tt> instance. 
 */
    private EventQueue eventQueue;
    /** 
 * The indicator which determines whether the execution of the
 * specified <tt>runnable</tt> has already been scheduled and
 * has not been performed yet. If <tt>true</tt>, invocations to{@link #run()} will do nothing.
 */
    private boolean posted=false;
    /** 
 * Schedules the specified <tt>runnable</tt> to be executed
 * (unless the execution has already been scheduled and has not
 * been performed yet).
 */
    public synchronized void run(){
      if (posted)       return;
      if (event == null) {
        Toolkit defaultToolkit=Toolkit.getDefaultToolkit();
        eventQueue=defaultToolkit.getSystemEventQueue();
        event=new LowPriorityInvocationEvent(defaultToolkit,new Runnable(){
          public void run(){
            runInEvent();
          }
        }
);
      }
      eventQueue.postEvent(event);
      posted=true;
    }
    /** 
 * Runs during the dispatch of {@link #event} and executed the
 * specified <tt>runnable</tt>.
 */
    private void runInEvent(){
synchronized (this) {
        posted=false;
      }
      runnable.run();
    }
  }
;
}
