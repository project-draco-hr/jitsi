{
  if (stream != 0)   return;
  AudioFormat format=this.inputFormat;
  int sampleRate=(int)format.getSampleRate();
  int channels=format.getChannels();
  int sampleSizeInBits=format.getSampleSizeInBits();
  if ((sampleRate == Format.NOT_SPECIFIED) && (MediaUtils.MAX_AUDIO_SAMPLE_RATE != Format.NOT_SPECIFIED))   sampleRate=(int)MediaUtils.MAX_AUDIO_SAMPLE_RATE;
  if (channels == Format.NOT_SPECIFIED)   channels=1;
  if (sampleSizeInBits == Format.NOT_SPECIFIED)   sampleSizeInBits=16;
  long stream=0;
  Throwable exception=null;
  try {
    stream=pulseAudioSystem.createStream(sampleRate,channels,getClass().getName(),mediaRole);
  }
 catch (  IllegalStateException ise) {
    exception=ise;
  }
catch (  RuntimeException re) {
    exception=re;
  }
  if (exception != null) {
    ResourceUnavailableException rue=new ResourceUnavailableException();
    rue.initCause(exception);
    throw rue;
  }
  if (stream == 0)   throw new ResourceUnavailableException("stream");
  try {
    long attr=PA.buffer_attr_new(-1,2 * (sampleRate / 100) * channels* (sampleSizeInBits / 8),-1,-1,-1);
    if (attr == 0)     throw new ResourceUnavailableException("pa_buffer_attr_new");
    try {
      Runnable stateCallback=new Runnable(){
        public void run(){
          pulseAudioSystem.signalMainloop(false);
        }
      }
;
      PA.stream_set_state_callback(stream,stateCallback);
      PA.stream_connect_playback(stream,null,attr,PA.STREAM_ADJUST_LATENCY | PA.STREAM_START_CORKED,0,0);
      try {
        if (attr != 0) {
          PA.buffer_attr_free(attr);
          attr=0;
        }
        int state=pulseAudioSystem.waitForStreamState(stream,PA.STREAM_READY);
        if (state != PA.STREAM_READY)         throw new ResourceUnavailableException("stream.state");
        PA.stream_set_write_callback(stream,writeCallback);
        this.stream=stream;
      }
  finally {
        if (this.stream == 0)         PA.stream_disconnect(stream);
      }
    }
  finally {
      if (attr != 0)       PA.buffer_attr_free(attr);
    }
  }
  finally {
    if (this.stream == 0)     PA.stream_unref(stream);
  }
}
