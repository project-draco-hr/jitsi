{
  if ((stream == 0) || corked)   return BUFFER_PROCESSED_FAILED;
  int writableSize=PA.stream_writable_size(stream);
  int ret;
  if (writableSize <= 0) {
    pulseAudioSystem.waitMainloop();
    ret=BUFFER_PROCESSED_OK;
  }
 else {
    byte[] data=(byte[])buffer.getData();
    int offset=buffer.getOffset();
    int length=buffer.getLength();
    if (length < writableSize)     writableSize=length;
    if (gainControl != null) {
      if (SOFTWARE_GAIN || (cvolume == 0)) {
        if (length > 0) {
          AbstractVolumeControl.applyGain(gainControl,data,offset,writableSize);
        }
      }
 else {
        float gainControlLevel=gainControl.getLevel();
        if (this.gainControlLevel != gainControlLevel) {
          this.gainControlLevel=gainControlLevel;
          setStreamVolume(stream,gainControlLevel);
        }
      }
    }
    int writtenSize=PA.stream_write(stream,data,offset,writableSize,null,0,PA.SEEK_RELATIVE);
    if (writtenSize < 0)     ret=BUFFER_PROCESSED_FAILED;
 else {
      ret=BUFFER_PROCESSED_OK;
      buffer.setLength(length - writtenSize);
      buffer.setOffset(offset + writtenSize);
    }
  }
  return ret;
}
