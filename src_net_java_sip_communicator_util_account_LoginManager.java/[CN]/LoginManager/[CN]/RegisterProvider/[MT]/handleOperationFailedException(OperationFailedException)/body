{
  String errorMessage="";
switch (ex.getErrorCode()) {
case OperationFailedException.GENERAL_ERROR:
{
      logger.error("Provider could not be registered" + " due to the following general error: ",ex);
      AccountID accountID=protocolProvider.getAccountID();
      errorMessage=UtilActivator.getResources().getI18NString("service.gui.LOGIN_GENERAL_ERROR",new String[]{accountID.getUserID(),accountID.getProtocolName(),accountID.getService()});
      UtilActivator.getAlertUIService().showAlertDialog(UtilActivator.getResources().getI18NString("service.gui.ERROR"),errorMessage,ex);
    }
  break;
case OperationFailedException.INTERNAL_ERROR:
{
  logger.error("Provider could not be registered" + " due to the following internal error: ",ex);
  AccountID accountID=protocolProvider.getAccountID();
  errorMessage=UtilActivator.getResources().getI18NString("service.gui.LOGIN_INTERNAL_ERROR",new String[]{accountID.getUserID(),accountID.getService()});
  UtilActivator.getAlertUIService().showAlertDialog(UtilActivator.getResources().getI18NString("service.gui.ERROR"),errorMessage,ex);
}
break;
case OperationFailedException.NETWORK_FAILURE:
{
if (logger.isInfoEnabled()) {
logger.info("Provider could not be registered" + " due to a network failure: " + ex);
}
loginRenderer.protocolProviderConnectionFailed(protocolProvider,LoginManager.this);
}
break;
case OperationFailedException.INVALID_ACCOUNT_PROPERTIES:
{
logger.error("Provider could not be registered" + " due to an invalid account property: ",ex);
AccountID accountID=protocolProvider.getAccountID();
errorMessage=UtilActivator.getResources().getI18NString("service.gui.LOGIN_INVALID_PROPERTIES_ERROR",new String[]{accountID.getUserID(),accountID.getService()});
UtilActivator.getAlertUIService().showAlertDialog(UtilActivator.getResources().getI18NString("service.gui.ERROR"),errorMessage,ex);
}
break;
default :
logger.error("Provider could not be registered.",ex);
}
}
