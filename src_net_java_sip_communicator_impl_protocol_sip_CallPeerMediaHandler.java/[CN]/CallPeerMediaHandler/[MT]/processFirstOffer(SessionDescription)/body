{
  this.remoteSess=offer;
  Vector<MediaDescription> remoteDescriptions=null;
  try {
    remoteDescriptions=offer.getMediaDescriptions(false);
  }
 catch (  SdpException e) {
  }
  if (remoteDescriptions == null || remoteDescriptions.size() == 0) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Remote party did not send any media descriptions.",OperationFailedException.ILLEGAL_ARGUMENT,null,logger);
  }
  MediaService mediaService=SipActivator.getMediaService();
  Vector<MediaDescription> answerDescriptions=new Vector<MediaDescription>(remoteDescriptions.size());
  for (  MediaDescription mediaDescription : remoteDescriptions) {
    MediaType mediaType=MediaType.parseString(mediaDescription.getMedia().getMediaType());
    List<MediaFormat> supportedFormats=SdpUtils.extractFormats(mediaDescription,dynamicPayloadTypes);
    if (supportedFormats == null || supportedFormats.size() == 0) {
      continue;
    }
    StreamConnector connector=getStreamConnector(mediaType);
    MediaDirection remoteDirection=SdpUtils.getDirection(mediaDescription);
    MediaDirection localDirection=mediaService.getDefaultDevice(mediaType).getDirection();
    MediaDirection direction=localDirection.getDirectionForAnswer(remoteDirection);
    createMediaDescription(supportedFormats,connector,direction);
  }
  String userName=peer.getProtocolProvider().getAccountID().getUserID();
  SessionDescription answer=SdpUtils.createSessionDescription(videoStreamConnector.getDataSocket().getLocalAddress(),userName,answerDescriptions);
  this.localSess=answer;
  return localSess.toString();
}
