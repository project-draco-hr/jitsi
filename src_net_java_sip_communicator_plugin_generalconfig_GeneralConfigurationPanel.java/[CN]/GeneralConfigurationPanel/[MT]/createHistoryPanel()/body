{
  JPanel logHistoryPanel=new TransparentPanel();
  logHistoryPanel.setLayout(new BorderLayout());
  logHistoryPanel.setAlignmentX(JCheckBox.LEFT_ALIGNMENT);
  final JCheckBox logHistoryCheckBox=new SIPCommCheckBox();
  logHistoryPanel.add(logHistoryCheckBox,BorderLayout.NORTH);
  logHistoryCheckBox.setText(Resources.getString("plugin.generalconfig.LOG_HISTORY"));
  logHistoryCheckBox.setSelected(ConfigurationUtils.isHistoryLoggingEnabled());
  logHistoryCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ConfigurationUtils.setHistoryLoggingEnabled(logHistoryCheckBox.isSelected());
    }
  }
);
  GeneralConfigPluginActivator.getConfigurationService().addPropertyChangeListener(MessageHistoryService.PNAME_IS_MESSAGE_HISTORY_ENABLED,new PropertyChangeListener(){
    @Override public void propertyChange(    PropertyChangeEvent evt){
      logHistoryCheckBox.setSelected(ConfigurationUtils.isHistoryLoggingEnabled());
    }
  }
);
  JPanel showHistoryPanel=new TransparentPanel();
  showHistoryPanel.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));
  logHistoryPanel.add(showHistoryPanel,BorderLayout.SOUTH);
  final JCheckBox showHistoryCheckBox=new SIPCommCheckBox();
  showHistoryPanel.add(showHistoryCheckBox);
  showHistoryCheckBox.setText(Resources.getString("plugin.generalconfig.SHOW_HISTORY"));
  showHistoryCheckBox.setSelected(ConfigurationUtils.isHistoryShown());
  showHistoryCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      ConfigurationUtils.setHistoryShown(showHistoryCheckBox.isSelected());
    }
  }
);
  SpinnerNumberModel historySizeSpinnerModel=new SpinnerNumberModel(0,0,140,1);
  final JSpinner historySizeSpinner=new JSpinner();
  showHistoryPanel.add(historySizeSpinner);
  historySizeSpinner.setModel(historySizeSpinnerModel);
  historySizeSpinner.setValue(ConfigurationUtils.getChatHistorySize());
  logHistoryCheckBox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      showHistoryCheckBox.setEnabled(logHistoryCheckBox.isSelected());
      historySizeSpinner.setEnabled(logHistoryCheckBox.isSelected());
    }
  }
);
  showHistoryCheckBox.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      historySizeSpinner.setEnabled(showHistoryCheckBox.isSelected());
    }
  }
);
  historySizeSpinnerModel.addChangeListener(new ChangeListener(){
    public void stateChanged(    ChangeEvent e){
      ConfigurationUtils.setChatHistorySize(((Integer)historySizeSpinner.getValue()).intValue());
    }
  }
);
  JLabel historySizeLabel=new JLabel();
  showHistoryPanel.add(historySizeLabel);
  historySizeLabel.setText(Resources.getString("plugin.generalconfig.HISTORY_SIZE"));
  if (!ConfigurationUtils.isHistoryLoggingEnabled()) {
    showHistoryCheckBox.setEnabled(false);
    historySizeSpinner.setEnabled(false);
  }
  if (!ConfigurationUtils.isHistoryShown()) {
    historySizeSpinner.setEnabled(false);
  }
  return logHistoryPanel;
}
