{
  return new FrameRateControlAdapter(){
    /** 
 * The output frame rate to be managed by this
 * <tt>FrameRateControl</tt> when there is no
 * <tt>QuickTimeStream</tt> to delegate to.
 */
    private float frameRate=-1;
    @Override public float getFrameRate(){
      float frameRate=-1;
      boolean frameRateFromQuickTimeStream=false;
synchronized (getStreamSyncRoot()) {
        Object[] streams=streams();
        if ((streams != null) && (streams.length != 0)) {
          for (          Object stream : streams) {
            QuickTimeStream quickTimeStream=(QuickTimeStream)stream;
            if (quickTimeStream != null) {
              frameRate=quickTimeStream.getFrameRate();
              frameRateFromQuickTimeStream=true;
              if (frameRate != -1)               break;
            }
          }
        }
      }
      return frameRateFromQuickTimeStream ? frameRate : this.frameRate;
    }
    @Override public float setFrameRate(    float frameRate){
      float setFrameRate=-1;
      boolean frameRateFromQuickTimeStream=false;
synchronized (getStreamSyncRoot()) {
        Object[] streams=streams();
        if ((streams != null) && (streams.length != 0)) {
          for (          Object stream : streams) {
            QuickTimeStream quickTimeStream=(QuickTimeStream)stream;
            if (quickTimeStream != null) {
              float quickTimeStreamFrameRate=quickTimeStream.setFrameRate(frameRate);
              if (quickTimeStreamFrameRate != -1) {
                setFrameRate=quickTimeStreamFrameRate;
              }
              frameRateFromQuickTimeStream=true;
            }
          }
        }
      }
      if (frameRateFromQuickTimeStream)       return setFrameRate;
 else {
        this.frameRate=frameRate;
        return this.frameRate;
      }
    }
  }
;
}
