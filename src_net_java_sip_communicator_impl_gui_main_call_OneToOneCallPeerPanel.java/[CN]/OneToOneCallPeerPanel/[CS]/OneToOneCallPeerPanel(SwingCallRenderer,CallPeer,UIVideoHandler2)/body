{
  this.callRenderer=callRenderer;
  this.callPeer=callPeer;
  this.call=callPeer.getCall();
  this.uiVideoHandler=uiVideoHandler;
  peerName=CallManager.getPeerDisplayName(callPeer);
  securityPanel=SecurityPanel.create(this,callPeer,null);
  photoLabel=new JLabel(getPhotoLabelIcon());
  center=createCenter();
  statusBar=createStatusBar();
  setPeerImage(CallManager.getPeerImage(callPeer));
  setLayout(new GridBagLayout());
  GridBagConstraints cnstrnts=new GridBagConstraints();
  if (center != null) {
    cnstrnts.fill=GridBagConstraints.BOTH;
    cnstrnts.gridx=0;
    cnstrnts.gridy=1;
    cnstrnts.weightx=1;
    cnstrnts.weighty=1;
    add(center,cnstrnts);
  }
  if (statusBar != null) {
    cnstrnts.fill=GridBagConstraints.NONE;
    cnstrnts.gridx=0;
    cnstrnts.gridy=3;
    cnstrnts.weightx=0;
    cnstrnts.weighty=0;
    cnstrnts.insets=new Insets(5,0,0,0);
    add(statusBar,cnstrnts);
  }
  createSoundLevelIndicators();
  initSecuritySettings();
  callPeerAdapter=new CallPeerAdapter(callPeer,this);
  uiVideoHandler.addObserver(uiVideoHandlerObserver);
  if (callRenderer instanceof Component) {
    ((Component)callRenderer).addPropertyChangeListener(CallContainer.PROP_FULL_SCREEN,this);
  }
  OperationSetDesktopSharingClient desktopSharingClient=callPeer.getProtocolProvider().getOperationSet(OperationSetDesktopSharingClient.class);
  if (desktopSharingClient != null) {
    desktopSharingMouseAndKeyboardListener=new DesktopSharingMouseAndKeyboardListener(callPeer,desktopSharingClient);
  }
 else   desktopSharingMouseAndKeyboardListener=null;
  updateViewFromModel();
}
