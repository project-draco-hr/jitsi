{
  InputSampleDesc inputSampleDesc;
  int inputStreamCount;
synchronized (inputStreamsSyncRoot) {
    InputStreamDesc[] thisInputStreams=this.inputStreams;
    if ((thisInputStreams == null) || (thisInputStreams.length == 0))     return;
 else {
      inputSampleDesc=(InputSampleDesc)buffer.getData();
      inputStreamCount=thisInputStreams.length;
      if (inputSampleDesc != null) {
        InputStreamDesc[] inputSampleDescInputStreams=inputSampleDesc.inputStreams;
        if (inputSampleDescInputStreams.length == inputStreamCount) {
          for (int i=0; i < inputStreamCount; i++)           if (inputSampleDescInputStreams[i] != thisInputStreams[i]) {
            inputSampleDesc=null;
            break;
          }
        }
 else         inputSampleDesc=null;
      }
      if (inputSampleDesc == null) {
        inputSampleDesc=new InputSampleDesc(new int[inputStreamCount][],thisInputStreams.clone());
      }
    }
  }
  AudioFormat outputFormat=getFormat();
  int maxInputSampleCount;
  try {
    maxInputSampleCount=readInputPushBufferStreams(outputFormat,inputSampleDesc);
  }
 catch (  UnsupportedFormatException ufex) {
    IOException ioex=new IOException();
    ioex.initCause(ufex);
    throw ioex;
  }
  maxInputSampleCount=Math.max(maxInputSampleCount,readInputPullBufferStreams(outputFormat,maxInputSampleCount,inputSampleDesc));
  buffer.setData(inputSampleDesc);
  buffer.setLength(maxInputSampleCount);
  long timeStamp=inputSampleDesc.getTimeStamp();
  if (timeStamp != Buffer.TIME_UNKNOWN)   buffer.setTimeStamp(timeStamp);
}
