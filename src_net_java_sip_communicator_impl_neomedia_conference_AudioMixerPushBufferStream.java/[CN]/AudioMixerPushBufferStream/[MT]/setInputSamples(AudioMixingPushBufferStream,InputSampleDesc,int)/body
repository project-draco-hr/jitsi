{
  int[][] inputSamples=inputSampleDesc.inputSamples;
  InputStreamDesc[] inputStreams=inputSampleDesc.inputStreams;
  inputSamples=inputSamples.clone();
  CaptureDevice captureDevice=audioMixer.captureDevice;
  AudioMixingPushBufferDataSource outputDataSource=outputStream.getDataSource();
  boolean outputDataSourceIsSendingDTMF=(captureDevice instanceof AudioMixingPushBufferDataSource) ? outputDataSource.isSendingDTMF() : false;
  boolean outputDataSourceIsMute=outputDataSource.isMute();
  for (int i=0; i < inputSamples.length; i++) {
    InputStreamDesc inputStreamDesc=inputStreams[i];
    DataSource inputDataSource=inputStreamDesc.inputDataSourceDesc.inputDataSource;
    if (outputDataSourceIsSendingDTMF && (inputDataSource == captureDevice)) {
      PushBufferStream inputStream=(PushBufferStream)inputStreamDesc.getInputStream();
      AudioFormat inputStreamFormat=(AudioFormat)inputStream.getFormat();
      double sampleRate=inputStreamFormat.getSampleRate();
      int sampleSizeInBits=inputStreamFormat.getSampleSizeInBits();
      inputSamples[i]=outputDataSource.getNextToneSignal(sampleRate,sampleSizeInBits);
      if (maxInputSampleCount < inputSamples[i].length)       maxInputSampleCount=inputSamples[i].length;
    }
 else     if (outputDataSource.equals(inputStreamDesc.getOutputDataSource()) || (outputDataSourceIsMute && (inputDataSource == captureDevice))) {
      inputSamples[i]=null;
    }
  }
  outputStream.setInputSamples(inputSamples,maxInputSampleCount,inputSampleDesc.getTimeStamp());
}
