{
  Response optionsOK=null;
  try {
    optionsOK=provider.getMessageFactory().createResponse(Response.OK,requestEvent.getRequest());
    Iterator<String> supportedMethods=provider.getSupportedMethods().iterator();
    while (supportedMethods.hasNext()) {
      String method=(String)supportedMethods.next();
      if (method.equals(Request.REGISTER))       continue;
      optionsOK.addHeader(provider.getHeaderFactory().createAllowHeader(method));
    }
    Iterator<String> events=provider.getKnownEventsList().iterator();
synchronized (provider.getKnownEventsList()) {
      while (events.hasNext()) {
        String event=events.next();
        optionsOK.addHeader(provider.getHeaderFactory().createAllowEventsHeader(event));
      }
    }
    optionsOK.setHeader(provider.getSipCommUserAgentHeader());
  }
 catch (  ParseException ex) {
    logger.warn("Failed to create an incoming OPTIONS request",ex);
    return false;
  }
  try {
    SipStackSharing.getOrCreateServerTransaction(requestEvent).sendResponse(optionsOK);
  }
 catch (  TransactionUnavailableException ex) {
    logger.info("Failed to respond to an incoming " + "transactionless OPTIONS request");
    logger.trace("Exception was:",ex);
    return false;
  }
catch (  InvalidArgumentException ex) {
    logger.warn("Failed to send an incoming OPTIONS request",ex);
    return false;
  }
catch (  SipException ex) {
    logger.warn("Failed to send an incoming OPTIONS request",ex);
    return false;
  }
  return true;
}
