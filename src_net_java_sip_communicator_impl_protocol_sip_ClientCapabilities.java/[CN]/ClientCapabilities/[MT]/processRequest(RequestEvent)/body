{
  Response optionsOK=null;
  try {
    optionsOK=provider.getMessageFactory().createResponse(Response.OK,requestEvent.getRequest());
    for (    String method : provider.getSupportedMethods()) {
      if (!method.equals(Request.REGISTER))       optionsOK.addHeader(provider.getHeaderFactory().createAllowHeader(method));
    }
    Iterable<String> knownEventsList=provider.getKnownEventsList();
synchronized (knownEventsList) {
      for (      String event : knownEventsList)       optionsOK.addHeader(provider.getHeaderFactory().createAllowEventsHeader(event));
    }
  }
 catch (  ParseException ex) {
    logger.warn("Failed to create an incoming OPTIONS request",ex);
    return false;
  }
  try {
    SipStackSharing.getOrCreateServerTransaction(requestEvent).sendResponse(optionsOK);
  }
 catch (  TransactionUnavailableException ex) {
    if (logger.isInfoEnabled())     logger.info("Failed to respond to an incoming " + "transactionless OPTIONS request");
    if (logger.isTraceEnabled())     logger.trace("Exception was:",ex);
    return false;
  }
catch (  InvalidArgumentException ex) {
    logger.warn("Failed to send an incoming OPTIONS request",ex);
    return false;
  }
catch (  SipException ex) {
    logger.warn("Failed to send an incoming OPTIONS request",ex);
    return false;
  }
  return true;
}
