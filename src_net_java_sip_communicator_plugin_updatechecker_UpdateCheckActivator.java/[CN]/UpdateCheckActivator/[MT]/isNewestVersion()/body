{
  try {
    ServiceReference serviceReference=bundleContext.getServiceReference(net.java.sip.communicator.service.version.VersionService.class.getName());
    VersionService verService=(VersionService)bundleContext.getService(serviceReference);
    net.java.sip.communicator.service.version.Version ver=verService.getCurrentVersion();
    String configString=null;
    configString=getConfigurationService().getString(PROP_UPDATE_LINK);
    if (configString == null) {
      configString=Resources.getConfigString("update_link");
    }
    if (configString == null) {
      if (logger.isDebugEnabled())       logger.debug("Updates are disabled. Faking latest version.");
      return true;
    }
    URL url=new URL(configString);
    URLConnection conn=url.openConnection();
    if (conn instanceof HttpURLConnection) {
      while (((HttpURLConnection)conn).getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED && !isAuthenticationCanceled) {
        if (userCredentials.getUserName() != null) {
          errorMessage=getResources().getI18NString("service.gui.AUTHENTICATION_FAILED",new String[]{userCredentials.getUserName(),host});
          userCredentials.setUserName(null);
          userCredentials.setPasswordPersistent(false);
          userCredentials=null;
          getConfigurationService().removeProperty(UPDATE_USERNAME_CONFIG);
          getConfigurationService().removeProperty(UPDATE_PASSWORD_CONFIG);
          conn=url.openConnection();
        }
 else         break;
      }
    }
    conn.setConnectTimeout(10000);
    conn.setReadTimeout(10000);
    Properties props=new Properties();
    props.load(conn.getInputStream());
    lastVersion=props.getProperty("last_version");
    downloadLink=props.getProperty("download_link");
    changesLink=configString.substring(0,configString.lastIndexOf("/") + 1) + props.getProperty("changes_html");
    return lastVersion.compareTo(ver.toString()) <= 0;
  }
 catch (  Exception e) {
    logger.warn("Cannot get and compare versions!");
    if (logger.isDebugEnabled())     logger.debug("Error was: ",e);
    return true;
  }
}
