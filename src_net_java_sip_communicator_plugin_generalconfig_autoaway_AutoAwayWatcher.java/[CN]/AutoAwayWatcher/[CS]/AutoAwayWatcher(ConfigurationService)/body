{
  String enabledDefault=GeneralConfigPluginActivator.getResources().getSettingsString(Preferences.ENABLE);
  if (configurationService.getBoolean(Preferences.ENABLE,Boolean.valueOf(enabledDefault)))   start();
  configurationService.addPropertyChangeListener(Preferences.ENABLE,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      if (Boolean.parseBoolean((String)evt.getNewValue()))       start();
 else       stopInner();
    }
  }
);
  configurationService.addPropertyChangeListener(Preferences.TIMER,new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent evt){
      stopInner();
      start();
    }
  }
);
  GeneralConfigPluginActivator.bundleContext.addServiceListener(this);
  ServiceReference[] protocolProviderRefs=null;
  try {
    protocolProviderRefs=GeneralConfigPluginActivator.bundleContext.getServiceReferences(ProtocolProviderService.class.getName(),null);
  }
 catch (  InvalidSyntaxException ex) {
    logger.error("Error while retrieving service refs",ex);
    return;
  }
  if (protocolProviderRefs != null) {
    for (int i=0; i < protocolProviderRefs.length; i++) {
      ProtocolProviderService provider=(ProtocolProviderService)GeneralConfigPluginActivator.bundleContext.getService(protocolProviderRefs[i]);
      this.handleProviderAdded(provider);
    }
  }
}
