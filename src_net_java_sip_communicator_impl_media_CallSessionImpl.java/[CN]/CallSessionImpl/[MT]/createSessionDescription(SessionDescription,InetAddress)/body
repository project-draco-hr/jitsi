{
  SdpFactory sdpFactory=mediaServCallback.getSdpFactory();
  try {
    SessionDescription sessDescr=sdpFactory.createSessionDescription();
    Version v=sdpFactory.createVersion(0);
    sessDescr.setVersion(v);
    if (offer != null) {
      Connection c=offer.getConnection();
      if (c != null) {
        try {
          intendedDestination=NetworkUtils.getInetAddress(c.getAddress());
        }
 catch (        SdpParseException ex) {
          logger.warn("error reading remote sdp. " + c.toString() + " is not a valid connection parameter.",ex);
        }
catch (        UnknownHostException ex) {
          logger.warn("error reading remote sdp. " + c.toString() + " does not contain a valid address.",ex);
        }
      }
      List<MediaDescription> mediaDescriptions=offer.getMediaDescriptions(true);
      for (      MediaDescription mediaDescription : mediaDescriptions) {
        Connection conn=mediaDescription.getConnection();
        if (conn != null) {
          try {
            intendedDestination=NetworkUtils.getInetAddress(conn.getAddress());
            break;
          }
 catch (          UnknownHostException e) {
            logger.debug("Couldn't determine indtended " + "destination from address" + conn.getAddress(),e);
          }
        }
      }
    }
    boolean allocateMediaPorts=false;
    if ((audioSessionAddress == null) || (videoSessionAddress == null)) {
      allocateMediaPorts=true;
    }
 else     if ((intendedDestination != null) && !intendedDestination.equals(lastIntendedDestination)) {
      stopStreaming(false);
    }
    if (allocateMediaPorts) {
      allocateMediaPorts(intendedDestination);
      lastIntendedDestination=intendedDestination;
    }
    InetAddress publicIpAddress=audioPublicAddress.getAddress();
    String addrType=publicIpAddress instanceof Inet6Address ? Connection.IP6 : Connection.IP4;
    Origin o=sdpFactory.createOrigin(call.getProtocolProvider().getAccountID().getUserID(),0,0,"IN",addrType,publicIpAddress.getHostAddress());
    sessDescr.setOrigin(o);
    Connection c=sdpFactory.createConnection("IN",addrType,publicIpAddress.getHostAddress());
    sessDescr.setConnection(c);
    sessDescr.setSessionName(sdpFactory.createSessionName("-"));
    TimeDescription t=sdpFactory.createTimeDescription();
    Vector<TimeDescription> timeDescs=new Vector<TimeDescription>();
    timeDescs.add(t);
    sessDescr.setTimeDescriptions(timeDescs);
    Vector<MediaDescription> offeredMediaDescriptions=(offer == null) ? null : offer.getMediaDescriptions(false);
    logger.debug("Will create media descs with: audio public address=" + audioPublicAddress + " and video public address="+ videoPublicAddress);
    Vector<MediaDescription> mediaDescs=createMediaDescriptions(offeredMediaDescriptions,audioPublicAddress,videoPublicAddress);
    sessDescr.setMediaDescriptions(mediaDescs);
    if (logger.isTraceEnabled())     logger.trace("Generated SDP - " + sessDescr.toString());
    return sessDescr;
  }
 catch (  SdpException exc) {
    throw new MediaException("An SDP exception occurred while generating local " + "SDP description",MediaException.INTERNAL_ERROR,exc);
  }
}
