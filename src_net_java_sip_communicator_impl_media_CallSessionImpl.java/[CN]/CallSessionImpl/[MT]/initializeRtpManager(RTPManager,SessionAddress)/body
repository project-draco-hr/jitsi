{
  selectedKeyProviderAlgorithm=selectKeyProviderAlgorithm(0);
  try {
    if (selectedKeyProviderAlgorithm != null && selectedKeyProviderAlgorithm.getProviderType() == KeyProviderAlgorithm.ProviderType.ZRTP_PROVIDER) {
      TransformConnector transConnector=TransformManager.createZRTPConnector(bindAddress);
      rtpManager.initialize(transConnector);
      this.transConnectors.put(rtpManager,transConnector);
      SecurityEventManager securityEventManager=new SecurityEventManager(this);
      boolean zrtpAutoStart=false;
      if (rtpManager.equals(audioRtpManager)) {
        if (zrtpDHSession == null) {
          zrtpDHSession=transConnector;
          zrtpAutoStart=true;
          securityEventManager.setDHSession(true);
        }
        securityEventManager.setSessionType(AUDIO_SESSION);
      }
 else       if (rtpManager.equals(videoRtpManager)) {
        securityEventManager.setSessionType(VIDEO_SESSION);
      }
      ZRTPTransformEngine engine=(ZRTPTransformEngine)transConnector.getEngine();
      engine.setUserCallback(securityEventManager);
      if (this.getCall().isDefaultEncrypted()) {
        ZrtpConfigure config=ZrtpConfigureUtils.getZrtpConfiguration();
        if (engine.initialize("GNUZRTP4J.zid",zrtpAutoStart,config)) {
          usingZRTP=true;
          engine.sendInfo(ZrtpCodes.MessageSeverity.Info,EnumSet.of(ZRTPCustomInfoCodes.ZRTPEnabledByDefault));
        }
 else {
          engine.sendInfo(ZrtpCodes.MessageSeverity.Info,EnumSet.of(ZRTPCustomInfoCodes.ZRTPEngineInitFailure));
        }
      }
 else {
        engine.sendInfo(ZrtpCodes.MessageSeverity.Info,EnumSet.of(ZRTPCustomInfoCodes.ZRTPNotEnabledByUser));
      }
      logger.trace("RTP" + (rtpManager.equals(audioRtpManager) ? " audio " : "video") + "manager initialized through connector");
    }
 else {
      rtpManager.initialize(bindAddress);
      logger.trace("RTP" + (rtpManager.equals(audioRtpManager) ? " audio " : "video") + "manager initialized normally");
    }
  }
 catch (  Exception exc) {
    exc.printStackTrace();
    logger.error("Failed to init an RTP manager.",exc);
    throw new MediaException("Failed to init an RTP manager.",MediaException.IO_ERROR,exc);
  }
  BufferControl bc=(BufferControl)rtpManager.getControl(BufferControl.class.getName());
  if (bc != null) {
    long buff=100;
    String buffStr=MediaActivator.getConfigurationService().getString(PROPERTY_NAME_RECEIVE_BUFFER_LENGTH);
    try {
      if (buffStr != null && buffStr.length() > 0)       buff=Long.parseLong(buffStr);
    }
 catch (    NumberFormatException exc) {
      logger.warn(buffStr + " is not a valid receive buffer value (integer).",exc);
    }
    buff=bc.setBufferLength(buff);
    logger.trace("set receiver buffer len to=" + buff);
    bc.setEnabledThreshold(true);
    bc.setMinimumThreshold(100);
  }
  rtpManager.addReceiveStreamListener(this);
  rtpManager.addSendStreamListener(this);
  rtpManager.addSessionListener(this);
}
