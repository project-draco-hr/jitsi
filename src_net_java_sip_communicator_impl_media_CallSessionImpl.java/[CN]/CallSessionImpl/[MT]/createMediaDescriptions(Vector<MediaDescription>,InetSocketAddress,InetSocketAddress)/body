{
  MediaControl mediaControl=mediaServCallback.getMediaControl(getCall());
  String[] supportedAudioEncodings=mediaControl.getSupportedAudioEncodings();
  String[] supportedVideoEncodings=mediaControl.getSupportedVideoEncodings();
  if (offerMediaDescs != null && offerMediaDescs.size() > 0) {
    Vector<String> offeredVideoEncodings=new Vector<String>();
    Vector<String> offeredAudioEncodings=new Vector<String>();
    for (    MediaDescription desc : offerMediaDescs) {
      Media media=desc.getMedia();
      String mediaType=media.getMediaType();
      if (mediaType.equalsIgnoreCase("video")) {
        offeredVideoEncodings=media.getMediaFormats(true);
      }
 else       if (mediaType.equalsIgnoreCase("audio")) {
        offeredAudioEncodings=media.getMediaFormats(true);
      }
    }
    Hashtable<String,List<String>> encodings=new Hashtable<String,List<String>>(2);
    encodings.put("audio",offeredAudioEncodings);
    encodings.put("video",offeredVideoEncodings);
    encodings=intersectMediaEncodings(encodings);
    List<String> intersectedAudioEncsList=encodings.get("audio");
    List<String> intersectedVideoEncsList=encodings.get("video");
    supportedAudioEncodings=intersectedAudioEncsList.toArray(new String[0]);
    supportedVideoEncodings=intersectedVideoEncsList.toArray(new String[0]);
  }
  Vector<MediaDescription> mediaDescs=new Vector<MediaDescription>();
  if (supportedAudioEncodings.length > 0) {
    MediaDescription am=mediaServCallback.getSdpFactory().createMediaDescription("audio",publicAudioAddress.getPort(),1,"RTP/AVP",supportedAudioEncodings);
    String g723Str=String.valueOf(SdpConstants.G723);
    for (    String supportedAudioEncoding : supportedAudioEncodings) {
      if (supportedAudioEncoding.equals(g723Str)) {
        am.setAttribute("rtpmap","4 G723/8000");
        am.setAttribute("fmtp","4 annexa=no;bitrate=6.3");
      }
    }
    byte onHold=this.onHold;
    if (!mediaServCallback.getDeviceConfiguration().isAudioCaptureSupported()) {
      onHold|=ON_HOLD_REMOTELY;
    }
    setAttributeOnHold(am,onHold);
    TransformConnector transConnector=this.transConnectors.get(audioRtpManager);
    if (transConnector != null) {
      TransformEngine engine=transConnector.getEngine();
      if (engine instanceof ZRTPTransformEngine) {
        ZRTPTransformEngine ze=(ZRTPTransformEngine)engine;
        String helloHash=ze.getHelloHash();
        if (helloHash != null && helloHash.length() > 0)         am.setAttribute("zrtp-hash",ze.getHelloHash());
      }
    }
    mediaDescs.add(am);
  }
  if (mediaServCallback.getDeviceConfiguration().isVideoCaptureSupported() && supportedVideoEncodings.length > 0) {
    MediaDescription vm=mediaServCallback.getSdpFactory().createMediaDescription("video",publicVideoAddress.getPort(),1,"RTP/AVP",supportedVideoEncodings);
    String h264Str=String.valueOf(Constants.H264_RTP_SDP);
    for (    String supportedVideoEncoding : supportedVideoEncodings) {
      if (supportedVideoEncoding.equals(h264Str)) {
        vm.setAttribute("rtpmap",Constants.H264_RTP_SDP + " H264/90000");
        vm.setAttribute("fmtp",Constants.H264_RTP_SDP + " packetization-mode=1");
      }
    }
    byte onHold=this.onHold;
    if (!mediaControl.isLocalVideoAllowed()) {
      onHold|=ON_HOLD_REMOTELY;
    }
    setAttributeOnHold(vm,onHold);
    TransformConnector transConnector=this.transConnectors.get(videoRtpManager);
    if (transConnector != null) {
      TransformEngine engine=transConnector.getEngine();
      if (engine instanceof ZRTPTransformEngine) {
        ZRTPTransformEngine ze=(ZRTPTransformEngine)engine;
        String helloHash=ze.getHelloHash();
        if (helloHash != null && helloHash.length() > 0)         vm.setAttribute("zrtp-hash",ze.getHelloHash());
      }
    }
    mediaDescs.add(vm);
  }
  return mediaDescs;
}
