{
  if (logger.isDebugEnabled())   logger.debug("Received a ControllerEvent: " + ce);
  Player player=(Player)ce.getSourceController();
  if (player == null) {
    return;
  }
  if (ce instanceof ConfigureCompleteEvent) {
    try {
      ((Processor)player).setContentDescriptor(new FileTypeDescriptor(FileTypeDescriptor.WAVE));
      player.realize();
    }
 catch (    Exception exc) {
      logger.error("failed to record to file",exc);
    }
  }
 else   if (ce instanceof RealizeCompleteEvent) {
    if (logger.isDebugEnabled())     logger.debug("A player was realized and will be started.");
    if (dataSink != null) {
      try {
        if (logger.isInfoEnabled())         logger.info("starting recording to file: " + dataSink);
        MediaLocator dest=new MediaLocator(dataSink);
        DataSink sink=Manager.createDataSink(((Processor)player).getDataOutput(),dest);
        player.start();
        RecordInitiator record=new RecordInitiator(sink);
        record.start();
      }
 catch (      Exception e) {
        logger.error("failed while trying to record to file",e);
      }
    }
 else {
      player.start();
    }
    Component visualComponent=player.getVisualComponent();
    if (visualComponent != null) {
      fireVideoEvent(VideoEvent.VIDEO_ADDED,visualComponent,VideoEvent.REMOTE);
    }
  }
 else   if (ce instanceof StartEvent) {
    if (logger.isDebugEnabled())     logger.debug("Received a StartEvent");
  }
 else   if (ce instanceof ControllerErrorEvent) {
    logger.error("The following error was reported while starting a player" + ce);
  }
 else   if (ce instanceof ControllerClosedEvent) {
    if (logger.isDebugEnabled())     logger.debug("Received a ControllerClosedEvent");
  }
}
