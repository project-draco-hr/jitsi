{
  Object newValue=evt.getNewValue();
  if (newValue == evt.getOldValue()) {
    if (logger.isDebugEnabled()) {
      logger.debug("Ignoring call state change from " + newValue + " to the same state.");
    }
    return;
  }
  if (newValue == CallState.CALL_IN_PROGRESS) {
    try {
      logger.debug("call connected. starting streaming");
      startStreaming();
      mediaServCallback.getMediaControl(getCall()).startProcessingMedia(this);
    }
 catch (    MediaException ex) {
      logger.error("Failed to start streaming.",ex);
    }
  }
 else   if (newValue == CallState.CALL_ENDED) {
    logger.warn("Stopping streaming.");
    stopStreaming();
    mediaServCallback.getMediaControl(getCall()).stopProcessingMedia(this);
    Iterator<Player> playersIter=players.iterator();
    while (playersIter.hasNext()) {
      Player player=playersIter.next();
      player.stop();
      Component visualComponent=getVisualComponent(player);
      if (visualComponent != null) {
        fireVideoEvent(VideoEvent.VIDEO_REMOVED,visualComponent,VideoEvent.REMOTE);
      }
      player.deallocate();
      player.close();
      playersIter.remove();
    }
    evt.getSourceCall().removeCallChangeListener(this);
    Component[] localVisualComponents=this.localVisualComponents.keySet().toArray(new Component[this.localVisualComponents.size()]);
    for (    Component localVisualComponent : localVisualComponents)     disposeLocalVisualComponent(localVisualComponent);
  }
}
