{
  SKP_Silk_shape_state_FLP psShapeSt=psEnc.sShape;
  int k, nSamples;
  float SNR_adj_dB, HarmBoost, HarmShapeGain, Tilt;
  float nrg, pre_nrg=0, log_energy, log_energy_prev, energy_variation;
  float delta, BWExp1, BWExp2, gain_mult, gain_add, strength, b;
  float[] x_windowed=new float[Silk_define.SHAPE_LPC_WIN_MAX];
  float[] auto_corr=new float[Silk_define.SHAPE_LPC_ORDER_MAX + 1];
  float[] x_ptr, pitch_res_ptr;
  int x_ptr_offset, pitch_res_ptr_offset=0;
  x_ptr=x;
  x_ptr_offset=x_offset + psEnc.sCmn.la_shape - Silk_define.SHAPE_LPC_WIN_MS * psEnc.sCmn.fs_kHz + psEnc.sCmn.subfr_length;
  psEncCtrl.current_SNR_dB=psEnc.SNR_dB - 0.05f * psEnc.BufferedInChannel_ms;
  if (psEnc.speech_activity > Silk_define_FLP.LBRR_SPEECH_ACTIVITY_THRES) {
    psEncCtrl.current_SNR_dB-=psEnc.inBandFEC_SNR_comp;
  }
  psEncCtrl.input_quality=0.5f * (psEncCtrl.input_quality_bands[0] + psEncCtrl.input_quality_bands[1]);
  psEncCtrl.coding_quality=Silk_SigProc_FLP.SKP_sigmoid(0.25f * (psEncCtrl.current_SNR_dB - 18.0f));
  b=1.0f - psEnc.speech_activity;
  SNR_adj_dB=psEncCtrl.current_SNR_dB - Silk_perceptual_parameters_FLP.BG_SNR_DECR_dB * psEncCtrl.coding_quality * (0.5f + 0.5f * psEncCtrl.input_quality)* b* b;
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    SNR_adj_dB+=Silk_perceptual_parameters_FLP.HARM_SNR_INCR_dB * psEnc.LTPCorr;
  }
 else {
    SNR_adj_dB+=(-0.4f * psEncCtrl.current_SNR_dB + 6.0f) * (1.0f - psEncCtrl.input_quality);
  }
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    psEncCtrl.sCmn.QuantOffsetType=0;
    psEncCtrl.sparseness=0.0f;
  }
 else {
    nSamples=2 * psEnc.sCmn.fs_kHz;
    energy_variation=0.0f;
    log_energy_prev=0.0f;
    pitch_res_ptr=pitch_res;
    pitch_res_ptr_offset=pitch_res_offset;
    for (k=0; k < Silk_define.FRAME_LENGTH_MS / 2; k++) {
      nrg=(float)nSamples + (float)Silk_energy_FLP.SKP_Silk_energy_FLP(pitch_res_ptr,pitch_res_ptr_offset,nSamples);
      log_energy=Silk_main_FLP.SKP_Silk_log2(nrg);
      if (k > 0) {
        energy_variation+=Math.abs(log_energy - log_energy_prev);
      }
      log_energy_prev=log_energy;
      pitch_res_ptr_offset+=nSamples;
    }
    psEncCtrl.sparseness=Silk_SigProc_FLP.SKP_sigmoid(0.4f * (energy_variation - 5.0f));
    if (psEncCtrl.sparseness > Silk_perceptual_parameters_FLP.SPARSENESS_THRESHOLD_QNT_OFFSET) {
      psEncCtrl.sCmn.QuantOffsetType=0;
    }
 else {
      psEncCtrl.sCmn.QuantOffsetType=1;
    }
    SNR_adj_dB+=Silk_perceptual_parameters_FLP.SPARSE_SNR_INCR_dB * (psEncCtrl.sparseness - 0.5f);
  }
  delta=Silk_perceptual_parameters_FLP.LOW_RATE_BANDWIDTH_EXPANSION_DELTA * (1.0f - 0.75f * psEncCtrl.coding_quality);
  BWExp1=Silk_perceptual_parameters_FLP.BANDWIDTH_EXPANSION - delta;
  BWExp2=Silk_perceptual_parameters_FLP.BANDWIDTH_EXPANSION + delta;
  if (psEnc.sCmn.fs_kHz == 24) {
    BWExp1=1.0f - (1.0f - BWExp1) * Silk_perceptual_parameters_FLP.SWB_BANDWIDTH_EXPANSION_REDUCTION;
    BWExp2=1.0f - (1.0f - BWExp2) * Silk_perceptual_parameters_FLP.SWB_BANDWIDTH_EXPANSION_REDUCTION;
  }
  BWExp1/=BWExp2;
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    Silk_apply_sine_window_FLP.SKP_Silk_apply_sine_window_FLP(x_windowed,0,x_ptr,x_ptr_offset,0,Silk_define.SHAPE_LPC_WIN_MS * psEnc.sCmn.fs_kHz);
    x_ptr_offset+=psEnc.sCmn.subfr_length;
    Silk_autocorrelation_FLP.SKP_Silk_autocorrelation_FLP(auto_corr,0,x_windowed,0,Silk_define.SHAPE_LPC_WIN_MS * psEnc.sCmn.fs_kHz,psEnc.sCmn.shapingLPCOrder + 1);
    auto_corr[0]+=auto_corr[0] * Silk_perceptual_parameters_FLP.SHAPE_WHITE_NOISE_FRACTION;
    nrg=Silk_levinsondurbin_FLP.SKP_Silk_levinsondurbin_FLP(psEncCtrl.AR2,k * Silk_define.SHAPE_LPC_ORDER_MAX,auto_corr,psEnc.sCmn.shapingLPCOrder);
    Silk_bwexpander_FLP.SKP_Silk_bwexpander_FLP(psEncCtrl.AR2,k * Silk_define.SHAPE_LPC_ORDER_MAX,psEnc.sCmn.shapingLPCOrder,BWExp2);
    LPC_fit_int16(psEncCtrl.AR2,k * Silk_define.SHAPE_LPC_ORDER_MAX,1.0f,psEnc.sCmn.shapingLPCOrder,3.999f);
    for (int i_djinn=0; i_djinn < psEnc.sCmn.shapingLPCOrder; i_djinn++)     psEncCtrl.AR1[k * Silk_define.SHAPE_LPC_ORDER_MAX + i_djinn]=psEncCtrl.AR2[k * Silk_define.SHAPE_LPC_ORDER_MAX + i_djinn];
    Silk_bwexpander_FLP.SKP_Silk_bwexpander_FLP(psEncCtrl.AR1,k * Silk_define.SHAPE_LPC_ORDER_MAX,psEnc.sCmn.shapingLPCOrder,BWExp1);
    nrg+=Silk_perceptual_parameters_FLP.SHAPE_MIN_ENERGY_RATIO * auto_corr[0];
    psEncCtrl.Gains[k]=(float)Math.sqrt(nrg);
    float[] pre_nrg_djinnaddress={pre_nrg};
    Silk_LPC_inv_pred_gain_FLP.SKP_Silk_LPC_inverse_pred_gain_FLP(pre_nrg_djinnaddress,psEncCtrl.AR2,k * Silk_define.SHAPE_LPC_ORDER_MAX,psEnc.sCmn.shapingLPCOrder);
    pre_nrg=pre_nrg_djinnaddress[0];
    float[] nrg_djinnaddress={nrg};
    Silk_LPC_inv_pred_gain_FLP.SKP_Silk_LPC_inverse_pred_gain_FLP(nrg_djinnaddress,psEncCtrl.AR1,k * Silk_define.SHAPE_LPC_ORDER_MAX,psEnc.sCmn.shapingLPCOrder);
    nrg=nrg_djinnaddress[0];
    psEncCtrl.GainsPre[k]=(float)Math.sqrt(pre_nrg / nrg);
  }
  gain_mult=(float)Math.pow(2.0f,-0.16f * SNR_adj_dB);
  gain_add=(float)Math.pow(2.0f,0.16f * Silk_perceptual_parameters_FLP.NOISE_FLOOR_dB) + (float)Math.pow(2.0f,0.16f * Silk_perceptual_parameters_FLP.RELATIVE_MIN_GAIN_dB) * psEnc.avgGain;
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    psEncCtrl.Gains[k]*=gain_mult;
    psEncCtrl.Gains[k]+=gain_add;
    psEnc.avgGain+=psEnc.speech_activity * Silk_perceptual_parameters_FLP.GAIN_SMOOTHING_COEF * (psEncCtrl.Gains[k] - psEnc.avgGain);
  }
  gain_mult=1.0f + Silk_perceptual_parameters_FLP.INPUT_TILT + psEncCtrl.coding_quality * Silk_perceptual_parameters_FLP.HIGH_RATE_INPUT_TILT;
  if (psEncCtrl.input_tilt <= 0.0f && psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_UNVOICED) {
    float essStrength=-psEncCtrl.input_tilt * psEnc.speech_activity * (1.0f - psEncCtrl.sparseness);
    if (psEnc.sCmn.fs_kHz == 24) {
      gain_mult*=(float)Math.pow(2.0f,-0.16f * Silk_perceptual_parameters_FLP.DE_ESSER_COEF_SWB_dB * essStrength);
    }
 else     if (psEnc.sCmn.fs_kHz == 16) {
      gain_mult*=(float)Math.pow(2.0f,-0.16f * Silk_perceptual_parameters_FLP.DE_ESSER_COEF_WB_dB * essStrength);
    }
 else {
      assert(psEnc.sCmn.fs_kHz == 12 || psEnc.sCmn.fs_kHz == 8);
    }
  }
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    psEncCtrl.GainsPre[k]*=gain_mult;
  }
  strength=Silk_perceptual_parameters_FLP.LOW_FREQ_SHAPING * (1.0f + Silk_perceptual_parameters_FLP.LOW_QUALITY_LOW_FREQ_SHAPING_DECR * (psEncCtrl.input_quality_bands[0] - 1.0f));
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    for (k=0; k < Silk_define.NB_SUBFR; k++) {
      b=0.2f / psEnc.sCmn.fs_kHz + 3.0f / psEncCtrl.sCmn.pitchL[k];
      psEncCtrl.LF_MA_shp[k]=-1.0f + b;
      psEncCtrl.LF_AR_shp[k]=1.0f - b - b * strength;
    }
    Tilt=-Silk_perceptual_parameters_FLP.HP_NOISE_COEF - (1 - Silk_perceptual_parameters_FLP.HP_NOISE_COEF) * Silk_perceptual_parameters_FLP.HARM_HP_NOISE_COEF * psEnc.speech_activity;
  }
 else {
    b=1.3f / psEnc.sCmn.fs_kHz;
    psEncCtrl.LF_MA_shp[0]=-1.0f + b;
    psEncCtrl.LF_AR_shp[0]=1.0f - b - b * strength * 0.6f;
    for (k=1; k < Silk_define.NB_SUBFR; k++) {
      psEncCtrl.LF_MA_shp[k]=psEncCtrl.LF_MA_shp[k - 1];
      psEncCtrl.LF_AR_shp[k]=psEncCtrl.LF_AR_shp[k - 1];
    }
    Tilt=-Silk_perceptual_parameters_FLP.HP_NOISE_COEF;
  }
  HarmBoost=Silk_perceptual_parameters_FLP.LOW_RATE_HARMONIC_BOOST * (1.0f - psEncCtrl.coding_quality) * psEnc.LTPCorr;
  HarmBoost+=Silk_perceptual_parameters_FLP.LOW_INPUT_QUALITY_HARMONIC_BOOST * (1.0f - psEncCtrl.input_quality);
  if (Silk_define.USE_HARM_SHAPING != 0 && psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    HarmShapeGain=Silk_perceptual_parameters_FLP.HARMONIC_SHAPING;
    HarmShapeGain+=Silk_perceptual_parameters_FLP.HIGH_RATE_OR_LOW_QUALITY_HARMONIC_SHAPING * (1.0f - (1.0f - psEncCtrl.coding_quality) * psEncCtrl.input_quality);
    HarmShapeGain*=(float)Math.sqrt(psEnc.LTPCorr);
  }
 else {
    HarmShapeGain=0.0f;
  }
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    psShapeSt.HarmBoost_smth+=Silk_perceptual_parameters_FLP.SUBFR_SMTH_COEF * (HarmBoost - psShapeSt.HarmBoost_smth);
    psEncCtrl.HarmBoost[k]=psShapeSt.HarmBoost_smth;
    psShapeSt.HarmShapeGain_smth+=Silk_perceptual_parameters_FLP.SUBFR_SMTH_COEF * (HarmShapeGain - psShapeSt.HarmShapeGain_smth);
    psEncCtrl.HarmShapeGain[k]=psShapeSt.HarmShapeGain_smth;
    psShapeSt.Tilt_smth+=Silk_perceptual_parameters_FLP.SUBFR_SMTH_COEF * (Tilt - psShapeSt.Tilt_smth);
    psEncCtrl.Tilt[k]=psShapeSt.Tilt_smth;
  }
}
