{
  return new AbstractFormatControl(){
    /** 
 * The <tt>Format</tt> of this <tt>FormatControl</tt> and,
 * respectively, of the media data of its owner.
 */
    private Format format;
    /** 
 * Gets the <tt>Format</tt> of the media data of the owner of
 * this <tt>FormatControl</tt>.
 * @return the <tt>Format</tt> of the media data of the owner of
 * this <tt>FormatControl</tt>
 */
    public Format getFormat(){
      format=AbstractBufferCaptureDevice.this.internalGetFormat(streamIndex,format);
      return format;
    }
    /** 
 * Gets the <tt>Format</tt>s in which the owner of this
 * <tt>FormatControl</tt> is capable of providing media data.
 * @return an array of <tt>Format</tt>s in which the owner of
 * this <tt>FormatControl</tt> is capable of providing media
 * data
 */
    public Format[] getSupportedFormats(){
      return AbstractBufferCaptureDevice.this.getSupportedFormats(streamIndex);
    }
    /** 
 * Implements {@link FormatControl#setFormat(Format)}. Attempts
 * to set the <tt>Format</tt> in which the owner of this
 * <tt>FormatControl</tt> is to provide media data.
 * @param format the <tt>Format</tt> to be set on this instance
 * @return the currently set <tt>Format</tt> after the attempt
 * to set it on this instance if <tt>format</tt> is supported by
 * this instance and regardless of whether it was actually set;
 * <tt>null</tt> if <tt>format</tt> is not supported by this
 * instance
 */
    @Override public Format setFormat(    Format format){
      Format setFormat=super.setFormat(format);
      if (setFormat != null) {
        setFormat=AbstractBufferCaptureDevice.this.internalSetFormat(streamIndex,setFormat,format);
        if (setFormat != null)         this.format=setFormat;
      }
      return setFormat;
    }
  }
;
}
