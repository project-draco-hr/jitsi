{
  if (!checkInputBuffer(inputBuffer))   return BUFFER_PROCESSED_FAILED;
  if (isEOM(inputBuffer) || !opened) {
    propagateEOM(outputBuffer);
    return BUFFER_PROCESSED_OK;
  }
  if (inputBuffer.isDiscard()) {
    inputBuffer.setDiscard(true);
    reset();
    return BUFFER_PROCESSED_OK;
  }
  got_picture[0]=false;
  FFmpeg.avcodec_decode_video(avcontext,avframe,got_picture,(byte[])inputBuffer.getData(),inputBuffer.getLength());
  if (!got_picture[0]) {
    outputBuffer.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  int avctxWidth=FFmpeg.avcodeccontext_get_width(avcontext);
  int avctxHeight=FFmpeg.avcodeccontext_get_height(avcontext);
  if ((avctxWidth != 0) && (avctxWidth != width)) {
    width=avctxWidth;
    Dimension outSize=new Dimension(avctxWidth,avctxHeight);
    VideoFormat ivf=(VideoFormat)inputBuffer.getFormat();
    float outFrameRate=ensureFrameRate(ivf.getFrameRate());
    outputFormat=new AVFrameFormat(outSize,outFrameRate);
  }
  outputBuffer.setFormat(outputFormat);
  Object outputData=outputBuffer.getData();
  if (!(outputData instanceof AVFrame) || (((AVFrame)outputData).getPtr() != avframe))   outputBuffer.setData(new AVFrame(avframe));
  return BUFFER_PROCESSED_OK;
}
