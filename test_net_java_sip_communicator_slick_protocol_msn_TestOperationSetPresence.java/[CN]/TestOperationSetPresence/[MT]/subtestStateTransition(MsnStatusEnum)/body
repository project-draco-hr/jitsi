{
  logger.trace(" --=== beginning state transition test ===--");
  PresenceStatus oldStatus=operationSetPresence1.getPresenceStatus();
  logger.debug("old status is=" + oldStatus.getStatusName() + " new status="+ newStatus.getStatusName());
  PresenceStatusEventCollector statusEventCollector=new PresenceStatusEventCollector();
  ContactPresenceEventCollector contactStatusEventCollector=new ContactPresenceEventCollector(fixture.userID1,newStatus);
  operationSetPresence1.addProviderPresenceStatusListener(statusEventCollector);
  operationSetPresence2.addContactPresenceStatusListener(contactStatusEventCollector);
  operationSetPresence1.publishPresenceStatus(newStatus,null);
  pauseAfterStateChanges();
  statusEventCollector.waitForPresEvent(10000);
  contactStatusEventCollector.waitForEvent(10000);
  operationSetPresence1.removeProviderPresenceStatusListener(statusEventCollector);
  operationSetPresence2.removeContactPresenceStatusListener(contactStatusEventCollector);
  assertEquals("Events dispatched during an event transition.",1,statusEventCollector.collectedPresEvents.size());
  assertEquals("A status changed event contained wrong old status.",oldStatus,((ProviderPresenceStatusChangeEvent)statusEventCollector.collectedPresEvents.get(0)).getOldStatus());
  assertEquals("A status changed event contained wrong new status.",newStatus,((ProviderPresenceStatusChangeEvent)statusEventCollector.collectedPresEvents.get(0)).getNewStatus());
  assertEquals("opSet.getPresenceStatus() did not return properly.",newStatus,operationSetPresence1.getPresenceStatus());
  logger.trace("will query for contact(" + fixture.userID1 + ") status!");
  MsnStatusEnum actualStatus=(MsnStatusEnum)operationSetPresence2.queryContactStatus(fixture.userID1);
  assertEquals("The underlying implementation did not switch to the " + "requested presence status.",newStatus,actualStatus);
  logger.trace(" --=== finished test ===--");
}
