{
  logger.debug("Testing Unsubscribe and unsubscription event dispatch.");
  SubscriptionEventCollector subEvtCollector=new SubscriptionEventCollector();
  operationSetPresence1.addSubscriptionListener(subEvtCollector);
  Contact msnTesterAgentContact=operationSetPresence1.findContactByID(fixture.userID2);
  assertNotNull("Failed to find an existing subscription for the tester agent",msnTesterAgentContact);
synchronized (subEvtCollector) {
    operationSetPresence1.unsubscribe(msnTesterAgentContact);
    subEvtCollector.waitForEvent(10000);
    operationSetPresence1.removeSubscriptionListener(subEvtCollector);
  }
  assertEquals("Subscription event dispatching failed.",1,subEvtCollector.collectedEvents.size());
  SubscriptionEvent subEvt=(SubscriptionEvent)subEvtCollector.collectedEvents.get(0);
  assertEquals("SubscriptionEvent Source:",msnTesterAgentContact,subEvt.getSource());
  assertEquals("SubscriptionEvent Source Contact:",msnTesterAgentContact,subEvt.getSourceContact());
  assertSame("SubscriptionEvent Source Provider:",fixture.provider1,subEvt.getSourceProvider());
  subEvtCollector.collectedEvents.clear();
  logger.debug("Testing (lack of) presence notifications.");
  MsnStatusEnum oldStatus=(MsnStatusEnum)operationSetPresence2.getPresenceStatus();
  MsnStatusEnum newStatus=MsnStatusEnum.IDLE;
  if (oldStatus.equals(newStatus)) {
    newStatus=MsnStatusEnum.BUSY;
  }
  ContactPresenceEventCollector contactPresEvtCollector=new ContactPresenceEventCollector(fixture.userID2,null);
  operationSetPresence1.addContactPresenceStatusListener(contactPresEvtCollector);
synchronized (contactPresEvtCollector) {
    operationSetPresence2.publishPresenceStatus(newStatus,"new status");
    contactPresEvtCollector.waitForEvent(10000);
    operationSetPresence1.removeContactPresenceStatusListener(contactPresEvtCollector);
  }
  assertEquals("Presence Notifications were received after unsubscibing.",0,contactPresEvtCollector.collectedEvents.size());
}
