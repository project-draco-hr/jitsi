{
  if (audioMixer == null)   audioMixer=new AudioMixer(device.createCaptureDevice()){
    @Override protected void connect(    DataSource dataSource,    DataSource inputDataSource) throws IOException {
      if (inputDataSource == captureDevice)       AudioMixerMediaDevice.this.connect(dataSource);
 else       super.connect(dataSource,inputDataSource);
    }
    @Override protected void read(    PushBufferStream stream,    Buffer buffer,    DataSource dataSource) throws IOException {
      super.read(stream,buffer,dataSource);
      if (dataSource == captureDevice) {
synchronized (localUserAudioLevelListeners) {
          if (localUserAudioLevelListeners.isEmpty())           return;
        }
        localUserAudioLevelDispatcher.addData(buffer);
      }
 else       if (dataSource instanceof ReceiveStreamPushBufferDataSource) {
        ReceiveStream receiveStream=((ReceiveStreamPushBufferDataSource)dataSource).getReceiveStream();
        AudioLevelEventDispatcher streamEventDispatcher;
synchronized (streamAudioLevelListeners) {
          streamEventDispatcher=streamAudioLevelListeners.get(receiveStream);
        }
        if (streamEventDispatcher != null && !buffer.isDiscard() && buffer.getLength() > 0 && buffer.getData() != null) {
          if (!streamEventDispatcher.isRunning())           new Thread(streamEventDispatcher,"StreamAudioLevelDispatcher (Mixer Edition)").start();
          streamEventDispatcher.addData(buffer);
        }
      }
    }
  }
;
  return audioMixer;
}
