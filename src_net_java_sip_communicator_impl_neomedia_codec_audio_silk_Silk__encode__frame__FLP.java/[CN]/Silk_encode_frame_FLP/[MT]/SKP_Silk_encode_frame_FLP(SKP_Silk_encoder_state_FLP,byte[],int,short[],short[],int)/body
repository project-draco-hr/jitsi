{
  SKP_Silk_encoder_control_FLP sEncCtrl=new SKP_Silk_encoder_control_FLP();
  int k, nBytes[]=new int[1], ret=0;
  float[] x_frame, res_pitch_frame;
  int x_frame_offset, res_pitch_frame_offset;
  short[] pIn_HP=new short[Silk_define.MAX_FRAME_LENGTH];
  short[] pIn_HP_LP=new short[Silk_define.MAX_FRAME_LENGTH];
  float[] xfw=new float[Silk_define.MAX_FRAME_LENGTH];
  float[] res_pitch=new float[2 * Silk_define.MAX_FRAME_LENGTH + Silk_define.LA_PITCH_MAX];
  int LBRR_idx, frame_terminator;
  byte[] LBRRpayload=new byte[Silk_define.MAX_ARITHM_BYTES];
  short[] nBytesLBRR=new short[1];
  int[] FrameTermination_CDF;
  sEncCtrl.sCmn.Seed=psEnc.sCmn.frameCounter++ & 3;
  x_frame=psEnc.x_buf;
  x_frame_offset=psEnc.x_buf_offset + psEnc.sCmn.frame_length;
  res_pitch_frame=res_pitch;
  res_pitch_frame_offset=psEnc.sCmn.frame_length;
  Silk_wrappers_FLP.SKP_Silk_VAD_FLP(psEnc,sEncCtrl,pIn,pIn_offset);
  if (Silk_define.HIGH_PASS_INPUT != 0) {
    Silk_HP_variable_cutoff_FLP.SKP_Silk_HP_variable_cutoff_FLP(psEnc,sEncCtrl,pIn_HP,0,pIn,pIn_offset);
  }
 else {
    System.arraycopy(pIn,pIn_offset,pIn_HP,0,psEnc.sCmn.frame_length);
  }
  if (Silk_define.SWITCH_TRANSITION_FILTERING != 0) {
    Silk_LP_variable_cutoff.SKP_Silk_LP_variable_cutoff(psEnc.sCmn.sLP,pIn_HP_LP,0,pIn_HP,0,psEnc.sCmn.frame_length);
  }
 else {
    System.arraycopy(pIn_HP,0,pIn_HP_LP,0,psEnc.sCmn.frame_length);
  }
  Silk_SigProc_FLP.SKP_short2float_array(x_frame,x_frame_offset + psEnc.sCmn.la_shape,pIn_HP_LP,0,psEnc.sCmn.frame_length);
  for (k=0; k < 8; k++) {
    x_frame[x_frame_offset + psEnc.sCmn.la_shape + k * (psEnc.sCmn.frame_length >> 3)]+=(1 - (k & 2)) * 1e-6f;
  }
  Silk_find_pitch_lags_FLP.SKP_Silk_find_pitch_lags_FLP(psEnc,sEncCtrl,res_pitch,x_frame,x_frame_offset);
  Silk_noise_shape_analysis_FLP.SKP_Silk_noise_shape_analysis_FLP(psEnc,sEncCtrl,res_pitch_frame,res_pitch_frame_offset,x_frame,x_frame_offset);
  Silk_prefilter_FLP.SKP_Silk_prefilter_FLP(psEnc,sEncCtrl,xfw,x_frame,x_frame_offset);
  Silk_find_pred_coefs_FLP.SKP_Silk_find_pred_coefs_FLP(psEnc,sEncCtrl,res_pitch);
  Silk_process_gains_FLP.SKP_Silk_process_gains_FLP(psEnc,sEncCtrl);
  nBytesLBRR[0]=Silk_define.MAX_ARITHM_BYTES;
  SKP_Silk_LBRR_encode_FLP(psEnc,sEncCtrl,LBRRpayload,nBytesLBRR,xfw);
  Silk_wrappers_FLP.SKP_Silk_NSQ_wrapper_FLP(psEnc,sEncCtrl,xfw,0,psEnc.sCmn.q,0,0);
  if (psEnc.speech_activity < Silk_define_FLP.SPEECH_ACTIVITY_DTX_THRES) {
    psEnc.sCmn.vadFlag=Silk_define.NO_VOICE_ACTIVITY;
    psEnc.sCmn.noSpeechCounter++;
    if (psEnc.sCmn.noSpeechCounter > Silk_define.NO_SPEECH_FRAMES_BEFORE_DTX) {
      psEnc.sCmn.inDTX=1;
    }
    if (psEnc.sCmn.noSpeechCounter > Silk_define.MAX_CONSECUTIVE_DTX) {
      psEnc.sCmn.noSpeechCounter=0;
      psEnc.sCmn.inDTX=0;
    }
  }
 else {
    psEnc.sCmn.noSpeechCounter=0;
    psEnc.sCmn.inDTX=0;
    psEnc.sCmn.vadFlag=Silk_define.VOICE_ACTIVITY;
  }
  if (psEnc.sCmn.nFramesInPayloadBuf == 0) {
    Silk_range_coder.SKP_Silk_range_enc_init(psEnc.sCmn.sRC);
    psEnc.sCmn.nBytesInPayloadBuf=0;
  }
  Silk_encode_parameters.SKP_Silk_encode_parameters(psEnc.sCmn,sEncCtrl.sCmn,psEnc.sCmn.sRC,psEnc.sCmn.q);
  FrameTermination_CDF=Silk_tables_other.SKP_Silk_FrameTermination_CDF;
  System.arraycopy(psEnc.x_buf,psEnc.x_buf_offset + psEnc.sCmn.frame_length,psEnc.x_buf,psEnc.x_buf_offset,psEnc.sCmn.frame_length + psEnc.sCmn.la_shape);
  psEnc.sCmn.prev_sigtype=sEncCtrl.sCmn.sigtype;
  psEnc.sCmn.prevLag=sEncCtrl.sCmn.pitchL[Silk_define.NB_SUBFR - 1];
  psEnc.sCmn.first_frame_after_reset=0;
  if (psEnc.sCmn.sRC.error != 0) {
    psEnc.sCmn.nFramesInPayloadBuf=0;
  }
 else {
    psEnc.sCmn.nFramesInPayloadBuf++;
  }
  if (psEnc.sCmn.nFramesInPayloadBuf * Silk_define.FRAME_LENGTH_MS >= psEnc.sCmn.PacketSize_ms) {
    LBRR_idx=(psEnc.sCmn.oldest_LBRR_idx + 1) & Silk_define.LBRR_IDX_MASK;
    frame_terminator=Silk_define.SKP_SILK_LAST_FRAME;
    if (psEnc.sCmn.LBRR_buffer[LBRR_idx].usage == Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS1) {
      frame_terminator=Silk_define.SKP_SILK_LBRR_VER1;
    }
    if (psEnc.sCmn.LBRR_buffer[psEnc.sCmn.oldest_LBRR_idx].usage == Silk_define.SKP_SILK_ADD_LBRR_TO_PLUS2) {
      frame_terminator=Silk_define.SKP_SILK_LBRR_VER2;
      LBRR_idx=psEnc.sCmn.oldest_LBRR_idx;
    }
    Silk_range_coder.SKP_Silk_range_encoder(psEnc.sCmn.sRC,frame_terminator,FrameTermination_CDF,0);
    Silk_range_coder.SKP_Silk_range_coder_get_length(psEnc.sCmn.sRC,nBytes);
    if (pnBytesOut[0] >= nBytes[0]) {
      Silk_range_coder.SKP_Silk_range_enc_wrap_up(psEnc.sCmn.sRC);
      System.arraycopy(psEnc.sCmn.sRC.buffer,0,pCode,pCode_offset,nBytes[0]);
      if (frame_terminator > Silk_define.SKP_SILK_MORE_FRAMES && pnBytesOut[0] >= nBytes[0] + psEnc.sCmn.LBRR_buffer[LBRR_idx].nBytes) {
        System.arraycopy(psEnc.sCmn.LBRR_buffer[LBRR_idx].payload,0,pCode,pCode_offset + nBytes[0],psEnc.sCmn.LBRR_buffer[LBRR_idx].nBytes);
        nBytes[0]+=psEnc.sCmn.LBRR_buffer[LBRR_idx].nBytes;
      }
      pnBytesOut[0]=(short)nBytes[0];
      System.arraycopy(LBRRpayload,0,psEnc.sCmn.LBRR_buffer[psEnc.sCmn.oldest_LBRR_idx].payload,0,nBytesLBRR[0]);
      psEnc.sCmn.LBRR_buffer[psEnc.sCmn.oldest_LBRR_idx].nBytes=nBytesLBRR[0];
      psEnc.sCmn.LBRR_buffer[psEnc.sCmn.oldest_LBRR_idx].usage=sEncCtrl.sCmn.LBRR_usage;
      psEnc.sCmn.oldest_LBRR_idx=((psEnc.sCmn.oldest_LBRR_idx + 1) & Silk_define.LBRR_IDX_MASK);
      psEnc.sCmn.nFramesInPayloadBuf=0;
    }
 else {
      pnBytesOut[0]=0;
      nBytes[0]=0;
      psEnc.sCmn.nFramesInPayloadBuf=0;
      ret=Silk_errors.SKP_SILK_ENC_PAYLOAD_BUF_TOO_SHORT;
    }
  }
 else {
    pnBytesOut[0]=0;
    frame_terminator=Silk_define.SKP_SILK_MORE_FRAMES;
    Silk_range_coder.SKP_Silk_range_encoder(psEnc.sCmn.sRC,frame_terminator,FrameTermination_CDF,0);
    Silk_range_coder.SKP_Silk_range_coder_get_length(psEnc.sCmn.sRC,nBytes);
  }
  if (psEnc.sCmn.sRC.error != 0) {
    ret=Silk_errors.SKP_SILK_ENC_INTERNAL_ERROR;
  }
  psEnc.BufferedInChannel_ms+=(8.0f * 1000.0f * (nBytes[0] - psEnc.sCmn.nBytesInPayloadBuf)) / psEnc.sCmn.TargetRate_bps;
  psEnc.BufferedInChannel_ms-=Silk_define.FRAME_LENGTH_MS;
  psEnc.BufferedInChannel_ms=Silk_SigProc_FLP.SKP_LIMIT_float(psEnc.BufferedInChannel_ms,0.0f,100.0f);
  psEnc.sCmn.nBytesInPayloadBuf=nBytes[0];
  if (psEnc.speech_activity > Silk_define_FLP.WB_DETECT_ACTIVE_SPEECH_LEVEL_THRES) {
    psEnc.sCmn.sSWBdetect.ActiveSpeech_ms=Silk_SigProc_FIX.SKP_ADD_POS_SAT32(psEnc.sCmn.sSWBdetect.ActiveSpeech_ms,Silk_define.FRAME_LENGTH_MS);
  }
  return (ret);
}
