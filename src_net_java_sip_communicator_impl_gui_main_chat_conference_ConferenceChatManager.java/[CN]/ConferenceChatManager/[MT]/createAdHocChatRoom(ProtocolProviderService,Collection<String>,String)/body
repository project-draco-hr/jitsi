{
  AdHocChatRoomWrapper chatRoomWrapper=null;
  OperationSetAdHocMultiUserChat groupChatOpSet=protocolProvider.getOperationSet(OperationSetAdHocMultiUserChat.class);
  if (groupChatOpSet == null)   return null;
  AdHocChatRoom chatRoom=null;
  try {
    java.util.List<String> members=new LinkedList<String>();
    for (    String address : contacts)     members.add(address);
    chatRoom=groupChatOpSet.createAdHocChatRoom("chatroom-" + new Date().getTime(),members,reason);
  }
 catch (  OperationFailedException ex) {
    new ErrorDialog(GuiActivator.getUIService().getMainFrame(),GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CREATE_CHAT_ROOM_ERROR",new String[]{protocolProvider.getProtocolName()}),ex).showDialog();
  }
catch (  OperationNotSupportedException ex) {
    new ErrorDialog(GuiActivator.getUIService().getMainFrame(),GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CREATE_CHAT_ROOM_ERROR",new String[]{protocolProvider.getProtocolName()}),ex).showDialog();
  }
  if (chatRoom != null) {
    AdHocChatRoomProviderWrapper parentProvider=adHocChatRoomList.findServerWrapperFromProvider(protocolProvider);
    chatRoomWrapper=new AdHocChatRoomWrapper(parentProvider,chatRoom);
    parentProvider.addAdHocChatRoom(chatRoomWrapper);
    adHocChatRoomList.addAdHocChatRoom(chatRoomWrapper);
    fireAdHocChatRoomListChangedEvent(chatRoomWrapper,AdHocChatRoomListChangeEvent.AD_HOC_CHAT_ROOM_ADDED);
  }
  return chatRoomWrapper;
}
