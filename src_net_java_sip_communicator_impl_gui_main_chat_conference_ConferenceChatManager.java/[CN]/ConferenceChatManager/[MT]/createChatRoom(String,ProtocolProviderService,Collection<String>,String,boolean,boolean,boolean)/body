{
  ChatRoomWrapper chatRoomWrapper=null;
  OperationSetMultiUserChat groupChatOpSet=protocolProvider.getOperationSet(OperationSetMultiUserChat.class);
  if (groupChatOpSet == null)   return null;
  ChatRoom chatRoom=null;
  try {
    HashMap<String,Object> roomProperties=new HashMap<String,Object>();
    roomProperties.put("isPrivate",isPrivate);
    chatRoom=groupChatOpSet.createChatRoom(roomName,roomProperties);
    if (join) {
      chatRoom.join();
      for (      String contact : contacts)       chatRoom.invite(contact,reason);
    }
  }
 catch (  OperationFailedException ex) {
    logger.error("Failed to create chat room.",ex);
    new ErrorDialog(GuiActivator.getUIService().getMainFrame(),GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CREATE_CHAT_ROOM_ERROR",new String[]{protocolProvider.getProtocolName()}),ex).showDialog();
  }
catch (  OperationNotSupportedException ex) {
    logger.error("Failed to create chat room.",ex);
    new ErrorDialog(GuiActivator.getUIService().getMainFrame(),GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CREATE_CHAT_ROOM_ERROR",new String[]{protocolProvider.getProtocolName()}),ex).showDialog();
  }
  if (chatRoom != null) {
    ChatRoomProviderWrapper parentProvider=chatRoomList.findServerWrapperFromProvider(protocolProvider);
    chatRoomWrapper=chatRoomList.findChatRoomWrapperFromChatRoom(chatRoom);
    if (chatRoomWrapper == null) {
      chatRoomWrapper=new ChatRoomWrapper(parentProvider,chatRoom);
      chatRoomWrapper.setPersistent(persistent);
      chatRoomList.addChatRoom(chatRoomWrapper);
      fireChatRoomListChangedEvent(chatRoomWrapper,ChatRoomListChangeEvent.CHAT_ROOM_ADDED);
    }
  }
  return chatRoomWrapper;
}
