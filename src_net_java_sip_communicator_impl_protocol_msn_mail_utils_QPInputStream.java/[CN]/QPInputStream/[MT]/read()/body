{
  if (spaceCount > 0) {
    spaceCount--;
    return SPACE;
  }
  int c=in.read();
  if (c == SPACE) {
    while ((c=in.read()) == SPACE)     spaceCount++;
    if (c == LF || c == CR || c == -1)     spaceCount=0;
 else {
      ((PushbackInputStream)in).unread(c);
      c=SPACE;
    }
    return c;
  }
  if (c == EQ) {
    int c2=super.in.read();
    if (c2 == LF)     return read();
    if (c2 == CR) {
      int peek=in.read();
      if (peek != LF)       ((PushbackInputStream)in).unread(peek);
      return read();
    }
    if (c2 == -1)     return c2;
    buf[0]=(byte)c2;
    buf[1]=(byte)in.read();
    try {
      return Integer.parseInt(new String(buf,0,2),16);
    }
 catch (    NumberFormatException e) {
      ((PushbackInputStream)in).unread(buf);
    }
    return c;
  }
 else   return c;
}
