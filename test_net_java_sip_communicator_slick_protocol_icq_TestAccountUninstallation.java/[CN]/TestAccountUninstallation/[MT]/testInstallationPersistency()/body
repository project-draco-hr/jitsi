{
  Bundle providerBundle=IcqSlickFixture.findProtocolProviderBundle(fixture.provider);
  IcqSlickFixture.providerBundle=providerBundle;
  assertNotNull("Couldn't find a bundle for the tested provider",providerBundle);
  providerBundle.stop();
  assertTrue("Couldn't stop the protocol provider bundle. State was " + providerBundle.getState(),Bundle.ACTIVE != providerBundle.getState() && Bundle.STOPPING != providerBundle.getState());
  providerBundle.uninstall();
  assertEquals("Couldn't stop the protocol provider bundle.",Bundle.UNINSTALLED,providerBundle.getState());
  ServiceReference[] icqProviderRefs=null;
  try {
    icqProviderRefs=IcqSlickFixture.bc.getServiceReferences(ProtocolProviderService.class.getName(),"(&" + "(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.ICQ+ ")"+ "("+ ProtocolProviderFactory.USER_ID+ "="+ IcqSlickFixture.icqAccountID.getUserID()+ ")"+ ")");
  }
 catch (  InvalidSyntaxException ex) {
    fail("We apparently got our filter wrong: " + ex.getMessage());
  }
  assertTrue("A Protocol Provider Service was still regged as an osgi service " + "for ICQ UIN:" + IcqSlickFixture.icqAccountID + "After it was explicitly uninstalled",icqProviderRefs == null || icqProviderRefs.length == 0);
  assertTrue("The ICQ provider factory kept a reference to the provider we just " + "uninstalled (accID=" + IcqSlickFixture.icqAccountID + ")",fixture.providerFactory.getRegisteredAccounts().isEmpty() && fixture.providerFactory.getProviderForAccount(IcqSlickFixture.icqAccountID) == null);
  providerBundle=IcqSlickFixture.bc.installBundle(providerBundle.getLocation());
  IcqSlickFixture.providerBundle=providerBundle;
  assertEquals("Couldn't re-install protocol provider bundle.",Bundle.INSTALLED,providerBundle.getState());
  AccountManagerUtils.startBundleAndWaitStoredAccountsLoaded(IcqSlickFixture.bc,providerBundle,ProtocolNames.ICQ);
  assertEquals("Couldn't re-start protocol provider bundle.",Bundle.ACTIVE,providerBundle.getState());
  try {
    icqProviderRefs=IcqSlickFixture.bc.getServiceReferences(ProtocolProviderService.class.getName(),"(&" + "(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.ICQ+ ")"+ "("+ ProtocolProviderFactory.USER_ID+ "="+ IcqSlickFixture.icqAccountID.getUserID()+ ")"+ ")");
  }
 catch (  InvalidSyntaxException ex) {
    fail("We apparently got our filter wrong: " + ex.getMessage());
  }
  assertTrue("A Protocol Provider Service was not restored after being" + "reinstalled. ICQ UIN:" + IcqSlickFixture.icqAccountID,icqProviderRefs != null && icqProviderRefs.length > 0);
  ServiceReference[] icqFactoryRefs=null;
  try {
    icqFactoryRefs=IcqSlickFixture.bc.getServiceReferences(ProtocolProviderFactory.class.getName(),"(" + ProtocolProviderFactory.PROTOCOL + "="+ ProtocolNames.ICQ+ ")");
  }
 catch (  InvalidSyntaxException ex) {
    fail("We apparently got our filter wrong: " + ex.getMessage());
  }
  fixture.providerFactory=(ProtocolProviderFactory)IcqSlickFixture.bc.getService(icqFactoryRefs[0]);
  fixture.provider=(ProtocolProviderService)IcqSlickFixture.bc.getService(icqProviderRefs[0]);
  IcqSlickFixture.icqAccountID=fixture.provider.getAccountID();
  assertTrue("The ICQ provider did not restore its own reference to the provider " + "that we just reinstalled (accID=" + IcqSlickFixture.icqAccountID + ")",!fixture.providerFactory.getRegisteredAccounts().isEmpty() && fixture.providerFactory.getProviderForAccount(IcqSlickFixture.icqAccountID) != null);
}
