{
  int NC0=Ld8k.NC0;
  int NC0_B=Ld8k.NC0_B;
  int NC1=Ld8k.NC1;
  int NC1_B=Ld8k.NC1_B;
  float[][][] fg=TabLd8k.fg;
  float[][] fg_sum=TabLd8k.fg_sum;
  float[][] fg_sum_inv=TabLd8k.fg_sum_inv;
  float[][] lspcb1=TabLd8k.lspcb1;
  float[][] lspcb2=TabLd8k.lspcb2;
  int mode_index;
  int code0;
  int code1;
  int code2;
  float[] buf=new float[M];
  if (erase == 0) {
    mode_index=(prm[prm_offset + 0] >>> NC0_B) & 1;
    code0=prm[prm_offset + 0] & (short)(NC0 - 1);
    code1=(prm[prm_offset + 1] >>> NC1_B) & (short)(NC1 - 1);
    code2=prm[prm_offset + 1] & (short)(NC1 - 1);
    Lspgetq.lsp_get_quant(lspcb1,lspcb2,code0,code1,code2,fg[mode_index],freq_prev,lsp_q,fg_sum[mode_index]);
    Util.copy(lsp_q,prev_lsp,M);
    prev_ma=mode_index;
  }
 else {
    Util.copy(prev_lsp,lsp_q,M);
    Lspgetq.lsp_prev_extract(prev_lsp,buf,fg[prev_ma],freq_prev,fg_sum_inv[prev_ma]);
    Lspgetq.lsp_prev_update(buf,freq_prev);
  }
}
