{
  ProtocolProviderService protocolProvider=evt.getProvider();
  AccountID accountID=protocolProvider.getAccountID();
  logger.trace("Protocol provider: " + protocolProvider + " changed its state to: "+ evt.getNewState().getStateName());
  OperationSetPresence presence=mainFrame.getProtocolPresenceOpSet(protocolProvider);
  OperationSetMultiUserChat multiUserChat=mainFrame.getMultiUserChatOpSet(protocolProvider);
  if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    this.mainFrame.getStatusPanel().updateStatus(protocolProvider);
    if (mainFrame.getCallManager().containsCallAccount(protocolProvider)) {
      this.mainFrame.getCallManager().updateCallAccountStatus(protocolProvider);
    }
    if (presence != null) {
      presence.setAuthorizationHandler(new AuthorizationHandlerImpl(mainFrame));
    }
    if (multiUserChat != null) {
      mainFrame.getChatRoomsListPanel().getChatRoomsList().synchronizeOpSetWithLocalContactList(protocolProvider,multiUserChat);
    }
  }
 else   if (evt.getNewState().equals(RegistrationState.AUTHENTICATION_FAILED)) {
    this.mainFrame.getStatusPanel().updateStatus(evt.getProvider());
    if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_RECONNECTION_RATE_LIMIT_EXCEEDED) {
      String msgText=Messages.getI18NString("reconnectionLimitExceeded",new String[]{accountID.getUserID(),accountID.getService()}).getText();
      new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID) {
      String msgText=Messages.getI18NString("nonExistingUserId",new String[]{protocolProvider.getProtocolName()}).getText();
      new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED) {
      String msgText=Messages.getI18NString("authenticationFailed",new String[]{accountID.getUserID(),accountID.getService()}).getText();
      new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
    }
    logger.error(evt.getReason());
  }
 else   if (evt.getNewState().equals(RegistrationState.CONNECTION_FAILED)) {
    this.mainFrame.getStatusPanel().updateStatus(evt.getProvider());
    String msgText=Messages.getI18NString("connectionFailedMessage",new String[]{accountID.getUserID(),accountID.getService()}).getText();
    new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
    logger.error(evt.getReason());
  }
 else   if (evt.getNewState().equals(RegistrationState.EXPIRED)) {
    this.mainFrame.getStatusPanel().updateStatus(evt.getProvider());
    String msgText=Messages.getI18NString("connectionExpiredMessage",new String[]{protocolProvider.getProtocolName()}).getText();
    new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
    logger.error(evt.getReason());
  }
 else   if (evt.getNewState().equals(RegistrationState.UNREGISTERED)) {
    this.mainFrame.getStatusPanel().updateStatus(evt.getProvider());
    if (mainFrame.getCallManager().containsCallAccount(protocolProvider)) {
      this.mainFrame.getCallManager().updateCallAccountStatus(protocolProvider);
    }
    if (!manuallyDisconnected) {
      if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_MULTIPLE_LOGINS) {
        String msgText=Messages.getI18NString("multipleLogins",new String[]{accountID.getUserID(),accountID.getService()}).getText();
        new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
      }
 else       if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_CLIENT_LIMIT_REACHED_FOR_IP) {
        String msgText=Messages.getI18NString("limitReachedForIp",new String[]{protocolProvider.getProtocolName()}).getText();
        new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
      }
 else       if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_USER_REQUEST) {
      }
 else {
        String msgText=Messages.getI18NString("unregisteredMessage",new String[]{accountID.getUserID(),accountID.getService()}).getText();
        new ErrorDialog(null,msgText,Messages.getI18NString("error").getText()).showDialog();
      }
      logger.error(evt.getReason());
    }
  }
}
