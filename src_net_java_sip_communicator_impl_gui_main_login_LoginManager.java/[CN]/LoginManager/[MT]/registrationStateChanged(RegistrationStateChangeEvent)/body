{
  ProtocolProviderService protocolProvider=evt.getProvider();
  if (evt.getNewState().equals(RegistrationState.REGISTERED)) {
    Map supportedOpSets=protocolProvider.getSupportedOperationSets();
    this.mainFrame.addProtocolProvider(protocolProvider);
    this.mainFrame.addProtocolSupportedOperationSets(protocolProvider,supportedOpSets);
  }
 else   if (evt.getNewState().equals(RegistrationState.AUTHENTICATION_FAILED)) {
    StatusPanel statusPanel=this.mainFrame.getStatusPanel();
    statusPanel.stopConnecting(protocolProvider.getProtocolName());
    statusPanel.setSelectedStatus(protocolProvider.getProtocolName(),Constants.OFFLINE_STATUS);
    if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_RECONNECTION_RATE_LIMIT_EXCEEDED) {
      JOptionPane.showMessageDialog(null,Messages.getString("reconnectionLimitExceeded",protocolProvider.getAccountID().getAccountUserID()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID) {
      JOptionPane.showMessageDialog(null,Messages.getString("nonExistingUserId",protocolProvider.getProtocolName()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED) {
      JOptionPane.showMessageDialog(null,Messages.getString("authenticationFailed"),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
    ((LoginWindow)this.loginWindows.get(protocolProvider.getProtocolName())).showWindow();
  }
 else   if (evt.getNewState().equals(RegistrationState.CONNECTION_FAILED)) {
    this.mainFrame.getStatusPanel().stopConnecting(evt.getProvider().getProtocolName());
    this.mainFrame.getStatusPanel().setSelectedStatus(evt.getProvider().getProtocolName(),Constants.OFFLINE_STATUS);
    JOptionPane.showMessageDialog(null,Messages.getString("connectionFailedMessage"),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
  }
 else   if (evt.getNewState().equals(RegistrationState.EXPIRED)) {
    JOptionPane.showMessageDialog(null,Messages.getString("connectionExpiredMessage",protocolProvider.getProtocolName()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
  }
 else   if (evt.getNewState().equals(RegistrationState.UNREGISTERED)) {
    if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_MULTIPLE_LOGINS) {
      JOptionPane.showMessageDialog(null,Messages.getString("multipleLogins",protocolProvider.getAccountID().getAccountUserID()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_CLIENT_LIMIT_REACHED_FOR_IP) {
      JOptionPane.showMessageDialog(null,Messages.getString("limitReachedForIp",protocolProvider.getProtocolName()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
 else {
      JOptionPane.showMessageDialog(null,Messages.getString("unregisteredMessage",protocolProvider.getProtocolName()),Messages.getString("error"),JOptionPane.ERROR_MESSAGE);
    }
    this.mainFrame.getStatusPanel().stopConnecting(evt.getProvider().getProtocolName());
    this.mainFrame.getStatusPanel().setSelectedStatus(evt.getProvider().getProtocolName(),Constants.OFFLINE_STATUS);
  }
}
