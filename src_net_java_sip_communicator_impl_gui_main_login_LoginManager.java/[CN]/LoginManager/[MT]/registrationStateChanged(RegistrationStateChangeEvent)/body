{
  RegistrationState newState=evt.getNewState();
  ProtocolProviderService protocolProvider=evt.getProvider();
  AccountID accountID=protocolProvider.getAccountID();
  logger.trace("Protocol provider: " + protocolProvider + " changed its state to: "+ evt.getNewState().getStateName());
  if (newState.equals(RegistrationState.REGISTERED)) {
    OperationSetPresence presence=MainFrame.getProtocolPresenceOpSet(protocolProvider);
    OperationSetMultiUserChat multiUserChat=mainFrame.getMultiUserChatOpSet(protocolProvider);
    if (presence != null) {
      presence.setAuthorizationHandler(new AuthorizationHandlerImpl(mainFrame));
    }
    if (multiUserChat != null) {
      GuiActivator.getUIService().getConferenceChatManager().getChatRoomList().synchronizeOpSetWithLocalContactList(protocolProvider,multiUserChat);
    }
  }
 else   if (newState.equals(RegistrationState.AUTHENTICATION_FAILED)) {
    if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_RECONNECTION_RATE_LIMIT_EXCEEDED) {
      String msgText=GuiActivator.getResources().getI18NString("service.gui.RECONNECTION_LIMIT_EXCEEDED",new String[]{accountID.getUserID(),accountID.getService()});
      new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
    }
 else     if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID) {
      String msgText=GuiActivator.getResources().getI18NString("service.gui.NON_EXISTING_USER_ID",new String[]{protocolProvider.getProtocolDisplayName()});
      new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
    }
    logger.trace(evt.getReason());
  }
 else   if (newState.equals(RegistrationState.EXPIRED)) {
    String msgText=GuiActivator.getResources().getI18NString("service.gui.CONNECTION_EXPIRED_MSG",new String[]{protocolProvider.getProtocolDisplayName()});
    new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
    logger.error(evt.getReason());
  }
 else   if (newState.equals(RegistrationState.UNREGISTERED)) {
    if (!manuallyDisconnected) {
      if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_MULTIPLE_LOGINS) {
        String msgText=GuiActivator.getResources().getI18NString("service.gui.MULTIPLE_LOGINS",new String[]{accountID.getUserID(),accountID.getService()});
        new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
      }
 else       if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_CLIENT_LIMIT_REACHED_FOR_IP) {
        String msgText=GuiActivator.getResources().getI18NString("service.gui.LIMIT_REACHED_FOR_IP",new String[]{protocolProvider.getProtocolDisplayName()});
        new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
      }
 else       if (evt.getReasonCode() == RegistrationStateChangeEvent.REASON_USER_REQUEST) {
      }
 else {
        String msgText=GuiActivator.getResources().getI18NString("service.gui.UNREGISTERED_MESSAGE",new String[]{accountID.getUserID(),accountID.getService()});
        new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),msgText).showDialog();
      }
      logger.trace(evt.getReason());
    }
  }
}
