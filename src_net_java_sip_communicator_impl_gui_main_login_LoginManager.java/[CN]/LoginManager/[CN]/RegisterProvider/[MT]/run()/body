{
  try {
    protocolProvider.register(secAuth);
  }
 catch (  OperationFailedException ex) {
    int errorCode=ex.getErrorCode();
    if (errorCode == OperationFailedException.GENERAL_ERROR) {
      logger.error("Provider could not be registered" + " due to the following general error: ",ex);
    }
 else     if (errorCode == OperationFailedException.INTERNAL_ERROR) {
      logger.error("Provider could not be registered" + " due to the following internal error: ",ex);
    }
 else     if (errorCode == OperationFailedException.NETWORK_FAILURE) {
      logger.error("Provider could not be registered" + " due to a network failure: " + ex);
    }
 else     if (errorCode == OperationFailedException.INVALID_ACCOUNT_PROPERTIES) {
      logger.error("Provider could not be registered" + " due to an invalid account property: ",ex);
    }
 else {
      logger.error("Provider could not be registered.",ex);
    }
    new ErrorDialog(mainFrame,Messages.getI18NString("loginNotSucceeded",new String[]{protocolProvider.getAccountID().getUserID(),protocolProvider.getAccountID().getService()}).getText(),ex,Messages.getI18NString("error").getText()).showDialog();
    mainFrame.getStatusPanel().updateStatus(protocolProvider);
  }
catch (  Throwable ex) {
    logger.error("Failed to register protocol provider. ",ex);
    new ErrorDialog(mainFrame,Messages.getI18NString("loginNotSucceeded",new String[]{protocolProvider.getAccountID().getUserID(),protocolProvider.getAccountID().getService()}).getText(),Messages.getI18NString("error").getText()).showDialog();
    mainFrame.getStatusPanel().updateStatus(protocolProvider);
  }
}
