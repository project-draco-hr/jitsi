{
  if (contactID.equals(id))   return;
  if (info.getAddress().toString().length() > 15) {
    logger.debug("ZEROCONF: Temporarily ignoring IPv6 addresses!");
    return;
  }
  ContactZeroconfImpl newFriend;
synchronized (this) {
    if (getContact(contactID,info.getAddress()) != null) {
      logger.debug("Contact " + contactID + " already in contact list! Skipping.");
      return;
    }
    ;
    logger.debug("ZEROCNF: ContactID " + contactID + " Address "+ info.getAddress());
    logger.debug("            Address=>" + info.getAddress() + ":"+ info.getPort());
    for (Enumeration names=info.getPropertyNames(); names.hasMoreElements(); ) {
      String prop=(String)names.nextElement();
      logger.debug("            " + prop + "=>"+ info.getPropertyString(prop));
    }
    String name=info.getPropertyString("1st");
    if (info.getPropertyString("last") != null)     name+=" " + info.getPropertyString("last");
    int port=Integer.valueOf(info.getPropertyString("port.p2pj")).intValue();
    if (port < 1) {
      logger.error("ZEROCONF: Flawed contact announced himself" + "without necessary parameters : " + contactID);
      return;
    }
    logger.debug("ZEROCONF: Detected client " + name);
    newFriend=opSetPersPresence.createVolatileContact(contactID,this,name,info.getAddress(),port);
  }
  int clientType=ContactZeroconfImpl.XMPP;
  if (info.getPropertyString("client") != null && info.getPropertyString("client").compareToIgnoreCase("SIP Communicator") == 0)   clientType=ContactZeroconfImpl.SIPCOM;
 else   if ((info.getPropertyString("jid") != null) && (info.getPropertyString("node") == null))   clientType=ContactZeroconfImpl.GAIM;
 else   if (info.getPropertyString("jid") == null)   clientType=ContactZeroconfImpl.ICHAT;
  newFriend.setClientType(clientType);
  logger.debug("ZEROCONF: CLIENT TYPE " + clientType);
  ZeroconfStatusEnum status=ZeroconfStatusEnum.statusOf(info.getPropertyString("status"));
  opSetPersPresence.changePresenceStatusForContact(newFriend,status == null ? ZeroconfStatusEnum.ONLINE : status);
  jmdns.addListener(this,new DNSQuestion(info.getQualifiedName(),DNSConstants.TYPE_SRV,DNSConstants.CLASS_UNIQUE));
}
