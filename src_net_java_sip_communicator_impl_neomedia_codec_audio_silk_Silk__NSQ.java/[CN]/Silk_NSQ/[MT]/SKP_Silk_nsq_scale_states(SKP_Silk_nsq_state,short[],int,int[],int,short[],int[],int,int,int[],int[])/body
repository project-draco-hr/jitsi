{
  int i, scale_length, lag;
  int inv_gain_Q16, gain_adj_Q16, inv_gain_Q32;
  inv_gain_Q16=(Integer.MAX_VALUE / (Gains_Q16[subfr] >> 1));
  inv_gain_Q16=(inv_gain_Q16 < Short.MAX_VALUE ? inv_gain_Q16 : Short.MAX_VALUE);
  lag=pitchL[subfr];
  if (NSQ.rewhite_flag != 0) {
    inv_gain_Q32=(inv_gain_Q16 << 16);
    if (subfr == 0) {
      inv_gain_Q32=(Silk_macros.SKP_SMULWB(inv_gain_Q32,LTP_scale_Q14) << 2);
    }
    for (i=NSQ.sLTP_buf_idx - lag - Silk_define.LTP_ORDER / 2; i < NSQ.sLTP_buf_idx; i++) {
      sLTP_Q16[i]=Silk_macros.SKP_SMULWB(inv_gain_Q32,sLTP[i]);
    }
  }
  scale_length=length * Silk_define.NB_SUBFR;
  scale_length=scale_length - Silk_macros.SKP_SMULBB(Silk_define.NB_SUBFR - (subfr + 1),length);
  scale_length=Silk_SigProc_FIX.SKP_max_int(scale_length,lag + Silk_define.LTP_ORDER);
  if (inv_gain_Q16 != NSQ.prev_inv_gain_Q16) {
    gain_adj_Q16=Silk_Inlines.SKP_DIV32_varQ(inv_gain_Q16,NSQ.prev_inv_gain_Q16,16);
    for (i=NSQ.sLTP_shp_buf_idx - scale_length; i < NSQ.sLTP_shp_buf_idx; i++) {
      NSQ.sLTP_shp_Q10[i]=Silk_macros.SKP_SMULWW(gain_adj_Q16,NSQ.sLTP_shp_Q10[i]);
    }
    if (NSQ.rewhite_flag == 0) {
      for (i=NSQ.sLTP_buf_idx - lag - Silk_define.LTP_ORDER / 2; i < NSQ.sLTP_buf_idx; i++) {
        sLTP_Q16[i]=Silk_macros.SKP_SMULWW(gain_adj_Q16,sLTP_Q16[i]);
      }
    }
    NSQ.sLF_AR_shp_Q12=Silk_macros.SKP_SMULWW(gain_adj_Q16,NSQ.sLF_AR_shp_Q12);
    for (i=0; i < Silk_define.MAX_LPC_ORDER; i++) {
      NSQ.sLPC_Q14[i]=Silk_macros.SKP_SMULWW(gain_adj_Q16,NSQ.sLPC_Q14[i]);
    }
  }
  for (i=0; i < length; i++) {
    x_sc_Q10[i]=(Silk_macros.SKP_SMULBB(x[x_offset + i],(short)inv_gain_Q16) >> 6);
  }
  assert(inv_gain_Q16 != 0);
  NSQ.prev_inv_gain_Q16=inv_gain_Q16;
}
