{
  int i, j;
  int LTP_pred_Q14, LPC_pred_Q10, n_AR_Q10, n_LTP_Q14;
  int n_LF_Q10, r_Q10, q_Q0, q_Q10;
  int thr1_Q10, thr2_Q10, thr3_Q10;
  int dither;
  int exc_Q10, LPC_exc_Q10, xq_Q10;
  int tmp, sLF_AR_shp_Q10;
  int[] psLPC_Q14;
  int psLPC_Q14_offset;
  int[] shp_lag_ptr, pred_lag_ptr;
  int shp_lag_ptr_offset, pred_lag_ptr_offset;
  shp_lag_ptr=NSQ.sLTP_shp_Q10;
  shp_lag_ptr_offset=NSQ.sLTP_shp_buf_idx - lag + Silk_define.HARM_SHAPE_FIR_TAPS / 2;
  pred_lag_ptr=sLTP_Q16;
  pred_lag_ptr_offset=NSQ.sLTP_buf_idx - lag + Silk_define.LTP_ORDER / 2;
  psLPC_Q14=NSQ.sLPC_Q14;
  psLPC_Q14_offset=Silk_define.MAX_LPC_ORDER - 1;
  thr1_Q10=(-1536 - (Lambda_Q10 >> 1));
  thr2_Q10=(-512 - (Lambda_Q10 >> 1));
  thr2_Q10=(thr2_Q10 + (Silk_macros.SKP_SMULBB(offset_Q10,Lambda_Q10) >> 10));
  thr3_Q10=(512 + (Lambda_Q10 >> 1));
  for (i=0; i < length; i++) {
    NSQ.rand_seed=Silk_SigProc_FIX.SKP_RAND(NSQ.rand_seed);
    dither=(NSQ.rand_seed >> 31);
    assert((predictLPCOrder & 1) == 0);
    assert(predictLPCOrder >= 10);
    LPC_pred_Q10=Silk_macros.SKP_SMULWB(psLPC_Q14[psLPC_Q14_offset + 0],a_Q12[a_Q12_offset + 0]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 1],a_Q12[a_Q12_offset + 1]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 2],a_Q12[a_Q12_offset + 2]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 3],a_Q12[a_Q12_offset + 3]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 4],a_Q12[a_Q12_offset + 4]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 5],a_Q12[a_Q12_offset + 5]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 6],a_Q12[a_Q12_offset + 6]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 7],a_Q12[a_Q12_offset + 7]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 8],a_Q12[a_Q12_offset + 8]);
    LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 9],a_Q12[a_Q12_offset + 9]);
    for (j=10; j < predictLPCOrder; j++) {
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - j],a_Q12[a_Q12_offset + j]);
    }
    if (sigtype == Silk_define.SIG_TYPE_VOICED) {
      LTP_pred_Q14=Silk_macros.SKP_SMULWB(pred_lag_ptr[pred_lag_ptr_offset + 0],b_Q14[b_Q14_offset + 0]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 1],b_Q14[b_Q14_offset + 1]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 2],b_Q14[b_Q14_offset + 2]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 3],b_Q14[b_Q14_offset + 3]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 4],b_Q14[b_Q14_offset + 4]);
      pred_lag_ptr_offset++;
    }
 else {
      LTP_pred_Q14=0;
    }
    assert((shapingLPCOrder & 1) == 0);
    assert(shapingLPCOrder >= 12);
    n_AR_Q10=Silk_macros.SKP_SMULWB(psLPC_Q14[psLPC_Q14_offset + 0],AR_shp_Q13[AR_shp_Q13_offset + 0]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 1],AR_shp_Q13[AR_shp_Q13_offset + 1]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 2],AR_shp_Q13[AR_shp_Q13_offset + 2]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 3],AR_shp_Q13[AR_shp_Q13_offset + 3]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 4],AR_shp_Q13[AR_shp_Q13_offset + 4]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 5],AR_shp_Q13[AR_shp_Q13_offset + 5]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 6],AR_shp_Q13[AR_shp_Q13_offset + 6]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 7],AR_shp_Q13[AR_shp_Q13_offset + 7]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 8],AR_shp_Q13[AR_shp_Q13_offset + 8]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 9],AR_shp_Q13[AR_shp_Q13_offset + 9]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 10],AR_shp_Q13[AR_shp_Q13_offset + 10]);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 11],AR_shp_Q13[AR_shp_Q13_offset + 11]);
    for (j=12; j < shapingLPCOrder; j++) {
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - j],AR_shp_Q13[AR_shp_Q13_offset + j]);
    }
    n_AR_Q10=(n_AR_Q10 >> 1);
    n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,NSQ.sLF_AR_shp_Q12,Tilt_Q14);
    n_LF_Q10=(Silk_macros.SKP_SMULWB(NSQ.sLTP_shp_Q10[NSQ.sLTP_shp_buf_idx - 1],LF_shp_Q14) << 2);
    n_LF_Q10=Silk_macros.SKP_SMLAWT(n_LF_Q10,NSQ.sLF_AR_shp_Q12,LF_shp_Q14);
    assert(lag > 0 || sigtype == Silk_define.SIG_TYPE_UNVOICED);
    if (lag > 0) {
      n_LTP_Q14=Silk_macros.SKP_SMULWB((shp_lag_ptr[shp_lag_ptr_offset + 0] + shp_lag_ptr[shp_lag_ptr_offset - 2]),HarmShapeFIRPacked_Q14);
      n_LTP_Q14=Silk_macros.SKP_SMLAWT(n_LTP_Q14,shp_lag_ptr[shp_lag_ptr_offset - 1],HarmShapeFIRPacked_Q14);
      shp_lag_ptr_offset++;
      n_LTP_Q14=(n_LTP_Q14 << 6);
    }
 else {
      n_LTP_Q14=0;
    }
    tmp=(LTP_pred_Q14 - n_LTP_Q14);
    tmp=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(tmp,4);
    tmp=(tmp + LPC_pred_Q10);
    tmp=(tmp - n_AR_Q10);
    tmp=(tmp - n_LF_Q10);
    r_Q10=(x_sc_Q10[i] - tmp);
    r_Q10=(r_Q10 ^ dither) - dither;
    r_Q10=(r_Q10 - offset_Q10);
    r_Q10=Silk_SigProc_FIX.SKP_LIMIT_32(r_Q10,-64 << 10,64 << 10);
    if (r_Q10 < thr1_Q10) {
      q_Q0=Silk_SigProc_FIX.SKP_RSHIFT_ROUND((r_Q10 + (Lambda_Q10 >> 1)),10);
      q_Q10=(q_Q0 << 10);
    }
 else     if (r_Q10 < thr2_Q10) {
      q_Q0=-1;
      q_Q10=-1024;
    }
 else     if (r_Q10 > thr3_Q10) {
      q_Q0=Silk_SigProc_FIX.SKP_RSHIFT_ROUND((r_Q10 - (Lambda_Q10 >> 1)),10);
      q_Q10=(q_Q0 << 10);
    }
 else {
      q_Q0=0;
      q_Q10=0;
    }
    q[q_offset + i]=(byte)q_Q0;
    exc_Q10=(q_Q10 + offset_Q10);
    exc_Q10=(exc_Q10 ^ dither) - dither;
    LPC_exc_Q10=(exc_Q10 + Silk_SigProc_FIX.SKP_RSHIFT_ROUND(LTP_pred_Q14,4));
    xq_Q10=(LPC_exc_Q10 + LPC_pred_Q10);
    xq[xq_offset + i]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(xq_Q10,Gain_Q16),10));
    psLPC_Q14_offset++;
    psLPC_Q14[psLPC_Q14_offset]=(xq_Q10 << 4);
    sLF_AR_shp_Q10=(xq_Q10 - n_AR_Q10);
    NSQ.sLF_AR_shp_Q12=(sLF_AR_shp_Q10 << 2);
    NSQ.sLTP_shp_Q10[NSQ.sLTP_shp_buf_idx]=(sLF_AR_shp_Q10 - n_LF_Q10);
    sLTP_Q16[NSQ.sLTP_buf_idx]=(LPC_exc_Q10 << 6);
    NSQ.sLTP_shp_buf_idx++;
    NSQ.sLTP_buf_idx++;
    NSQ.rand_seed+=q[q_offset + i];
  }
  System.arraycopy(NSQ.sLPC_Q14,length,NSQ.sLPC_Q14,0,Silk_define.MAX_LPC_ORDER);
}
