{
  int i;
  int idx, LTP_shp_buf_idx;
  float n_Tilt, n_LF, n_LTP;
  float sLF_AR_shp, sLF_MA_shp;
  float[] LTP_shp_buf;
  LTP_shp_buf=P.sLTP_shp1;
  LTP_shp_buf_idx=P.sLTP_shp_buf_idx1;
  sLF_AR_shp=P.sLF_AR_shp1;
  sLF_MA_shp=P.sLF_MA_shp1;
  for (i=0; i < length; i++) {
    if (lag > 0) {
      assert(Silk_define.HARM_SHAPE_FIR_TAPS == 3);
      idx=lag + LTP_shp_buf_idx;
      n_LTP=LTP_shp_buf[(idx - Silk_define.HARM_SHAPE_FIR_TAPS / 2 - 1) & Silk_define.LTP_MASK] * HarmShapeFIR[0];
      n_LTP+=LTP_shp_buf[(idx - Silk_define.HARM_SHAPE_FIR_TAPS / 2) & Silk_define.LTP_MASK] * HarmShapeFIR[1];
      n_LTP+=LTP_shp_buf[(idx - Silk_define.HARM_SHAPE_FIR_TAPS / 2 + 1) & Silk_define.LTP_MASK] * HarmShapeFIR[2];
    }
 else {
      n_LTP=0;
    }
    n_Tilt=sLF_AR_shp * Tilt;
    n_LF=sLF_AR_shp * LF_AR_shp + sLF_MA_shp * LF_MA_shp;
    sLF_AR_shp=st_res[st_res_offset + i] - n_Tilt;
    sLF_MA_shp=sLF_AR_shp - n_LF;
    LTP_shp_buf_idx=(LTP_shp_buf_idx - 1) & Silk_define.LTP_MASK;
    LTP_shp_buf[LTP_shp_buf_idx]=sLF_MA_shp;
    xw[xw_offset + i]=sLF_MA_shp - n_LTP;
  }
  P.sLF_AR_shp1=sLF_AR_shp;
  P.sLF_MA_shp1=sLF_MA_shp;
  P.sLTP_shp_buf_idx1=LTP_shp_buf_idx;
}
