{
  fileOutputStream=new FileOutputStream(file);
  int result;
  byte[] buffer=new byte[1024];
  buffer[0]=0;
  scpOutputStream.write(buffer,0,1);
  scpOutputStream.flush();
  int ch=checkAck(scpInputStream);
  if (ch != 'C') {
    throw new OperationFailedException("Invalid reply from server",12);
  }
  scpInputStream.read(buffer,0,5);
  long filesize=0L;
  while (true) {
    if (scpInputStream.read(buffer,0,1) < 0) {
      break;
    }
    if (buffer[0] == ' ')     break;
    filesize=filesize * 10L + (long)(buffer[0] - '0');
  }
  String file=null;
  for (int i=0; true; i++) {
    scpInputStream.read(buffer,i,1);
    if (buffer[i] == (byte)0x0a) {
      file=new String(buffer,0,i);
      break;
    }
  }
  buffer[0]=0;
  scpOutputStream.write(buffer,0,1);
  scpOutputStream.flush();
  int foo;
  while (true) {
    if (buffer.length < filesize)     foo=buffer.length;
 else     foo=(int)filesize;
    foo=scpInputStream.read(buffer,0,foo);
    if (foo < 0)     break;
    fileOutputStream.write(buffer,0,foo);
    filesize-=foo;
    if (filesize == 0L)     break;
  }
  fileOutputStream.close();
  fileOutputStream=null;
  if ((result=checkAck(scpInputStream)) != 0)   throw new OperationFailedException("Error in Ack",result);
  buffer[0]=0;
  scpOutputStream.write(buffer,0,1);
  scpOutputStream.flush();
  scpInputStream.close();
  scpOutputStream.close();
  fileTransferChannel.disconnect();
  instantMessaging.deliverMessage(instantMessaging.createMessage(this.file.getName() + " downloaded from Server"),sshContact);
}
