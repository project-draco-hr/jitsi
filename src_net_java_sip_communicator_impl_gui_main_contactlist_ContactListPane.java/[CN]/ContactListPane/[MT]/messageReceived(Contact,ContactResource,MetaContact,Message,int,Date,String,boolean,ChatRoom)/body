{
  if (!SwingUtilities.isEventDispatchThread()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        messageReceived(protocolContact,contactResource,metaContact,message,eventType,timestamp,correctedMessageUID,isPrivateMessaging,privateContactRoom);
      }
    }
);
    return;
  }
  final ChatPanel chatPanel=chatWindowManager.getContactChat(metaContact,protocolContact,contactResource,message.getMessageUID());
  if (!chatPanel.isChatFocused())   contactList.setActiveContact(metaContact,true);
  String messageType=null;
  if (eventType == MessageReceivedEvent.CONVERSATION_MESSAGE_RECEIVED) {
    messageType=Chat.INCOMING_MESSAGE;
  }
 else   if (eventType == MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED) {
    messageType=Chat.SYSTEM_MESSAGE;
  }
 else   if (eventType == MessageReceivedEvent.SMS_MESSAGE_RECEIVED) {
    messageType=Chat.SMS_MESSAGE;
  }
  String contactAddress=(contactResource != null) ? protocolContact.getAddress() + " (" + contactResource.getResourceName()+ ")" : protocolContact.getAddress();
  chatPanel.addMessage(contactAddress,protocolContact.getDisplayName(),timestamp,messageType,message.getContent(),message.getContentType(),message.getMessageUID(),correctedMessageUID);
  String resourceName=(contactResource != null) ? contactResource.getResourceName() : null;
  if (isPrivateMessaging) {
    chatWindowManager.openPrivateChatForChatRoomMember(privateContactRoom,protocolContact);
  }
 else {
    chatWindowManager.openChat(chatPanel,false);
  }
  ChatTransport chatTransport=chatPanel.getChatSession().findChatTransportForDescriptor(protocolContact,resourceName);
  chatPanel.setSelectedChatTransport(chatTransport,true);
}
