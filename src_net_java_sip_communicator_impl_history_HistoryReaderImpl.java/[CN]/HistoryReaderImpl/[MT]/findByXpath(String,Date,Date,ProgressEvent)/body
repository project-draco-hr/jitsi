{
  TreeSet result=new TreeSet(new HistoryRecordComparator());
  Vector filelist=filterFilesByDate(this.historyImpl.getFileList(),startDate,endDate);
  int currentProgress=HistorySearchProgressListener.PROGRESS_MINIMUM_VALUE;
  int fileProgressStep=HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE;
  if (filelist.size() != 0)   fileProgressStep=HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE / filelist.size();
  fireProgressStateChanged(progressEvent,HistorySearchProgressListener.PROGRESS_MINIMUM_VALUE);
  Navigator navigator=DocumentNavigator.getInstance();
  XPath xpath;
  try {
    xpath=navigator.parseXPath(xpathExpression);
  }
 catch (  SAXPathException e) {
    throw new RuntimeException(e);
  }
  Iterator fileIterator=filelist.iterator();
  while (fileIterator.hasNext()) {
    String filename=(String)fileIterator.next();
    Document doc=this.historyImpl.getDocumentForFile(filename);
    List nodes;
    try {
      nodes=xpath.selectNodes(doc);
    }
 catch (    JaxenException e) {
      throw new RuntimeException(e);
    }
    int nodesProgressStep=fileProgressStep;
    if (nodes.size() != 0)     nodesProgressStep=fileProgressStep / nodes.size();
    Iterator i=nodes.iterator();
    while (i.hasNext()) {
      Node node=(Node)i.next();
      NodeList propertyNodes=node.getChildNodes();
      String ts=node.getAttributes().getNamedItem("timestamp").getNodeValue();
      Date timestamp=new Date(Long.parseLong(ts));
      ArrayList nameVals=new ArrayList();
      int len=propertyNodes.getLength();
      for (int j=0; j < len; j++) {
        Node propertyNode=propertyNodes.item(j);
        if (propertyNode.getNodeType() == Node.ELEMENT_NODE) {
          nameVals.add(propertyNode.getNodeName());
          nameVals.add(propertyNode.getFirstChild().getNodeValue());
        }
      }
      String[] propertyNames=new String[nameVals.size() / 2];
      String[] propertyValues=new String[propertyNames.length];
      for (int j=0; j < propertyNames.length; j++) {
        propertyNames[j]=(String)nameVals.get(j * 2);
        propertyValues[j]=(String)nameVals.get(j * 2 + 1);
      }
      HistoryRecord record=new HistoryRecord(propertyNames,propertyValues,timestamp);
      result.add(record);
      currentProgress+=nodesProgressStep;
      fireProgressStateChanged(progressEvent,currentProgress);
    }
  }
  fireProgressStateChanged(progressEvent,HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE);
  return new OrderedQueryResultSet(result);
}
