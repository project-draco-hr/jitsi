{
  if (startDate == null && endDate == null) {
    Vector<String> result=new Vector<String>();
    while (filelist.hasNext()) {
      result.add(filelist.next());
    }
    Collections.sort(result,new Comparator<String>(){
      public int compare(      String o1,      String o2){
        if (reverseOrder)         return o2.compareTo(o1);
 else         return o1.compareTo(o2);
      }
    }
);
    return result;
  }
  TreeSet<Long> files=new TreeSet<Long>();
  while (filelist.hasNext()) {
    String filename=filelist.next();
    files.add(Long.parseLong(filename.substring(0,filename.length() - 4)));
  }
  TreeSet<Long> resultAsLong=new TreeSet<Long>();
  if (files.size() == 0) {
    return new Vector<String>();
  }
  Long startLong;
  Long endLong;
  if (startDate == null)   startLong=Long.MIN_VALUE;
 else   startLong=startDate.getTime();
  if (endDate == null)   endLong=Long.MAX_VALUE;
 else   endLong=endDate.getTime();
  for (  Long f : files) {
    if (startLong <= f && f <= endLong) {
      resultAsLong.add(f);
    }
  }
  if (!files.isEmpty() && files.first() <= startLong) {
    SortedSet<Long> setBeforeTheInterval=files.subSet(files.first(),true,startLong,true);
    if (!setBeforeTheInterval.isEmpty())     resultAsLong.add(setBeforeTheInterval.last());
  }
  Vector<String> result=new Vector<String>();
  Iterator<Long> iter=resultAsLong.iterator();
  while (iter.hasNext()) {
    Long item=iter.next();
    result.add(item.toString() + ".xml");
  }
  Collections.sort(result,new Comparator<String>(){
    public int compare(    String o1,    String o2){
      if (reverseOrder)       return o2.compareTo(o1);
 else       return o1.compareTo(o2);
    }
  }
);
  return result;
}
