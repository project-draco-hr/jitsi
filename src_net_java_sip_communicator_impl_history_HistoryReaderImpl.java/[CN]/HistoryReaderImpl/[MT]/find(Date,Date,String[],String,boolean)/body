{
  TreeSet<HistoryRecord> result=new TreeSet<HistoryRecord>(new HistoryRecordComparator());
  Vector<String> filelist=filterFilesByDate(this.historyImpl.getFileList(),startDate,endDate);
  double currentProgress=HistorySearchProgressListener.PROGRESS_MINIMUM_VALUE;
  double fileProgressStep=HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE;
  if (filelist.size() != 0)   fileProgressStep=HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE / filelist.size();
  fireProgressStateChanged(startDate,endDate,keywords,HistorySearchProgressListener.PROGRESS_MINIMUM_VALUE);
  Iterator<String> fileIterator=filelist.iterator();
  while (fileIterator.hasNext() && !isFindCanceled) {
    String filename=fileIterator.next();
    Document doc=this.historyImpl.getDocumentForFile(filename);
    if (doc == null)     continue;
    NodeList nodes=doc.getElementsByTagName("record");
    double nodesProgressStep=fileProgressStep;
    if (nodes.getLength() != 0)     nodesProgressStep=fileProgressStep / nodes.getLength();
    Node node;
    for (int i=0; i < nodes.getLength() && !isFindCanceled; i++) {
      node=nodes.item(i);
      String ts=node.getAttributes().getNamedItem("timestamp").getNodeValue();
      Date timestamp=new Date(Long.parseLong(ts));
      if (isInPeriod(timestamp,startDate,endDate)) {
        NodeList propertyNodes=node.getChildNodes();
        HistoryRecord record=filterByKeyword(propertyNodes,timestamp,keywords,field,caseSensitive);
        if (record != null) {
          result.add(record);
        }
      }
      currentProgress+=nodesProgressStep;
      fireProgressStateChanged(startDate,endDate,keywords,(int)currentProgress);
    }
  }
  if ((int)currentProgress < HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE) {
    fireProgressStateChanged(startDate,endDate,keywords,HistorySearchProgressListener.PROGRESS_MAXIMUM_VALUE);
  }
  isFindCanceled=false;
  return new OrderedQueryResultSet<HistoryRecord>(result);
}
