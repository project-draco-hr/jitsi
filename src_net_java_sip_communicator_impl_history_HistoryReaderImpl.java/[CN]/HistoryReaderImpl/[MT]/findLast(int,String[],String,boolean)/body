{
  Vector<String> filelist=filterFilesByDate(this.historyImpl.getFileList(),null,null);
  TreeSet<HistoryRecord> result=new TreeSet<HistoryRecord>(new HistoryRecordComparator());
  int leftCount=count;
  int currentFile=filelist.size() - 1;
  SimpleDateFormat sdf=new SimpleDateFormat(DATE_FORMAT);
  while (leftCount > 0 && currentFile >= 0) {
    Document doc=this.historyImpl.getDocumentForFile(filelist.get(currentFile));
    if (doc == null) {
      currentFile--;
      continue;
    }
    List<Node> nodes=new ArrayList<Node>();
    NodeList nodesList=doc.getElementsByTagName("record");
    for (int i=0; i < nodesList.getLength(); i++) {
      nodes.add(nodesList.item(i));
    }
    List<Node> lNodes=null;
    if (nodes.size() > leftCount) {
      lNodes=nodes.subList(nodes.size() - leftCount,nodes.size());
      leftCount=0;
    }
 else {
      lNodes=nodes;
      leftCount-=nodes.size();
    }
    Iterator<Node> i=lNodes.iterator();
    while (i.hasNext()) {
      Node node=i.next();
      NodeList propertyNodes=node.getChildNodes();
      Date timestamp;
      String ts=node.getAttributes().getNamedItem("timestamp").getNodeValue();
      try {
        timestamp=sdf.parse(ts);
      }
 catch (      ParseException e) {
        timestamp=new Date(Long.parseLong(ts));
      }
      HistoryRecord record=filterByKeyword(propertyNodes,timestamp,keywords,field,caseSensitive);
      if (record != null) {
        result.add(record);
      }
    }
    currentFile--;
  }
  return new OrderedQueryResultSet<HistoryRecord>(result);
}
