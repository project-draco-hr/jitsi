{
  Vector vect=new Vector();
  Iterator filelist=this.historyImpl.getFileList();
  Navigator navigator=DocumentNavigator.getInstance();
  XPath xpath;
  try {
    xpath=navigator.parseXPath(xpathExpression);
  }
 catch (  SAXPathException e) {
    throw new RuntimeException(e);
  }
  while (filelist.hasNext()) {
    String filename=(String)filelist.next();
    Document doc=this.historyImpl.getDocumentForFile(filename);
    List nodes;
    try {
      nodes=xpath.selectNodes(doc);
    }
 catch (    JaxenException e) {
      throw new RuntimeException(e);
    }
    Iterator i=nodes.iterator();
    while (i.hasNext()) {
      Node node=(Node)i.next();
      NodeList propertyNodes=node.getChildNodes();
      String ts=node.getAttributes().getNamedItem("timestamp").getNodeValue();
      Date timestamp=new Date(Long.parseLong(ts));
      ArrayList nameVals=new ArrayList();
      int len=propertyNodes.getLength();
      for (int j=0; j < len; j++) {
        Node propertyNode=propertyNodes.item(j);
        if (propertyNode.getNodeType() == Node.ELEMENT_NODE) {
          nameVals.add(propertyNode.getNodeName());
          nameVals.add(propertyNode.getFirstChild().getNodeValue());
        }
      }
      String[] propertyNames=new String[nameVals.size() / 2];
      String[] propertyValues=new String[propertyNames.length];
      for (int j=0; j < propertyNames.length; j++) {
        propertyNames[j]=(String)nameVals.get(j * 2);
        propertyValues[j]=(String)nameVals.get(j * 2 + 1);
      }
      HistoryRecord record=new HistoryRecord(propertyNames,propertyValues,timestamp);
      vect.add(record);
    }
  }
  return new DefaultQueryResultSet(vect);
}
