{
  if (nals.size() > 0) {
    byte[] buf=nals.remove(0);
    if (buf.length > MAX_PAYLOAD_SIZE) {
      int bufOfset=0;
      int size=buf.length;
      int nri=buf[bufOfset] & 0x60;
      byte[] tmp=new byte[MAX_PAYLOAD_SIZE];
      tmp[0]=28;
      tmp[0]|=nri;
      tmp[1]=buf[bufOfset];
      tmp[1]|=1 << 7;
      tmp[1]&=~(1 << 6);
      bufOfset+=1;
      size-=1;
      int currentSIx=0;
      while (size + 2 > MAX_PAYLOAD_SIZE) {
        System.arraycopy(buf,bufOfset,tmp,2,MAX_PAYLOAD_SIZE - 2);
        nals.add(currentSIx++,tmp.clone());
        bufOfset+=MAX_PAYLOAD_SIZE - 2;
        size-=MAX_PAYLOAD_SIZE - 2;
        tmp[1]&=~(1 << 7);
      }
      byte[] tmp2=new byte[size + 2];
      tmp2[0]=tmp[0];
      tmp2[1]=tmp[1];
      tmp2[1]|=1 << 6;
      System.arraycopy(buf,bufOfset,tmp2,2,size);
      nals.add(currentSIx++,tmp2);
      return INPUT_BUFFER_NOT_CONSUMED | OUTPUT_BUFFER_NOT_FILLED;
    }
    outBuffer.setData(buf);
    outBuffer.setLength(buf.length);
    outBuffer.setOffset(0);
    outBuffer.setTimeStamp(lastTimeStamp);
    outBuffer.setSequenceNumber(seq++);
    if (nals.size() > 0) {
      return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;
    }
 else {
      outBuffer.setFlags(outBuffer.getFlags() | Buffer.FLAG_RTP_MARKER);
      return BUFFER_PROCESSED_OK;
    }
  }
  if (isEOM(inBuffer)) {
    propagateEOM(outBuffer);
    reset();
    return BUFFER_PROCESSED_OK;
  }
  if (inBuffer.isDiscard()) {
    outBuffer.setDiscard(true);
    reset();
    return BUFFER_PROCESSED_OK;
  }
  Format inFormat=inBuffer.getFormat();
  if (inFormat != inputFormat && !inFormat.matches(inputFormat)) {
    setInputFormat(inFormat);
  }
  int inputLength=inBuffer.getLength();
  if (inputLength < 10) {
    outBuffer.setDiscard(true);
    reset();
    return BUFFER_PROCESSED_OK;
  }
  byte[] r=(byte[])inBuffer.getData();
  int inputOffset=inBuffer.getOffset();
  int ix=3 + inputOffset;
  int prevIx=1 + inputOffset;
  while ((ix=ff_avc_find_startcode(r,ix,r.length)) < r.length) {
    int len=ix - prevIx;
    byte[] b=new byte[len - 4];
    System.arraycopy(r,prevIx + 3,b,0,b.length);
    nals.add(b);
    prevIx=ix;
    ix=prevIx + 3;
  }
  int len=ix - prevIx;
  if (len < 0) {
    outBuffer.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  byte[] b=new byte[len - 3];
  System.arraycopy(r,prevIx + 3,b,0,b.length);
  nals.add(b);
  lastTimeStamp=inBuffer.getTimeStamp();
  return INPUT_BUFFER_NOT_CONSUMED | OUTPUT_BUFFER_NOT_FILLED;
}
