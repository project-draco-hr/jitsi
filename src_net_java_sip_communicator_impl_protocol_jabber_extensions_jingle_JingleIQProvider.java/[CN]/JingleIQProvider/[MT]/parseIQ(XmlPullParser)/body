{
  JingleIQ jingleIQ=new JingleIQ();
  JingleAction action=JingleAction.parseString(parser.getAttributeValue("",JingleIQ.ACTION_ATTR_NAME));
  String initiator=parser.getAttributeValue("",JingleIQ.INITIATOR_ATTR_NAME);
  String responder=parser.getAttributeValue("",JingleIQ.RESPONDER_ATTR_NAME);
  String sid=parser.getAttributeValue("",JingleIQ.SID_ATTR_NAME);
  jingleIQ.setAction(action);
  jingleIQ.setInitiator(initiator);
  jingleIQ.setResponder(responder);
  jingleIQ.setSID(sid);
  boolean done=false;
  DefaultPacketExtensionProvider<ContentPacketExtension> contentProvider=new DefaultPacketExtensionProvider<ContentPacketExtension>(ContentPacketExtension.class);
  ReasonProvider reasonProvider=new ReasonProvider();
  DefaultPacketExtensionProvider<TransferPacketExtension> transferProvider=new DefaultPacketExtensionProvider<TransferPacketExtension>(TransferPacketExtension.class);
  DefaultPacketExtensionProvider<CoinPacketExtension> coinProvider=new DefaultPacketExtensionProvider<CoinPacketExtension>(CoinPacketExtension.class);
  DefaultPacketExtensionProvider<CallIdPacketExtension> callidProvider=new DefaultPacketExtensionProvider<CallIdPacketExtension>(CallIdPacketExtension.class);
  int eventType;
  String elementName;
  String namespace;
  while (!done) {
    eventType=parser.next();
    elementName=parser.getName();
    namespace=parser.getNamespace();
    if (eventType == XmlPullParser.START_TAG) {
      if (elementName.equals(ContentPacketExtension.ELEMENT_NAME)) {
        ContentPacketExtension content=contentProvider.parseExtension(parser);
        jingleIQ.addContent(content);
      }
 else       if (elementName.equals(ReasonPacketExtension.ELEMENT_NAME)) {
        ReasonPacketExtension reason=reasonProvider.parseExtension(parser);
        jingleIQ.setReason(reason);
      }
 else       if (elementName.equals(TransferPacketExtension.ELEMENT_NAME) && namespace.equals(TransferPacketExtension.NAMESPACE)) {
        jingleIQ.addExtension(transferProvider.parseExtension(parser));
      }
 else       if (elementName.equals(CoinPacketExtension.ELEMENT_NAME)) {
        jingleIQ.addExtension(coinProvider.parseExtension(parser));
      }
 else       if (elementName.equals(ConferenceDescriptionPacketExtension.CALLID_ELEM_NAME)) {
        jingleIQ.addExtension(callidProvider.parseExtension(parser));
      }
      if (namespace.equals(SessionInfoPacketExtension.NAMESPACE)) {
        SessionInfoType type=SessionInfoType.valueOf(elementName);
        if (type == SessionInfoType.mute || type == SessionInfoType.unmute) {
          String name=parser.getAttributeValue("",MuteSessionInfoPacketExtension.NAME_ATTR_VALUE);
          jingleIQ.setSessionInfo(new MuteSessionInfoPacketExtension(type == SessionInfoType.mute,name));
        }
 else {
          jingleIQ.setSessionInfo(new SessionInfoPacketExtension(type));
        }
      }
    }
    if ((eventType == XmlPullParser.END_TAG) && parser.getName().equals(JingleIQ.ELEMENT_NAME)) {
      done=true;
    }
  }
  return jingleIQ;
}
