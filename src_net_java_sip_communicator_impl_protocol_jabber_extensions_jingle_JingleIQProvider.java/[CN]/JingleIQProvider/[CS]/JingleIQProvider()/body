{
  ProviderManager providerManager=ProviderManager.getInstance();
  providerManager.addExtensionProvider(RtpDescriptionPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RtpDescriptionPacketExtension>(RtpDescriptionPacketExtension.class));
  providerManager.addExtensionProvider(PayloadTypePacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<PayloadTypePacketExtension>(PayloadTypePacketExtension.class));
  providerManager.addExtensionProvider(ParameterPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<ParameterPacketExtension>(ParameterPacketExtension.class));
  providerManager.addExtensionProvider(RTPHdrExtPacketExtension.ELEMENT_NAME,RTPHdrExtPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RTPHdrExtPacketExtension>(RTPHdrExtPacketExtension.class));
  providerManager.addExtensionProvider(EncryptionPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<EncryptionPacketExtension>(EncryptionPacketExtension.class));
  providerManager.addExtensionProvider(ZrtpHashPacketExtension.ELEMENT_NAME,ZrtpHashPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<ZrtpHashPacketExtension>(ZrtpHashPacketExtension.class));
  providerManager.addExtensionProvider(CryptoPacketExtension.ELEMENT_NAME,RtpDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<CryptoPacketExtension>(CryptoPacketExtension.class));
  providerManager.addExtensionProvider(IceUdpTransportPacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<IceUdpTransportPacketExtension>(IceUdpTransportPacketExtension.class));
  providerManager.addExtensionProvider(RawUdpTransportPacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RawUdpTransportPacketExtension>(RawUdpTransportPacketExtension.class));
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<CandidatePacketExtension>(CandidatePacketExtension.class));
  providerManager.addExtensionProvider(CandidatePacketExtension.ELEMENT_NAME,RawUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<CandidatePacketExtension>(CandidatePacketExtension.class));
  providerManager.addExtensionProvider(RemoteCandidatePacketExtension.ELEMENT_NAME,IceUdpTransportPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<RemoteCandidatePacketExtension>(RemoteCandidatePacketExtension.class));
  providerManager.addExtensionProvider(InputEvtPacketExtension.ELEMENT_NAME,InputEvtPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<InputEvtPacketExtension>(InputEvtPacketExtension.class));
  providerManager.addExtensionProvider(CoinPacketExtension.ELEMENT_NAME,CoinPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<CoinPacketExtension>(CoinPacketExtension.class));
  providerManager.addExtensionProvider(DtlsFingerprintPacketExtension.ELEMENT_NAME,DtlsFingerprintPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<DtlsFingerprintPacketExtension>(DtlsFingerprintPacketExtension.class));
  providerManager.addExtensionProvider(TransferPacketExtension.ELEMENT_NAME,TransferPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<TransferPacketExtension>(TransferPacketExtension.class));
  providerManager.addExtensionProvider(TransferredPacketExtension.ELEMENT_NAME,TransferredPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<TransferredPacketExtension>(TransferredPacketExtension.class));
  providerManager.addExtensionProvider(ConferenceDescriptionPacketExtension.CALLID_ELEM_NAME,ConferenceDescriptionPacketExtension.NAMESPACE,new DefaultPacketExtensionProvider<CallIdPacketExtension>(CallIdPacketExtension.class));
}
