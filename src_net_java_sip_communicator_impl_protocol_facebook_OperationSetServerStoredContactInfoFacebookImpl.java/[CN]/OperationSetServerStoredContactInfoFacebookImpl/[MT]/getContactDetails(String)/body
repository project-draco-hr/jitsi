{
  List<GenericDetail> result=retreivedDetails.get(contactAddress);
  if ((result == null) || !detailsRetreivedAddresses.contains(contactAddress)) {
    result=new LinkedList<GenericDetail>();
    try {
      FacebookAdapter adapter=parentProvider.getAdapter();
      OperationSetPersistentPresenceFacebookImpl presenceOS=getParentPresenceOperationSet();
      if (adapter == null || presenceOS == null)       return null;
      String tmpValueStr="Who Am I";
      ContactFacebookImpl contact=(ContactFacebookImpl)presenceOS.findContactByID(contactAddress);
      if (contact != null) {
        byte[] imageBytes=contact.getBigImage();
        if (imageBytes != null && imageBytes.length > 0)         result.add(new ServerStoredDetails.ImageDetail("Avatar",imageBytes));
        FacebookUser metaInfo=contact.getContactInfo();
        if (metaInfo == null)         return null;
        tmpValueStr=metaInfo.name;
        if (tmpValueStr != null)         result.add(new ServerStoredDetails.DisplayNameDetail(tmpValueStr));
        tmpValueStr=metaInfo.firstName;
        if (tmpValueStr != null)         result.add(new ServerStoredDetails.FirstNameDetail(tmpValueStr));
      }
      String profilePage=adapter.getProfilePage(contactAddress);
      if (profilePage == null)       throw new Exception("Failed to load profile page");
      logger.trace("====== Profile Page: ======\n" + profilePage);
      detailsRetreivedAddresses.add(contactAddress);
      String tmpPrefix="<div class=\"profile_info_container\">";
      int beginPos=profilePage.indexOf(tmpPrefix);
      if (beginPos >= 0) {
        beginPos+=tmpPrefix.length();
        if (beginPos >= profilePage.length())         throw new Exception("Failed to load profile page");
        String tmpLabelStr;
        int tmpLeft=profilePage.indexOf("<dt>",beginPos);
        int tmpRight=0;
        while (tmpLeft >= 0 && tmpLeft < profilePage.length()) {
          tmpRight=profilePage.indexOf("</dt>",tmpLeft);
          if (tmpRight >= 0) {
            tmpLabelStr=profilePage.substring(tmpLeft + 4,tmpRight);
            tmpLabelStr=getText(tmpLabelStr);
            if (tmpLabelStr.endsWith(":"))             tmpLabelStr=tmpLabelStr.substring(0,tmpLabelStr.length() - 1);
            tmpLeft=profilePage.indexOf("<dd>",tmpRight);
            if (tmpLeft >= 0) {
              tmpRight=profilePage.indexOf("</dd>",tmpLeft);
              if (tmpRight >= 0) {
                tmpValueStr=profilePage.substring(tmpLeft + 4,tmpRight);
                if (tmpValueStr.startsWith("<img src=\"/") && tmpValueStr.endsWith("\" border=0>")) {
                  tmpValueStr=tmpValueStr.substring(10,tmpValueStr.length() - 11);
                  byte[] imageBytes=getImage(fileHostUrl + tmpValueStr);
                  if (imageBytes != null && imageBytes.length > 0)                   result.add(new ServerStoredDetails.ImageDetail(tmpLabelStr,imageBytes));
                }
 else {
                  tmpValueStr=getText(tmpValueStr);
                  result.add(new ServerStoredDetails.StringDetail(tmpLabelStr,tmpValueStr));
                }
              }
 else               break;
            }
 else             break;
          }
 else           break;
          tmpLeft=profilePage.indexOf("<dt>",tmpRight + 5);
        }
      }
    }
 catch (    Exception exc) {
      logger.error("Cannot load details for contact " + contactAddress + " : "+ exc.getMessage(),exc);
    }
  }
  retreivedDetails.put(contactAddress,result);
  return new LinkedList<GenericDetail>(result);
}
