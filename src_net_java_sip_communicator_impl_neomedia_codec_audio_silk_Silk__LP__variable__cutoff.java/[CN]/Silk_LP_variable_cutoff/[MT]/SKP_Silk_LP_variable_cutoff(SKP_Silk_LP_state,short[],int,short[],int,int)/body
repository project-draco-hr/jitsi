{
  int[] B_Q28=new int[Silk_define.TRANSITION_NB], A_Q28=new int[Silk_define.TRANSITION_NA];
  int fac_Q16=0;
  int ind=0;
  assert(psLP.transition_frame_no >= 0);
  assert((((psLP.transition_frame_no <= Silk_define.TRANSITION_FRAMES_DOWN) && (psLP.mode == 0)) || ((psLP.transition_frame_no <= Silk_define.TRANSITION_FRAMES_UP) && (psLP.mode == 1))));
  if (psLP.transition_frame_no > 0) {
    if (psLP.mode == 0) {
      if (psLP.transition_frame_no < Silk_define.TRANSITION_FRAMES_DOWN) {
        if (Silk_define.TRANSITION_INT_STEPS_DOWN == 32)         fac_Q16=psLP.transition_frame_no << (16 - 5);
 else         fac_Q16=(psLP.transition_frame_no << 16) / Silk_define.TRANSITION_INT_STEPS_DOWN;
        ind=fac_Q16 >> 16;
        fac_Q16-=ind << 16;
        assert(ind >= 0);
        assert(ind < Silk_define.TRANSITION_INT_NUM);
        SKP_Silk_LP_interpolate_filter_taps(B_Q28,A_Q28,ind,fac_Q16);
        psLP.transition_frame_no++;
      }
 else       if (psLP.transition_frame_no == Silk_define.TRANSITION_FRAMES_DOWN) {
        SKP_Silk_LP_interpolate_filter_taps(B_Q28,A_Q28,Silk_define.TRANSITION_INT_NUM - 1,0);
      }
    }
 else     if (psLP.mode == 1) {
      if (psLP.transition_frame_no < Silk_define.TRANSITION_FRAMES_UP) {
        if (Silk_define.TRANSITION_INT_STEPS_UP == 64)         fac_Q16=(Silk_define.TRANSITION_FRAMES_UP - psLP.transition_frame_no) << (16 - 6);
 else         fac_Q16=((Silk_define.TRANSITION_FRAMES_UP - psLP.transition_frame_no) << 16) / Silk_define.TRANSITION_INT_STEPS_UP;
        ind=fac_Q16 >> 16;
        fac_Q16-=ind << 16;
        assert(ind >= 0);
        assert(ind < Silk_define.TRANSITION_INT_NUM);
        SKP_Silk_LP_interpolate_filter_taps(B_Q28,A_Q28,ind,fac_Q16);
        psLP.transition_frame_no++;
      }
 else       if (psLP.transition_frame_no == Silk_define.TRANSITION_FRAMES_UP) {
        SKP_Silk_LP_interpolate_filter_taps(B_Q28,A_Q28,0,0);
      }
    }
  }
  if (psLP.transition_frame_no > 0) {
    assert(Silk_define.TRANSITION_NB == 3 && Silk_define.TRANSITION_NA == 2);
    Silk_biquad_alt.SKP_Silk_biquad_alt(in,in_offset,B_Q28,A_Q28,psLP.In_LP_State,out,out_offset,frame_length);
  }
 else {
    for (int i_djinn=0; i_djinn < frame_length; i_djinn++)     out[out_offset + i_djinn]=in[in_offset + i_djinn];
  }
}
