{
  pulseAudioSystem.lockMainloop();
  try {
    if (stream == 0)     throw new IOException("stream");
    Object data=buffer.getData();
    byte[] bytes;
    if (data instanceof byte[]) {
      bytes=(byte[])data;
      if (bytes.length < fragsize) {
        bytes=new byte[fragsize];
        buffer.setData(bytes);
      }
    }
 else {
      bytes=new byte[fragsize];
      buffer.setData(bytes);
    }
    int toRead=fragsize;
    int offset=0;
    int length=0;
    while (toRead > 0) {
      if (corked)       break;
      if (this.length <= 0) {
        pulseAudioSystem.waitMainloop();
        continue;
      }
      int toCopy=(toRead < this.length) ? toRead : this.length;
      System.arraycopy(this.buffer,this.offset,bytes,offset,toCopy);
      this.offset+=toCopy;
      this.length-=toCopy;
      if (this.length <= 0) {
        this.offset=0;
        this.length=0;
      }
      toRead-=toCopy;
      offset+=toCopy;
      length+=toCopy;
    }
    buffer.setFlags(Buffer.FLAG_SYSTEM_TIME);
    buffer.setLength(length);
    buffer.setOffset(0);
    buffer.setTimeStamp(System.nanoTime());
    if (gainControl != null) {
      if (SOFTWARE_GAIN || (cvolume == 0)) {
        if (length > 0) {
          AbstractVolumeControl.applyGain(gainControl,bytes,0,length);
        }
      }
 else {
        float gainControlLevel=gainControl.getLevel();
        if (this.gainControlLevel != gainControlLevel) {
          this.gainControlLevel=gainControlLevel;
          setStreamVolume(stream,gainControlLevel);
        }
      }
    }
  }
  finally {
    pulseAudioSystem.unlockMainloop();
  }
}
