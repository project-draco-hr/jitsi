{
  if (stream != 0)   return;
  AudioFormat format=(AudioFormat)getFormat();
  int sampleRate=(int)format.getSampleRate();
  int channels=format.getChannels();
  int sampleSizeInBits=format.getSampleSizeInBits();
  if ((sampleRate == Format.NOT_SPECIFIED) && (MediaUtils.MAX_AUDIO_SAMPLE_RATE != Format.NOT_SPECIFIED))   sampleRate=(int)MediaUtils.MAX_AUDIO_SAMPLE_RATE;
  if (channels == Format.NOT_SPECIFIED)   channels=1;
  if (sampleSizeInBits == Format.NOT_SPECIFIED)   sampleSizeInBits=16;
  long stream=0;
  Throwable exception=null;
  try {
    stream=pulseAudioSystem.createStream(sampleRate,channels,getClass().getName(),PulseAudioSystem.MEDIA_ROLE_PHONE);
    this.channels=channels;
  }
 catch (  IllegalStateException ise) {
    exception=ise;
  }
catch (  RuntimeException re) {
    exception=re;
  }
  if (exception != null) {
    IOException ioe=new IOException();
    ioe.initCause(exception);
    throw ioe;
  }
  if (stream == 0)   throw new IOException("stream");
  try {
    int bytesPerTenMillis=(sampleRate / 100) * channels * (sampleSizeInBits / 8);
    fragsize=FRAGSIZE_IN_TENS_OF_MILLIS * bytesPerTenMillis;
    buffer=new byte[BUFFER_IN_TENS_OF_MILLIS * bytesPerTenMillis];
    long attr=PA.buffer_attr_new(-1,-1,-1,-1,fragsize);
    if (attr == 0)     throw new IOException("pa_buffer_attr_new");
    try {
      Runnable stateCallback=new Runnable(){
        public void run(){
          pulseAudioSystem.signalMainloop(false);
        }
      }
;
      PA.stream_set_state_callback(stream,stateCallback);
      PA.stream_connect_record(stream,getLocatorDev(),attr,PA.STREAM_ADJUST_LATENCY | PA.STREAM_START_CORKED);
      try {
        if (attr != 0) {
          PA.buffer_attr_free(attr);
          attr=0;
        }
        int state=pulseAudioSystem.waitForStreamState(stream,PA.STREAM_READY);
        if (state != PA.STREAM_READY)         throw new IOException("stream.state");
        PA.stream_set_read_callback(stream,readCallback);
        if (!SOFTWARE_GAIN && (gainControl != null)) {
          cvolume=PA.cvolume_new();
          boolean freeCvolume=true;
          try {
            float gainControlLevel=gainControl.getLevel();
            setStreamVolume(stream,gainControlLevel);
            this.gainControlLevel=gainControlLevel;
            freeCvolume=false;
          }
  finally {
            if (freeCvolume) {
              PA.cvolume_free(cvolume);
              cvolume=0;
            }
          }
        }
        this.stream=stream;
      }
  finally {
        if (this.stream == 0)         PA.stream_disconnect(stream);
      }
    }
  finally {
      if (attr != 0)       PA.buffer_attr_free(attr);
    }
  }
  finally {
    if (this.stream == 0)     PA.stream_unref(stream);
  }
}
