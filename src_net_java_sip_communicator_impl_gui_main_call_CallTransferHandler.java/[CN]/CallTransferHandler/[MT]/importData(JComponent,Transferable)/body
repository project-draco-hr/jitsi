{
  if (t.isDataFlavorSupported(uiContactDataFlavor)) {
    Object o=null;
    try {
      o=t.getTransferData(uiContactDataFlavor);
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
    if (o instanceof ContactNode) {
      UIContact uiContact=((ContactNode)o).getContactDescriptor();
      ProtocolProviderService callProvider=call.getProtocolProvider();
      Iterator<UIContactDetail> contactDetails=uiContact.getContactDetailsForOperationSet(OperationSetBasicTelephony.class).iterator();
      String callee=null;
      ProtocolProviderService provider=null;
      while (contactDetails.hasNext()) {
        UIContactDetail detail=contactDetails.next();
        ProtocolProviderService detailProvider=detail.getPreferredProtocolProvider(OperationSetBasicTelephony.class);
        if (detailProvider != null) {
          callee=detail.getAddress();
          provider=detailProvider;
          break;
        }
      }
      if (callee != null) {
        Map<ProtocolProviderService,List<String>> callees=new HashMap<ProtocolProviderService,List<String>>();
        callees.put(provider,Arrays.asList(callee));
        CallManager.inviteToConferenceCall(callees,call);
        return true;
      }
 else {
        ResourceManagementService resources=GuiActivator.getResources();
        AccountID accountID=callProvider.getAccountID();
        new ErrorDialog(null,resources.getI18NString("service.gui.ERROR"),resources.getI18NString("service.gui.CALL_NOT_SUPPORTING_PARTICIPANT",new String[]{accountID.getService(),accountID.getUserID(),uiContact.getDisplayName()})).showDialog();
      }
    }
  }
 else   if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
    InputContext inputContext=comp.getInputContext();
    if (inputContext != null) {
      inputContext.endComposition();
    }
    try {
      BufferedReader reader=new BufferedReader(DataFlavor.stringFlavor.getReaderForText(t));
      final StringBuffer buffToCall=new StringBuffer();
      String str;
      while ((str=reader.readLine()) != null)       buffToCall.append(str);
      CallManager.inviteToConferenceCall(new String[]{buffToCall.toString()},call);
      return true;
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
  }
  return false;
}
