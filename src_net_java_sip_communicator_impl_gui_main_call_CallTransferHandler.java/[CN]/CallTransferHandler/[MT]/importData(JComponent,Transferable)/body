{
  String callee=null;
  ProtocolProviderService provider=null;
  if (t.isDataFlavorSupported(uiContactDataFlavor)) {
    Object o=null;
    try {
      o=t.getTransferData(uiContactDataFlavor);
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
    if (o instanceof ContactNode) {
      UIContact uiContact=((ContactNode)o).getContactDescriptor();
      Iterator<UIContactDetail> contactDetails=uiContact.getContactDetailsForOperationSet(OperationSetBasicTelephony.class).iterator();
      while (contactDetails.hasNext()) {
        UIContactDetail detail=contactDetails.next();
        ProtocolProviderService detailProvider=detail.getPreferredProtocolProvider(OperationSetBasicTelephony.class);
        if (detailProvider != null) {
          if (callConference.isJitsiVideoBridge()) {
            for (            Call call : callConference.getCalls()) {
              if (detailProvider == call.getProtocolProvider()) {
                callee=detail.getAddress();
                provider=detailProvider;
                break;
              }
            }
          }
 else {
            callee=detail.getAddress();
            provider=detailProvider;
            break;
          }
        }
      }
      if (callee == null) {
        ProtocolProviderService callProvider=callConference.getCalls().get(0).getProtocolProvider();
        ResourceManagementService resources=GuiActivator.getResources();
        AccountID accountID=callProvider.getAccountID();
        new ErrorDialog(null,resources.getI18NString("service.gui.ERROR"),resources.getI18NString("service.gui.CALL_NOT_SUPPORTING_PARTICIPANT",new String[]{accountID.getService(),accountID.getUserID(),uiContact.getDisplayName()})).showDialog();
      }
    }
  }
 else   if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
    InputContext inputContext=comp.getInputContext();
    if (inputContext != null)     inputContext.endComposition();
    try {
      BufferedReader reader=new BufferedReader(DataFlavor.stringFlavor.getReaderForText(t));
      try {
        String line;
        StringBuilder calleeBuilder=new StringBuilder();
        while ((line=reader.readLine()) != null)         calleeBuilder.append(line);
        callee=calleeBuilder.toString();
      }
  finally {
        reader.close();
      }
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
  }
  if (callee == null)   return false;
 else {
    Map<ProtocolProviderService,List<String>> callees=new HashMap<ProtocolProviderService,List<String>>();
    callees.put(provider,Arrays.asList(callee));
    CallManager.inviteToConferenceCall(callees,callConference);
    return true;
  }
}
