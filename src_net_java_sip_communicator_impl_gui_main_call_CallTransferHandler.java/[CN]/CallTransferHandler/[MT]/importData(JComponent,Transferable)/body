{
  if (t.isDataFlavorSupported(metaContactDataFlavor)) {
    Object o=null;
    try {
      o=t.getTransferData(metaContactDataFlavor);
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
    if (o instanceof ContactNode) {
      MetaContact metaContact=((ContactNode)o).getMetaContact();
      ProtocolProviderService callProvider=call.getProtocolProvider();
      Iterator<Contact> contacts=metaContact.getContactsForProvider(callProvider);
      String callee=null;
      if (contacts.hasNext())       callee=contacts.next().getAddress();
      if (callee != null) {
        CallManager.inviteToConferenceCall(new String[]{callee},call);
        return true;
      }
 else       new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CALL_NOT_SUPPORTING_PARTICIPANT",new String[]{callProvider.getAccountID().getService(),callProvider.getAccountID().getUserID(),metaContact.getDisplayName()})).showDialog();
    }
  }
 else   if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
    InputContext inputContext=comp.getInputContext();
    if (inputContext != null) {
      inputContext.endComposition();
    }
    try {
      BufferedReader reader=new BufferedReader(DataFlavor.stringFlavor.getReaderForText(t));
      final StringBuffer buffToCall=new StringBuffer();
      String str;
      while ((str=reader.readLine()) != null)       buffToCall.append(str);
      CallManager.inviteToConferenceCall(new String[]{buffToCall.toString()},call);
      return true;
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",e);
    }
  }
  return false;
}
