{
  CallIdHeader callIdHeader=protocolProvider.getDefaultJainSipProvider().getNewCallId();
  HeaderFactory headerFactory=protocolProvider.getHeaderFactory();
  CSeqHeader cSeqHeader=null;
  try {
    cSeqHeader=headerFactory.createCSeqHeader(1l,Request.INVITE);
  }
 catch (  InvalidArgumentException ex) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Error occurred while constructing the CSeqHeadder",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
catch (  ParseException exc) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Error while constructing a CSeqHeadder",OperationFailedException.INTERNAL_ERROR,exc,logger);
  }
  Header replacesHeader=stripReplacesHeader(toAddress);
  String localTag=SipMessageFactory.generateLocalTag();
  FromHeader fromHeader=null;
  ToHeader toHeader=null;
  try {
    fromHeader=headerFactory.createFromHeader(protocolProvider.getOurSipAddress(toAddress),localTag);
    toHeader=headerFactory.createToHeader(toAddress,null);
  }
 catch (  ParseException ex) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("An unexpected erro occurred while" + "constructing the ToHeader",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  ArrayList<ViaHeader> viaHeaders=protocolProvider.getLocalViaHeaders(toAddress);
  MaxForwardsHeader maxForwards=protocolProvider.getMaxForwardsHeader();
  Request invite=null;
  try {
    invite=protocolProvider.getMessageFactory().createRequest(toHeader.getAddress().getURI(),Request.INVITE,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  }
 catch (  ParseException ex) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to create invite Request!",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  if (replacesHeader != null) {
    invite.setHeader(replacesHeader);
  }
  return invite;
}
