{
  LOGGER.trace("Start retrieve server chat room list.");
  if (!state.isConnected()) {
    throw new IllegalStateException("Not connected to an IRC server.");
  }
synchronized (this.channellist) {
    List<String> list=this.channellist.get(CHAT_ROOM_LIST_CACHE_EXPIRATION);
    if (list == null) {
      LOGGER.trace("Chat room list null or outdated. Start retrieving " + "new chat room list.");
      Result<List<String>,Exception> listSignal=new Result<List<String>,Exception>(new LinkedList<String>());
synchronized (listSignal) {
        try {
          this.irc.addListener(new ChannelListListener(listSignal));
          this.irc.rawMessage("LIST");
          while (!listSignal.isDone()) {
            LOGGER.trace("Waiting for list ...");
            listSignal.wait();
          }
          LOGGER.trace("Done waiting for list.");
        }
 catch (        InterruptedException e) {
          LOGGER.warn("INTERRUPTED while waiting for list.",e);
        }
      }
      list=listSignal.getValue();
      this.channellist.set(list);
      LOGGER.trace("Finished retrieving server chat room list.");
      createCleanUpJob(this.channellist);
    }
 else {
      LOGGER.trace("Using cached list of server chat rooms.");
    }
    if (LOGGER.isDebugEnabled()) {
      LOGGER.debug("Server channel list contains " + list.size() + " channels.");
    }
    return Collections.unmodifiableList(list);
  }
}
