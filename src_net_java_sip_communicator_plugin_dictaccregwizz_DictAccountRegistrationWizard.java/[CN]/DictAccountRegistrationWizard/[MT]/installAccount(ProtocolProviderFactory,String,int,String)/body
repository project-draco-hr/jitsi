{
  Hashtable<String,String> accountProperties=new Hashtable<String,String>();
  accountProperties.put(ProtocolProviderFactory.ACCOUNT_ICON_PATH,"resources/images/protocol/dict/dict-32x32.png");
  accountProperties.put(ProtocolProviderFactory.NO_PASSWORD_REQUIRED,new Boolean(true).toString());
  accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,host);
  accountProperties.put(ProtocolProviderFactory.SERVER_PORT,String.valueOf(port));
  accountProperties.put(ProtocolProviderFactory.STRATEGY,strategy);
  if (isModification) {
    providerFactory.uninstallAccount(protocolProvider.getAccountID());
    this.protocolProvider=null;
    this.isModification=false;
  }
  try {
    String uid=this.generateUID();
    AccountID accountID=providerFactory.installAccount(uid,accountProperties);
    ServiceReference serRef=providerFactory.getProviderForAccount(accountID);
    protocolProvider=(ProtocolProviderService)DictAccRegWizzActivator.bundleContext.getService(serRef);
  }
 catch (  IllegalStateException exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Account already exists.",OperationFailedException.IDENTIFICATION_CONFLICT);
  }
catch (  Exception exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Failed to add account",OperationFailedException.GENERAL_ERROR);
  }
  return protocolProvider;
}
