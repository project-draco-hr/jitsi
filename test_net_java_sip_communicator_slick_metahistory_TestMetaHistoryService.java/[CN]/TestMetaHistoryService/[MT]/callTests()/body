{
  Collection rs=metaHistoryService.findByEndDate(new String[]{CallHistoryService.class.getName()},null,controlDate2);
  Iterator resultIter=getCalls(rs).iterator();
  assertTrue("Calls too few - findByEndDate",rs.size() >= 3);
  rs=metaHistoryService.findByPeriod(new String[]{CallHistoryService.class.getName()},null,controlDate1,controlDate2);
  resultIter=rs.iterator();
  assertEquals("Calls must be 2",rs.size(),2);
  CallRecord rec=(CallRecord)resultIter.next();
  CallPeerRecord participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(2)));
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(3)));
  rs=metaHistoryService.findByStartDate(new String[]{CallHistoryService.class.getName()},null,controlDate2);
  resultIter=rs.iterator();
  assertEquals("Calls must be 2",rs.size(),2);
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(4)));
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(5)));
  rs=metaHistoryService.findLast(new String[]{CallHistoryService.class.getName()},null,3);
  resultIter=rs.iterator();
  assertEquals("Calls must be 3",rs.size(),3);
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(3)));
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(4)));
  rec=(CallRecord)resultIter.next();
  participant=rec.getPeerRecords().get(0);
  assertTrue("Participant incorrect ",participant.getPeerAddress().equals(participantAddresses.get(5)));
}
