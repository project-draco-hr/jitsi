{
  int i, s, k, cur_survivors, prev_survivors, input_index, cb_index, bestIndex;
  float se, wsse, rateDistThreshold, bestRateDist;
  float pNLSF_in[]=new float[Silk_define.MAX_LPC_ORDER];
  float pRateDist[];
  float pRate[];
  float pRate_new[];
  int pTempIndices[];
  int pPath[];
  int pPath_new[];
  float pRes[];
  float pRes_new[];
  if (Silk_define.LOW_COMPLEXITY_ONLY == 1) {
    pRateDist=new float[Silk_define.NLSF_MSVQ_TREE_SEARCH_MAX_VECTORS_EVALUATED_LC_MODE()];
    pRate=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE];
    pRate_new=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE];
    pTempIndices=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE];
    pPath=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE * Silk_define.NLSF_MSVQ_MAX_CB_STAGES];
    pPath_new=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE * Silk_define.NLSF_MSVQ_MAX_CB_STAGES];
    pRes=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE * Silk_define.MAX_LPC_ORDER];
    pRes_new=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE * Silk_define.MAX_LPC_ORDER];
  }
 else {
    pRateDist=new float[Silk_define.NLSF_MSVQ_TREE_SEARCH_MAX_VECTORS_EVALUATED()];
    pRate=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS];
    pRate_new=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS];
    pTempIndices=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS];
    pPath=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS * Silk_define.NLSF_MSVQ_MAX_CB_STAGES];
    pPath_new=new int[Silk_define.MAX_NLSF_MSVQ_SURVIVORS * Silk_define.NLSF_MSVQ_MAX_CB_STAGES];
    pRes=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS * Silk_define.MAX_LPC_ORDER];
    pRes_new=new float[Silk_define.MAX_NLSF_MSVQ_SURVIVORS * Silk_define.MAX_LPC_ORDER];
  }
  float[] pConstFloat;
  int pConstFloat_offset;
  float[] pFloat;
  int pFloat_offset;
  int[] pConstInt;
  int pConstInt_offset;
  int[] pInt;
  int pInt_offset;
  float[] pCB_element;
  int pCB_element_offset;
  SKP_Silk_NLSF_CBS_FLP pCurrentCBStage;
  assert(NLSF_MSVQ_Survivors <= Silk_define.MAX_NLSF_MSVQ_SURVIVORS);
  assert((Silk_define.LOW_COMPLEXITY_ONLY == 0) || (NLSF_MSVQ_Survivors <= Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE));
  cur_survivors=NLSF_MSVQ_Survivors;
  System.arraycopy(pNLSF,0,pNLSF_in,0,LPC_order);
  Arrays.fill(pRate,0,NLSF_MSVQ_Survivors,0);
  System.arraycopy(pNLSF,0,pRes,0,LPC_order);
  prev_survivors=1;
  for (s=0; s < psNLSF_CB_FLP.nStages; s++) {
    pCurrentCBStage=psNLSF_CB_FLP.CBStages[s];
    cur_survivors=Math.min(NLSF_MSVQ_Survivors,prev_survivors * pCurrentCBStage.nVectors);
    if (Silk_define.NLSF_MSVQ_FLUCTUATION_REDUCTION == 0) {
      if (s == psNLSF_CB_FLP.nStages - 1) {
        cur_survivors=1;
      }
    }
    Silk_NLSF_VQ_rate_distortion_FLP.SKP_Silk_NLSF_VQ_rate_distortion_FLP(pRateDist,pCurrentCBStage,pRes,pW,pRate,NLSF_mu,prev_survivors,LPC_order);
    Silk_sort_FLP.SKP_Silk_insertion_sort_increasing_FLP(pRateDist,0,pTempIndices,prev_survivors * pCurrentCBStage.nVectors,cur_survivors);
    rateDistThreshold=Silk_define.NLSF_MSVQ_SURV_MAX_REL_RD * pRateDist[0];
    while (pRateDist[cur_survivors - 1] > rateDistThreshold && cur_survivors > 1) {
      cur_survivors--;
    }
    for (k=0; k < cur_survivors; k++) {
      if (s > 0) {
        if (pCurrentCBStage.nVectors == 8) {
          input_index=(pTempIndices[k] >> 3);
          cb_index=pTempIndices[k] & 7;
        }
 else {
          input_index=pTempIndices[k] / pCurrentCBStage.nVectors;
          cb_index=pTempIndices[k] - input_index * pCurrentCBStage.nVectors;
        }
      }
 else {
        input_index=0;
        cb_index=pTempIndices[k];
      }
      pConstFloat=pRes;
      pConstFloat_offset=input_index * LPC_order;
      pCB_element=pCurrentCBStage.CB;
      pCB_element_offset=cb_index * LPC_order;
      pFloat=pRes_new;
      pFloat_offset=k * LPC_order;
      for (i=0; i < LPC_order; i++) {
        pFloat[pFloat_offset + i]=pConstFloat[pConstFloat_offset + i] - pCB_element[pCB_element_offset + i];
      }
      pRate_new[k]=pRate[input_index] + pCurrentCBStage.Rates[cb_index];
      pConstInt=pPath;
      pConstInt_offset=input_index * psNLSF_CB_FLP.nStages;
      pInt=pPath_new;
      pInt_offset=k * psNLSF_CB_FLP.nStages;
      for (i=0; i < s; i++) {
        pInt[pInt_offset + i]=pConstInt[pConstInt_offset + i];
      }
      pInt[pInt_offset + s]=cb_index;
    }
    if (s < psNLSF_CB_FLP.nStages - 1) {
      System.arraycopy(pRes_new,0,pRes,0,cur_survivors * LPC_order);
      System.arraycopy(pRate_new,0,pRate,0,cur_survivors);
      System.arraycopy(pPath_new,0,pPath,0,cur_survivors * psNLSF_CB_FLP.nStages);
    }
    prev_survivors=cur_survivors;
  }
  bestIndex=0;
  if (Silk_define.NLSF_MSVQ_FLUCTUATION_REDUCTION == 1) {
    if (deactivate_fluc_red != 1) {
      bestRateDist=Float.MAX_VALUE;
      for (s=0; s < cur_survivors; s++) {
        Silk_NLSF_MSVQ_decode_FLP.SKP_Silk_NLSF_MSVQ_decode_FLP(pNLSF,psNLSF_CB_FLP,pPath_new,s * psNLSF_CB_FLP.nStages,LPC_order);
        wsse=0;
        for (i=0; i < LPC_order; i+=2) {
          se=pNLSF[i] - pNLSF_q_prev[i];
          wsse+=pW[i] * se * se;
          se=pNLSF[i + 1] - pNLSF_q_prev[i + 1];
          wsse+=pW[i + 1] * se * se;
        }
        wsse=pRateDist[s] + wsse * NLSF_mu_fluc_red;
        if (wsse < bestRateDist) {
          bestRateDist=wsse;
          bestIndex=s;
        }
      }
    }
  }
  System.arraycopy(pPath_new,bestIndex * psNLSF_CB_FLP.nStages,NLSFIndices,0,psNLSF_CB_FLP.nStages);
  Silk_NLSF_MSVQ_decode_FLP.SKP_Silk_NLSF_MSVQ_decode_FLP(pNLSF,psNLSF_CB_FLP,NLSFIndices,0,LPC_order);
}
