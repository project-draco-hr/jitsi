{
  if (node.getNodeType() == Node.ATTRIBUTE_NODE) {
    String namespace=getNamespaceUri(node);
    if (namespace == null) {
      throw new Exception("Namespace cannot be null");
    }
    Attr attribute=document.createAttributeNS(namespace,node.getNodeName());
    attribute.setValue(((Attr)node).getValue());
    return attribute;
  }
 else   if (node.getNodeType() == Node.ELEMENT_NODE) {
    String namespace=getNamespaceUri(node);
    if (namespace == null) {
      throw new Exception("Namespace cannot be null");
    }
    Element element=document.createElementNS(namespace,node.getNodeName());
    NamedNodeMap attributes=node.getAttributes();
    for (int i=0; i < attributes.getLength(); i++) {
      Attr attribute=(Attr)attributes.item(i);
      if ("xmlns".equals(attribute.getPrefix())) {
        continue;
      }
      String namespaceUri=getNamespaceUri(attribute);
      if (namespaceUri == null) {
        throw new Exception("entry element is invalid");
      }
      element.getAttributes().setNamedItemNS(importNode(document,attribute));
    }
    NodeList childNodes=node.getChildNodes();
    for (int i=0; i < childNodes.getLength(); i++) {
      Node childNode=childNodes.item(i);
      if (childNode.getNodeType() == Node.ELEMENT_NODE) {
        element.appendChild(importNode(document,childNode));
      }
 else       if (childNode.getNodeType() == Node.TEXT_NODE) {
        element.appendChild(document.createTextNode(childNode.getTextContent()));
      }
    }
    return element;
  }
 else {
    throw new Exception("Node cannot be processed " + node.toString());
  }
}
