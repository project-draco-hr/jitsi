{
  float[] pCB_element;
  int pCB_element_offset;
  int s;
  int i;
  assert(0 <= NLSFIndices[NLSFIndices_offset + 0] && NLSFIndices[NLSFIndices_offset + 0] < psNLSF_CB_FLP.CBStages[0].nVectors);
  pCB_element=psNLSF_CB_FLP.CBStages[0].CB;
  pCB_element_offset=(NLSFIndices[NLSFIndices_offset + 0] * LPC_order);
  System.arraycopy(pCB_element,pCB_element_offset,pNLSF,0,LPC_order);
  for (s=1; s < psNLSF_CB_FLP.nStages; s++) {
    assert(0 <= NLSFIndices[NLSFIndices_offset + s] && NLSFIndices[NLSFIndices_offset + s] < psNLSF_CB_FLP.CBStages[s].nVectors);
    if (LPC_order == 16) {
      pCB_element=psNLSF_CB_FLP.CBStages[s].CB;
      pCB_element_offset=(NLSFIndices[NLSFIndices_offset + s] << 4);
      pNLSF[0]+=pCB_element[pCB_element_offset + 0];
      pNLSF[1]+=pCB_element[pCB_element_offset + 1];
      pNLSF[2]+=pCB_element[pCB_element_offset + 2];
      pNLSF[3]+=pCB_element[pCB_element_offset + 3];
      pNLSF[4]+=pCB_element[pCB_element_offset + 4];
      pNLSF[5]+=pCB_element[pCB_element_offset + 5];
      pNLSF[6]+=pCB_element[pCB_element_offset + 6];
      pNLSF[7]+=pCB_element[pCB_element_offset + 7];
      pNLSF[8]+=pCB_element[pCB_element_offset + 8];
      pNLSF[9]+=pCB_element[pCB_element_offset + 9];
      pNLSF[10]+=pCB_element[pCB_element_offset + 10];
      pNLSF[11]+=pCB_element[pCB_element_offset + 11];
      pNLSF[12]+=pCB_element[pCB_element_offset + 12];
      pNLSF[13]+=pCB_element[pCB_element_offset + 13];
      pNLSF[14]+=pCB_element[pCB_element_offset + 14];
      pNLSF[15]+=pCB_element[pCB_element_offset + 15];
    }
 else {
      pCB_element=psNLSF_CB_FLP.CBStages[s].CB;
      pCB_element_offset=NLSFIndices[NLSFIndices_offset + s] * LPC_order;
      for (i=0; i < LPC_order; i++) {
        pNLSF[i]+=pCB_element[pCB_element_offset + i];
      }
    }
  }
  Silk_wrappers_FLP.SKP_Silk_NLSF_stabilize_FLP(pNLSF,psNLSF_CB_FLP.NDeltaMin,LPC_order);
}
