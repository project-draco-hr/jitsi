{
  JButton b=new JButton(){
    int[][] buffer={{2,2,2,2,2,2,2,2},{0,1,1,1,1,1,1,3},{0,0,1,1,1,1,3,0},{0,0,0,1,1,3,0,0},{0,0,0,0,3,0,0,0}};
    @Override public void setBorder(    Border border){
    }
    @Override public void paint(    Graphics g){
      JSplitPane splitPane=getSplitPaneFromSuper();
      if (splitPane != null) {
        int oneTouchSize=getOneTouchSizeFromSuper();
        int orientation=getOrientationFromSuper();
        int blockSize=Math.min(getDividerSize(),oneTouchSize);
        Color[] colors={this.getBackground(),MetalLookAndFeel.getPrimaryControlDarkShadow(),MetalLookAndFeel.getPrimaryControlInfo(),MetalLookAndFeel.getPrimaryControlHighlight()};
        g.setColor(this.getBackground());
        g.fillRect(0,0,this.getWidth(),this.getHeight());
        if (getModel().isPressed()) {
          colors[1]=colors[2];
        }
        if (orientation == JSplitPane.VERTICAL_SPLIT) {
          for (int i=1; i <= buffer[0].length; i++) {
            for (int j=1; j < blockSize; j++) {
              if (buffer[j - 1][i - 1] == 0) {
                continue;
              }
 else {
                g.setColor(colors[buffer[j - 1][i - 1]]);
              }
              g.drawLine(i,j,i,j);
            }
          }
        }
 else {
          for (int i=1; i <= buffer[0].length; i++) {
            for (int j=1; j < blockSize; j++) {
              if (buffer[j - 1][i - 1] == 0) {
                continue;
              }
 else {
                g.setColor(colors[buffer[j - 1][i - 1]]);
              }
              g.drawLine(j,i,j,i);
            }
          }
        }
      }
    }
  }
;
  b.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  b.setFocusPainted(false);
  b.setBorderPainted(false);
  b.setRequestFocusEnabled(false);
  return b;
}
