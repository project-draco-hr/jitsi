{
  if (t.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
    try {
      Object o=t.getTransferData(DataFlavor.javaFileListFlavor);
      if (o instanceof java.util.Collection) {
        Collection<File> files=(Collection<File>)o;
        for (        File file : files) {
          chatPanel.sendFile(file);
        }
        return true;
      }
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop files.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop files.",e);
    }
  }
 else   if (t.isDataFlavorSupported(uiContactDataFlavor)) {
    Object o=null;
    try {
      o=t.getTransferData(uiContactDataFlavor);
    }
 catch (    UnsupportedFlavorException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
catch (    IOException e) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop meta contact.",e);
    }
    if (o instanceof ContactNode) {
      UIContact uiContact=((ContactNode)o).getContactDescriptor();
      if (!(uiContact instanceof MetaUIContact))       return false;
      ChatTransport currentChatTransport=chatPanel.getChatSession().getCurrentChatTransport();
      Iterator<Contact> contacts=((MetaContact)uiContact.getDescriptor()).getContactsForProvider(currentChatTransport.getProtocolProvider());
      String contact=null;
      if (contacts.hasNext())       contact=contacts.next().getAddress();
      if (contact != null) {
        List<String> inviteList=new ArrayList<String>();
        inviteList.add(contact);
        chatPanel.inviteContacts(currentChatTransport,inviteList,null);
        return true;
      }
 else       new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.ERROR"),GuiActivator.getResources().getI18NString("service.gui.CONTACT_NOT_SUPPORTING_CHAT_CONF",new String[]{uiContact.getDisplayName()})).showDialog();
    }
  }
 else   if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
    InputContext inputContext=comp.getInputContext();
    if (inputContext != null) {
      inputContext.endComposition();
    }
    try {
      BufferedReader reader=new BufferedReader(DataFlavor.stringFlavor.getReaderForText(t));
      StringBuffer buffToPaste=new StringBuffer();
      String line=reader.readLine();
      while (line != null) {
        buffToPaste.append(line);
        line=reader.readLine();
        if (line != null)         buffToPaste.append("\n");
      }
      ((JTextComponent)comp).replaceSelection(buffToPaste.toString());
      return true;
    }
 catch (    UnsupportedFlavorException ufe) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",ufe);
    }
catch (    IOException ioe) {
      if (logger.isDebugEnabled())       logger.debug("Failed to drop string.",ioe);
    }
  }
  return false;
}
