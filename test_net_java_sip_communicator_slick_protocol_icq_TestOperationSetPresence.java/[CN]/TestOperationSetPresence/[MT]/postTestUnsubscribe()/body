{
  logger.debug("Testing Unsubscribe and unsubscription event dispatch.");
  SubscriptionEventCollector subEvtCollector=new SubscriptionEventCollector();
  operationSetPresence.addSubsciptionListener(subEvtCollector);
  Contact icqTesterAgentContact=operationSetPresence.findContactByID(fixture.testerAgent.getIcqUIN());
  assertNotNull("Failed to find an existing subscription for the tester agent",icqTesterAgentContact);
synchronized (subEvtCollector) {
    operationSetPresence.unsubscribe(icqTesterAgentContact);
    subEvtCollector.waitForEvent(10000);
    operationSetPresence.removeSubscriptionListener(subEvtCollector);
  }
  assertEquals("Subscription event dispatching failed.",1,subEvtCollector.collectedEvents.size());
  SubscriptionEvent subEvt=(SubscriptionEvent)subEvtCollector.collectedEvents.get(0);
  assertEquals("SubscriptionEvent Source:",icqTesterAgentContact,subEvt.getSource());
  assertEquals("SubscriptionEvent Source Contact:",icqTesterAgentContact,subEvt.getSourceContact());
  assertSame("SubscriptionEvent Source Provider:",fixture.provider,subEvt.getSourceProvider());
  subEvtCollector.collectedEvents.clear();
  logger.debug("Testing (lack of) presence notifications.");
  IcqStatusEnum testerAgentOldStatus=fixture.testerAgent.getPresneceStatus();
  IcqStatusEnum testerAgentNewStatus=IcqStatusEnum.FREE_FOR_CHAT;
  long testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_FFC;
  if (testerAgentOldStatus.equals(testerAgentNewStatus)) {
    testerAgentNewStatus=IcqStatusEnum.DO_NOT_DISTURB;
    testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_DND;
  }
  ContactPresenceEventCollector contactPresEvtCollector=new ContactPresenceEventCollector(fixture.testerAgent.getIcqUIN(),null);
  operationSetPresence.addContactPresenceStatusListener(contactPresEvtCollector);
synchronized (contactPresEvtCollector) {
    if (!fixture.testerAgent.enterStatus(testerAgentNewStatusLong)) {
      throw new RuntimeException("Tester UserAgent Failed to switch to the " + testerAgentNewStatus.getStatusName() + " state.");
    }
    contactPresEvtCollector.waitForEvent(10000);
    operationSetPresence.removeContactPresenceStatusListener(contactPresEvtCollector);
  }
  assertEquals("Presence Notifications were received after unsubscibing.",0,contactPresEvtCollector.collectedEvents.size());
}
