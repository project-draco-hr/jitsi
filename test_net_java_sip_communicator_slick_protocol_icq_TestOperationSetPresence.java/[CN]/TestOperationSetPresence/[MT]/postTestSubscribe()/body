{
  logger.debug("Testing Subscription and Subscription Event Dispatch.");
  SubscriptionEventCollector subEvtCollector=new SubscriptionEventCollector();
  logger.trace("set Auth Handler");
  operationSetPresence.setAuthorizationHandler(authEventCollector);
synchronized (authEventCollector) {
    authEventCollector.authorizationRequestReason="Please deny my request!";
    fixture.testerAgent.getAuthCmdFactory().responseReasonStr="First authorization I will Deny!!!";
    fixture.testerAgent.getAuthCmdFactory().ACCEPT=false;
    operationSetPresence.subscribe(fixture.testerAgent.getIcqUIN());
    SubscriptionEventCollector moveEvtCollector=new SubscriptionEventCollector();
    operationSetPresence.addSubscriptionListener(moveEvtCollector);
    logger.debug("Waiting for authorization error and authorization response...");
    authEventCollector.waitForAuthResponse(15000);
    assertTrue("Error adding buddy not recieved or the buddy(" + fixture.testerAgent.getIcqUIN() + ") doesn't require authorization",authEventCollector.isAuthorizationRequestSent);
    assertNotNull("Agent haven't received any reason for authorization",fixture.testerAgent.getAuthCmdFactory().requestReasonStr);
    assertEquals("Error sent request reason is not as the received one",authEventCollector.authorizationRequestReason,fixture.testerAgent.getAuthCmdFactory().requestReasonStr);
    logger.debug("authEventCollector.isAuthorizationResponseReceived " + authEventCollector.isAuthorizationResponseReceived);
    assertTrue("Response not received!",authEventCollector.isAuthorizationResponseReceived);
    boolean isAcceptedAuthReuest=authEventCollector.response.getResponseCode().equals(AuthorizationResponse.ACCEPT);
    assertEquals("Response is not as the sent one",fixture.testerAgent.getAuthCmdFactory().ACCEPT,isAcceptedAuthReuest);
    assertNotNull("We didn't receive any reason! ",authEventCollector.authorizationResponseString);
    assertEquals("The sent response reason is not as the received one",fixture.testerAgent.getAuthCmdFactory().responseReasonStr,authEventCollector.authorizationResponseString);
synchronized (moveEvtCollector) {
      moveEvtCollector.waitForEvent(20000);
      operationSetPresence.removeSubscriptionListener(moveEvtCollector);
    }
    Contact c=operationSetPresence.findContactByID(fixture.testerAgent.getIcqUIN());
    logger.debug("I will remove " + c + " from group : "+ c.getParentContactGroup());
    UnsubscribeWait unsubscribeEvtCollector=new UnsubscribeWait();
    operationSetPresence.addSubscriptionListener(unsubscribeEvtCollector);
synchronized (unsubscribeEvtCollector) {
      operationSetPresence.unsubscribe(c);
      logger.debug("Waiting to be removed...");
      unsubscribeEvtCollector.waitForUnsubscribre(20000);
      logger.debug("Received unsubscribed ok or we lost patients!");
      operationSetPresence.removeSubscriptionListener(unsubscribeEvtCollector);
    }
    authEventCollector.authorizationRequestReason="Please accept my request!";
    fixture.testerAgent.getAuthCmdFactory().responseReasonStr="Second authorization I will Accept!!!";
    fixture.testerAgent.getAuthCmdFactory().ACCEPT=true;
    authEventCollector.isAuthorizationRequestSent=false;
    authEventCollector.isAuthorizationResponseReceived=false;
    authEventCollector.authorizationResponseString=null;
    logger.debug("I will add buddy does it exists ?  " + (operationSetPresence.findContactByID(fixture.testerAgent.getIcqUIN()) != null));
    operationSetPresence.addSubscriptionListener(subEvtCollector);
    operationSetPresence.subscribe(fixture.testerAgent.getIcqUIN());
    logger.debug("Waiting ... Subscribe must fail and the authorization process " + "to be trigered again so waiting for auth response ...");
    authEventCollector.waitForAuthResponse(15000);
    assertTrue("Error adding buddy not recieved or the buddy(" + fixture.testerAgent.getIcqUIN() + ") doesn't require authorization",authEventCollector.isAuthorizationRequestSent);
    assertNotNull("Agent haven't received any reason for authorization",fixture.testerAgent.getAuthCmdFactory().requestReasonStr);
    assertEquals("Error sent request reason",authEventCollector.authorizationRequestReason,fixture.testerAgent.getAuthCmdFactory().requestReasonStr);
    Object obj=new Object();
synchronized (obj) {
      logger.debug("wait for authorization process to be finnished");
      obj.wait(10000);
      logger.debug("Stop waiting!");
    }
    subEvtCollector.waitForEvent(10000);
    operationSetPresence.removeSubscriptionListener(subEvtCollector);
  }
  assertTrue("Subscription event dispatching failed.",subEvtCollector.collectedEvents.size() > 0);
  EventObject evt=null;
  Iterator events=subEvtCollector.collectedEvents.iterator();
  while (events.hasNext()) {
    Object elem=events.next();
    if (elem instanceof SubscriptionEvent) {
      if (((SubscriptionEvent)elem).getEventID() == SubscriptionEvent.SUBSCRIPTION_CREATED)       evt=(SubscriptionEvent)elem;
    }
  }
  Object source=null;
  Contact srcContact=null;
  ProtocolProviderService srcProvider=null;
  if (evt instanceof SubscriptionEvent) {
    SubscriptionEvent subEvt=(SubscriptionEvent)evt;
    source=subEvt.getSource();
    srcContact=subEvt.getSourceContact();
    srcProvider=subEvt.getSourceProvider();
  }
  assertEquals("SubscriptionEvent Source:",fixture.testerAgent.getIcqUIN(),((Contact)source).getAddress());
  assertEquals("SubscriptionEvent Source Contact:",fixture.testerAgent.getIcqUIN(),srcContact.getAddress());
  assertSame("SubscriptionEvent Source Provider:",fixture.provider,srcProvider);
  subEvtCollector.collectedEvents.clear();
  logger.debug("Testing presence notifications.");
  IcqStatusEnum testerAgentOldStatus=fixture.testerAgent.getPresneceStatus();
  IcqStatusEnum testerAgentNewStatus=IcqStatusEnum.FREE_FOR_CHAT;
  long testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_FFC;
  if (testerAgentOldStatus.equals(testerAgentNewStatus)) {
    testerAgentNewStatus=IcqStatusEnum.DO_NOT_DISTURB;
    testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_DND;
  }
  ContactPresenceEventCollector contactPresEvtCollector=new ContactPresenceEventCollector(fixture.testerAgent.getIcqUIN(),testerAgentNewStatus);
  operationSetPresence.addContactPresenceStatusListener(contactPresEvtCollector);
synchronized (contactPresEvtCollector) {
    if (!fixture.testerAgent.enterStatus(testerAgentNewStatusLong)) {
      throw new RuntimeException("Tester UserAgent Failed to switch to the " + testerAgentNewStatus.getStatusName() + " state.");
    }
    contactPresEvtCollector.waitForEvent(12000);
    operationSetPresence.removeContactPresenceStatusListener(contactPresEvtCollector);
  }
  if (contactPresEvtCollector.collectedEvents.size() == 0) {
    logger.info("PROBLEM. Authorisation process doesn't have finnished " + "Server doesn't report us for changing authorization flag! Will try to authorize once again");
    fixture.testerAgent.sendAuthorizationReplay(fixture.icqAccountID.getUserID(),fixture.testerAgent.getAuthCmdFactory().responseReasonStr,fixture.testerAgent.getAuthCmdFactory().ACCEPT);
    Object obj=new Object();
synchronized (obj) {
      logger.debug("wait for authorization process to be finnished for second time");
      obj.wait(10000);
      logger.debug("Stop waiting!");
    }
    testerAgentOldStatus=fixture.testerAgent.getPresneceStatus();
    testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_FFC;
    if (testerAgentOldStatus.equals(testerAgentNewStatus)) {
      testerAgentNewStatus=IcqStatusEnum.OCCUPIED;
      testerAgentNewStatusLong=FullUserInfo.ICQSTATUS_OCCUPIED;
    }
    contactPresEvtCollector=new ContactPresenceEventCollector(fixture.testerAgent.getIcqUIN(),testerAgentNewStatus);
    operationSetPresence.addContactPresenceStatusListener(contactPresEvtCollector);
synchronized (contactPresEvtCollector) {
      if (!fixture.testerAgent.enterStatus(testerAgentNewStatusLong)) {
        throw new RuntimeException("Tester UserAgent Failed to switch to the " + testerAgentNewStatus.getStatusName() + " state.");
      }
      contactPresEvtCollector.waitForEvent(12000);
      operationSetPresence.removeContactPresenceStatusListener(contactPresEvtCollector);
    }
  }
  assertEquals("Presence Notif. event dispatching failed.",1,contactPresEvtCollector.collectedEvents.size());
  ContactPresenceStatusChangeEvent presEvt=(ContactPresenceStatusChangeEvent)contactPresEvtCollector.collectedEvents.get(0);
  assertEquals("Presence Notif. event  Source:",fixture.testerAgent.getIcqUIN(),((Contact)presEvt.getSource()).getAddress());
  assertEquals("Presence Notif. event  Source Contact:",fixture.testerAgent.getIcqUIN(),presEvt.getSourceContact().getAddress());
  assertSame("Presence Notif. event  Source Provider:",fixture.provider,presEvt.getSourceProvider());
  PresenceStatus reportedNewStatus=presEvt.getNewStatus();
  PresenceStatus reportedOldStatus=presEvt.getOldStatus();
  assertEquals("Reported new PresenceStatus: ",testerAgentNewStatus,reportedNewStatus);
  assertNotNull("Reported old PresenceStatus: ",reportedOldStatus);
  Object obj=new Object();
synchronized (obj) {
    logger.debug("wait a moment. give time to server");
    obj.wait(4000);
  }
}
