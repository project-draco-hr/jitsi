{
  logger.debug("Testing receive of authorization request!");
  String firstRequestResponse="First Request will be denied!!!";
  authEventCollector.responseToRequest=new AuthorizationResponse(AuthorizationResponse.REJECT,firstRequestResponse);
  logger.debug("authEventCollector " + authEventCollector);
  authEventCollector.isAuthorizationRequestReceived=false;
  authEventCollector.authorizationRequestReason=null;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().requestReasonStr="Deny my first request!";
  IcqSlickFixture.testerAgent.getAuthCmdFactory().isErrorAddingReceived=false;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().responseReasonStr=null;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().isRequestAccepted=false;
  IcqSlickFixture.testerAgent.deleteBuddy(fixture.ourUserID);
  IcqSlickFixture.testerAgent.addBuddy(fixture.ourUserID);
  authEventCollector.waitForAuthRequest(25000);
  assertTrue("Error adding buddy not recieved or the buddy(" + fixture.ourUserID + ") doesn't require authorization 1",IcqSlickFixture.testerAgent.getAuthCmdFactory().isErrorAddingReceived);
  assertTrue("We haven't received any authorization request ",authEventCollector.isAuthorizationRequestReceived);
  assertNotNull("We haven't received any reason for authorization",authEventCollector.authorizationRequestReason);
  assertEquals("Error sent request reason is not as the received one",IcqSlickFixture.testerAgent.getAuthCmdFactory().requestReasonStr,authEventCollector.authorizationRequestReason);
  Object lock=new Object();
synchronized (lock) {
    try {
      lock.wait(5000);
    }
 catch (    Exception ex) {
    }
  }
  assertNotNull("Agent haven't received any reason from authorization reply",authEventCollector.authorizationRequestReason);
  assertEquals("Received auth response from agent is not as the sent one",IcqSlickFixture.testerAgent.getAuthCmdFactory().responseReasonStr,firstRequestResponse);
  boolean isAcceptedAuthReuest=authEventCollector.responseToRequest.getResponseCode().equals(AuthorizationResponse.ACCEPT);
  assertEquals("Agent received Response is not as the sent one",IcqSlickFixture.testerAgent.getAuthCmdFactory().isRequestAccepted,isAcceptedAuthReuest);
  IcqSlickFixture.testerAgent.deleteBuddy(fixture.ourUserID);
  String secondRequestResponse="Second Request will be accepted!!!";
  authEventCollector.responseToRequest=new AuthorizationResponse(AuthorizationResponse.ACCEPT,secondRequestResponse);
  authEventCollector.isAuthorizationRequestReceived=false;
  authEventCollector.authorizationRequestReason=null;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().requestReasonStr="Accept my second request!";
  IcqSlickFixture.testerAgent.getAuthCmdFactory().isErrorAddingReceived=false;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().responseReasonStr=null;
  IcqSlickFixture.testerAgent.getAuthCmdFactory().isRequestAccepted=false;
  IcqSlickFixture.testerAgent.addBuddy(fixture.ourUserID);
  authEventCollector.waitForAuthRequest(25000);
  assertTrue("Error adding buddy not recieved or the buddy(" + fixture.ourUserID + ") doesn't require authorization 2",IcqSlickFixture.testerAgent.getAuthCmdFactory().isErrorAddingReceived);
  assertTrue("We haven't received any authorization request ",authEventCollector.isAuthorizationRequestReceived);
  assertNotNull("We haven't received any reason for authorization",authEventCollector.authorizationRequestReason);
  assertEquals("Error sent request reason is not as the received one",IcqSlickFixture.testerAgent.getAuthCmdFactory().requestReasonStr,authEventCollector.authorizationRequestReason);
synchronized (lock) {
    try {
      lock.wait(5000);
    }
 catch (    Exception ex) {
    }
  }
  assertNotNull("Agent haven't received any reason from authorization reply",authEventCollector.authorizationRequestReason);
  assertEquals("Received auth response from agent is not as the sent one",IcqSlickFixture.testerAgent.getAuthCmdFactory().responseReasonStr,secondRequestResponse);
  isAcceptedAuthReuest=authEventCollector.responseToRequest.getResponseCode().equals(AuthorizationResponse.ACCEPT);
  assertEquals("Agent received Response is not as the sent one",IcqSlickFixture.testerAgent.getAuthCmdFactory().isRequestAccepted,isAcceptedAuthReuest);
}
