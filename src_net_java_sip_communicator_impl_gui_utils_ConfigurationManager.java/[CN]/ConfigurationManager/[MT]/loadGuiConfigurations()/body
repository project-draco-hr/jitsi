{
  configService.addPropertyChangeListener(new ConfigurationChangeListener());
  String autoPopupProperty="service.gui.AUTO_POPUP_NEW_MESSAGE";
  String autoPopup=configService.getString(autoPopupProperty);
  if (autoPopup == null)   autoPopup=GuiActivator.getResources().getSettingsString(autoPopupProperty);
  if (autoPopup != null && autoPopup.equalsIgnoreCase("yes"))   autoPopupNewMessage=true;
  String messageCommandProperty="service.gui.SEND_MESSAGE_COMMAND";
  String messageCommand=configService.getString(messageCommandProperty);
  if (messageCommand == null)   messageCommand=GuiActivator.getResources().getSettingsString(messageCommandProperty);
  if (messageCommand == null || messageCommand.length() == 0)   sendMessageCommand=messageCommand;
  String callPanelShown=configService.getString("net.java.sip.communicator.impl.gui.showCallPanel");
  if (callPanelShown != null && callPanelShown.length() > 0) {
    isCallPanelShown=Boolean.parseBoolean(callPanelShown);
  }
  String showOffline=configService.getString("net.java.sip.communicator.impl.gui.showOffline");
  if (showOffline != null && showOffline.length() > 0) {
    isShowOffline=Boolean.parseBoolean(showOffline);
  }
  String isVisible=configService.getString("net.java.sip.communicator.impl.systray.showApplication");
  if (isVisible != null && isVisible.length() > 0) {
    isApplicationVisible=new Boolean(isVisible).booleanValue();
  }
  String quitWarningShown=configService.getString("net.java.sip.communicator.impl.gui.quitWarningShown");
  if (quitWarningShown != null && quitWarningShown.length() > 0) {
    isQuitWarningShown=Boolean.parseBoolean(quitWarningShown);
  }
  String isSendTypingNotifProperty="service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED";
  String isSendTypingNotif=configService.getString(isSendTypingNotifProperty);
  if (isSendTypingNotif == null)   isSendTypingNotif=GuiActivator.getResources().getSettingsString(isSendTypingNotifProperty);
  if (isSendTypingNotif != null && isSendTypingNotif.length() > 0) {
    isSendTypingNotifications=Boolean.parseBoolean(isSendTypingNotif);
  }
  String isMoveContactConfirmationRequestedString=configService.getString("net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested");
  if (isMoveContactConfirmationRequestedString != null && isMoveContactConfirmationRequestedString.length() > 0) {
    isMoveContactConfirmationRequested=Boolean.parseBoolean(isMoveContactConfirmationRequestedString);
  }
  String isMultiChatWindowEnabledStringProperty="service.gui.IS_MULTI_CHAT_WINDOW_ENABLED";
  String isMultiChatWindowEnabledString=configService.getString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString == null)   isMultiChatWindowEnabledString=GuiActivator.getResources().getSettingsString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString != null && isMultiChatWindowEnabledString.length() > 0) {
    isMultiChatWindowEnabled=Boolean.parseBoolean(isMultiChatWindowEnabledString);
  }
  String isHistoryLoggingEnabledString=configService.getString("net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled");
  if (isHistoryLoggingEnabledString != null && isHistoryLoggingEnabledString.length() > 0) {
    isHistoryLoggingEnabled=Boolean.parseBoolean(isHistoryLoggingEnabledString);
  }
  String isHistoryShownStringProperty="service.gui.IS_MESSAGE_HISTORY_SHOWN";
  String isHistoryShownString=configService.getString(isHistoryShownStringProperty);
  if (isHistoryShownString == null)   isHistoryShownString=GuiActivator.getResources().getSettingsString(isHistoryShownStringProperty);
  if (isHistoryShownString != null && isHistoryShownString.length() > 0) {
    isHistoryShown=Boolean.parseBoolean(isHistoryShownString);
  }
  String chatHistorySizeStringProperty="service.gui.MESSAGE_HISTORY_SIZE";
  String chatHistorySizeString=configService.getString(chatHistorySizeStringProperty);
  if (chatHistorySizeString == null)   chatHistorySizeString=GuiActivator.getResources().getSettingsString(chatHistorySizeStringProperty);
  if (chatHistorySizeString != null && chatHistorySizeString.length() > 0) {
    chatHistorySize=new Integer(chatHistorySizeString).intValue();
  }
  String chatWriteAreaSizeStringProperty="net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE";
  String chatWriteAreaSizeString=configService.getString(chatWriteAreaSizeStringProperty);
  if (chatWriteAreaSizeString == null)   chatWriteAreaSizeString=GuiActivator.getResources().getSettingsString(chatWriteAreaSizeStringProperty);
  if (chatWriteAreaSizeString != null && chatWriteAreaSizeString.length() > 0) {
    chatWriteAreaSize=new Integer(chatWriteAreaSizeString).intValue();
  }
  String isTransparentWindowEnabledProperty="impl.gui.IS_TRANSPARENT_WINDOW_ENABLED";
  String isTransparentWindowEnabledString=configService.getString(isTransparentWindowEnabledProperty);
  if (isTransparentWindowEnabledString == null)   isTransparentWindowEnabledString=GuiActivator.getResources().getSettingsString(isTransparentWindowEnabledProperty);
  if (isTransparentWindowEnabledString != null && isTransparentWindowEnabledString.length() > 0) {
    isTransparentWindowEnabled=Boolean.parseBoolean(isTransparentWindowEnabledString);
  }
  String windowTransparencyProperty="impl.gui.WINDOW_TRANSPARENCY";
  String windowTransparencyString=configService.getString(windowTransparencyProperty);
  if (windowTransparencyString == null)   windowTransparencyString=GuiActivator.getResources().getSettingsString(windowTransparencyProperty);
  if (windowTransparencyString != null && windowTransparencyString.length() > 0) {
    windowTransparency=new Integer(windowTransparencyString).intValue();
  }
  String isWindowDecoratedProperty="impl.gui.IS_WINDOW_DECORATED";
  String isWindowDecoratedString=configService.getString(isWindowDecoratedProperty);
  if (isWindowDecoratedString == null)   isWindowDecoratedString=GuiActivator.getResources().getSettingsString(isWindowDecoratedProperty);
  if (isWindowDecoratedString != null && isWindowDecoratedString.length() > 0) {
    isWindowDecorated=Boolean.parseBoolean(isWindowDecoratedString);
  }
  isChatToolbarVisible=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar",true);
  isChatStylebarVisible=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar",true);
  lastContactParent=configService.getString("net.java.sip.communicator.impl.gui.addcontact.lastContactParent");
  sendFileLastDir=configService.getString("net.java.sip.communicator.impl.gui.chat.filetransfer.SEND_FILE_LAST_DIR");
}
