{
  configService.addPropertyChangeListener(new ConfigurationChangeListener());
  String autoPopupProperty="net.java.sip.communicator.impl.gui.autoPopupNewMessage";
  String autoPopup=configService.getString(autoPopupProperty);
  if (autoPopup == null)   autoPopup=GuiActivator.getResources().getSettingsString(autoPopupProperty);
  if (autoPopup != null && autoPopup.equalsIgnoreCase("yes"))   autoPopupNewMessage=true;
  String messageCommandProperty="net.java.sip.communicator.impl.gui.sendMessageCommand";
  String messageCommand=configService.getString(messageCommandProperty);
  if (messageCommand == null)   messageCommand=GuiActivator.getResources().getSettingsString(messageCommandProperty);
  if (messageCommand == null || messageCommand.length() == 0)   sendMessageCommand=messageCommand;
  String callPanelShown=configService.getString("net.java.sip.communicator.impl.gui.showCallPanel");
  if (callPanelShown != null && callPanelShown.length() > 0) {
    isCallPanelShown=new Boolean(callPanelShown).booleanValue();
  }
  String showOffline=configService.getString("net.java.sip.communicator.impl.gui.showOffline");
  if (showOffline != null && showOffline.length() > 0) {
    isShowOffline=new Boolean(showOffline).booleanValue();
  }
  String isVisible=configService.getString("net.java.sip.communicator.impl.systray.showApplication");
  if (isVisible != null && isVisible.length() > 0) {
    isApplicationVisible=new Boolean(isVisible).booleanValue();
  }
  String quitWarningShown=configService.getString("net.java.sip.communicator.impl.gui.quitWarningShown");
  if (quitWarningShown != null && quitWarningShown.length() > 0) {
    isQuitWarningShown=new Boolean(quitWarningShown).booleanValue();
  }
  String isSendTypingNotifProperty="net.java.sip.communicator.impl.gui.sendTypingNotifications";
  String isSendTypingNotif=configService.getString(isSendTypingNotifProperty);
  if (isSendTypingNotif == null)   isSendTypingNotif=GuiActivator.getResources().getSettingsString(isSendTypingNotifProperty);
  if (isSendTypingNotif != null && isSendTypingNotif.length() > 0) {
    isSendTypingNotifications=new Boolean(isSendTypingNotif).booleanValue();
  }
  String isMoveContactConfirmationRequestedString=configService.getString("net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested");
  if (isMoveContactConfirmationRequestedString != null && isMoveContactConfirmationRequestedString.length() > 0) {
    isMoveContactConfirmationRequested=new Boolean(isMoveContactConfirmationRequestedString).booleanValue();
  }
  String isMultiChatWindowEnabledStringProperty="net.java.sip.communicator.impl.gui.isMultiChatWindowEnabled";
  String isMultiChatWindowEnabledString=configService.getString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString == null)   isMultiChatWindowEnabledString=GuiActivator.getResources().getSettingsString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString != null && isMultiChatWindowEnabledString.length() > 0) {
    isMultiChatWindowEnabled=new Boolean(isMultiChatWindowEnabledString).booleanValue();
  }
  String isHistoryLoggingEnabledString=configService.getString("net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled");
  if (isHistoryLoggingEnabledString != null && isHistoryLoggingEnabledString.length() > 0) {
    isHistoryLoggingEnabled=new Boolean(isHistoryLoggingEnabledString).booleanValue();
  }
  String isHistoryShownStringProperty="net.java.sip.communicator.impl.gui.isMessageHistoryShown";
  String isHistoryShownString=configService.getString(isHistoryShownStringProperty);
  if (isHistoryShownString == null)   isHistoryShownString=GuiActivator.getResources().getSettingsString(isHistoryShownStringProperty);
  if (isHistoryShownString != null && isHistoryShownString.length() > 0) {
    isHistoryShown=new Boolean(isHistoryShownString).booleanValue();
  }
  String chatHistorySizeStringProperty="net.java.sip.communicator.impl.gui.messageHistorySize";
  String chatHistorySizeString=configService.getString(chatHistorySizeStringProperty);
  if (chatHistorySizeString == null)   chatHistorySizeString=GuiActivator.getResources().getSettingsString(chatHistorySizeStringProperty);
  if (chatHistorySizeString != null && chatHistorySizeString.length() > 0) {
    chatHistorySize=new Integer(chatHistorySizeString).intValue();
  }
  lastContactParent=configService.getString("net.java.sip.communicator.impl.gui.addcontact.lastContactParent");
}
