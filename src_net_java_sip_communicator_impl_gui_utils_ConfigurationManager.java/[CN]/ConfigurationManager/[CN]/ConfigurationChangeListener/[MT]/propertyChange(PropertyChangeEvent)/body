{
  if (!(evt.getNewValue() instanceof String))   return;
  String newValue=(String)evt.getNewValue();
  if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.addcontact.lastContactParent")) {
    lastContactParent=newValue;
  }
 else   if (evt.getPropertyName().equals("service.gui.AUTO_POPUP_NEW_MESSAGE")) {
    autoPopupNewMessage=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.SEND_MESSAGE_COMMAND")) {
    sendMessageCommand=newValue;
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.showCallPanel")) {
    isCallPanelShown=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.showOffline")) {
    isShowOffline=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.systray.showApplication")) {
    isApplicationVisible=Boolean.parseBoolean(newValue);
    ;
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.quitWarningShown")) {
    isQuitWarningShown=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED")) {
    isSendTypingNotifications=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested")) {
    isMoveContactConfirmationRequested=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.IS_MULTI_CHAT_WINDOW_ENABLED")) {
    isMultiChatWindowEnabled=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE")) {
    isLeaveChatRoomOnWindowCloseEnabled=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled")) {
    isHistoryLoggingEnabled=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.IS_MESSAGE_HISTORY_SHOWN")) {
    isHistoryShown=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("service.gui.MESSAGE_HISTORY_SIZE")) {
    chatHistorySize=Integer.parseInt(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE")) {
    chatWriteAreaSize=Integer.parseInt(newValue);
  }
 else   if (evt.getPropertyName().equals("impl.gui.IS_TRANSPARENT_WINDOW_ENABLED")) {
    isTransparentWindowEnabled=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("impl.gui.WINDOW_TRANSPARENCY")) {
    windowTransparency=Integer.parseInt(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar")) {
    isChatStylebarVisible=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar")) {
    isChatToolbarVisible=Boolean.parseBoolean(newValue);
  }
 else   if (evt.getPropertyName().equals("net.java.sip.communicator.impl.gui.call.lastCallConferenceProvider")) {
    lastCallConferenceProvider=findProviderFromAccountId(newValue);
  }
}
