{
  if (!SwingUtilities.isEventDispatchThread()) {
    SwingUtilities.invokeLater(new Runnable(){
      public void run(){
        incomingCallReceived(event);
      }
    }
);
    return;
  }
  Call sourceCall=event.getSourceCall();
  final ReceivedCallDialog receivedCallDialog=new ReceivedCallDialog(sourceCall,event.isVideoCall());
  receivedCallDialog.setVisible(true);
  final String peerName=sourceCall.getCallPeers().next().getDisplayName();
  final Date callDate=new Date();
  sourceCall.addCallChangeListener(new CallChangeAdapter(){
    @Override public void callStateChanged(    CallChangeEvent evt){
      if (receivedCallDialog.isVisible())       receivedCallDialog.setVisible(false);
      Call call=evt.getSourceCall();
      if ((evt.getNewValue().equals(CallState.CALL_INITIALIZATION) || evt.getNewValue().equals(CallState.CALL_IN_PROGRESS)) && activeCalls.get(call) == null) {
        openCallContainer(call);
      }
      if (evt.getNewValue().equals(CallState.CALL_ENDED)) {
        if (evt.getOldValue().equals(CallState.CALL_INITIALIZATION)) {
          if (evt.getCause() == null || (evt.getCause().getReasonCode() != CallPeerChangeEvent.NORMAL_CALL_CLEARING)) {
            addMissedCallNotification(peerName,callDate);
          }
          evt.getSourceCall().removeCallChangeListener(this);
        }
        TreeContactList contactList=GuiActivator.getContactList();
        if (contactList.getCurrentFilter().equals(TreeContactList.historyFilter)) {
          contactList.applyFilter(TreeContactList.historyFilter);
        }
      }
    }
  }
);
}
