{
  Call sourceCall=ev.getSourceCall();
  Iterator<? extends CallPeer> peerIter=sourceCall.getCallPeers();
  if (peerIter.hasNext()) {
    final String peerName=peerIter.next().getDisplayName();
    final long callTime=System.currentTimeMillis();
    sourceCall.addCallChangeListener(new CallChangeAdapter(){
      @Override public void callStateChanged(      final CallChangeEvent ev){
        if (!SwingUtilities.isEventDispatchThread()) {
          SwingUtilities.invokeLater(new Runnable(){
            public void run(){
              callStateChanged(ev);
            }
          }
);
          return;
        }
        if (!CallChangeEvent.CALL_STATE_CHANGE.equals(ev.getPropertyName()))         return;
        if (receivedCallDialog != null && receivedCallDialog.isVisible()) {
          receivedCallDialog.setVisible(false);
        }
        showReceivedCallDialog=false;
        Object newValue=ev.getNewValue();
        Call call=ev.getSourceCall();
        if (CallState.CALL_INITIALIZATION.equals(newValue) || CallState.CALL_IN_PROGRESS.equals(newValue)) {
          openCallContainerIfNecessary(call);
        }
 else         if (CallState.CALL_ENDED.equals(newValue)) {
          if (ev.getOldValue().equals(CallState.CALL_INITIALIZATION)) {
            CallPeerChangeEvent cause=ev.getCause();
            if ((cause == null) || (cause.getReasonCode() != CallPeerChangeEvent.NORMAL_CALL_CLEARING)) {
              addMissedCallNotification(peerName,callTime);
            }
          }
          call.removeCallChangeListener(this);
        }
      }
    }
);
  }
  super.incomingCallReceived(ev);
}
