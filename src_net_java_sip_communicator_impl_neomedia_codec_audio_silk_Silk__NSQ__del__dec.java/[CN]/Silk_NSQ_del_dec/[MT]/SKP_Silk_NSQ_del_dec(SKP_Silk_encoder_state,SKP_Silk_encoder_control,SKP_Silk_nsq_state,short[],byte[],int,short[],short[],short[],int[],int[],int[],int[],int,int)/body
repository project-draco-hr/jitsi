{
  int i, k, lag, start_idx, LSF_interpolation_flag, Winner_ind, subfr;
  int last_smple_idx, smpl_buf_idx, decisionDelay, subfr_length;
  short[] A_Q12;
  short[] B_Q14;
  short[] AR_shp_Q13;
  int A_Q12_offset, B_Q14_offset, AR_shp_Q13_offset;
  short[] pxq;
  int pxq_offset;
  int sLTP_Q16[]=new int[2 * Silk_define.MAX_FRAME_LENGTH];
  short sLTP[]=new short[2 * Silk_define.MAX_FRAME_LENGTH];
  int HarmShapeFIRPacked_Q14;
  int offset_Q10;
  int FiltState[]=new int[Silk_define.MAX_LPC_ORDER], RDmin_Q10;
  int x_sc_Q10[]=new int[Silk_define.MAX_FRAME_LENGTH / Silk_define.NB_SUBFR];
  NSQ_del_dec_struct psDelDec[]=new NSQ_del_dec_struct[Silk_define.DEL_DEC_STATES_MAX];
{
    for (int psDelDecIni_i=0; psDelDecIni_i < Silk_define.DEL_DEC_STATES_MAX; psDelDecIni_i++) {
      psDelDec[psDelDecIni_i]=new NSQ_del_dec_struct();
    }
  }
  NSQ_del_dec_struct psDD;
  subfr_length=psEncC.frame_length / Silk_define.NB_SUBFR;
  lag=NSQ.lagPrev;
  assert(NSQ.prev_inv_gain_Q16 != 0);
  short[] x_tmp=x.clone();
  int x_tmp_offset=0;
  byte[] q_tmp=q.clone();
  int q_tmp_offset=0;
  for (int inx=0; inx < psEncC.nStatesDelayedDecision; inx++) {
    psDelDec[inx].FieldsInit();
  }
  for (k=0; k < psEncC.nStatesDelayedDecision; k++) {
    psDD=psDelDec[k];
    psDD.Seed=(k + psEncCtrlC.Seed) & 3;
    psDD.SeedInit=psDD.Seed;
    psDD.RD_Q10=0;
    psDD.LF_AR_Q12=NSQ.sLF_AR_shp_Q12;
    psDD.Shape_Q10[0]=NSQ.sLTP_shp_Q10[psEncC.frame_length - 1];
    System.arraycopy(NSQ.sLPC_Q14,0,psDD.sLPC_Q14,0,Silk_define.NSQ_LPC_BUF_LENGTH());
  }
  offset_Q10=Silk_tables_other.SKP_Silk_Quantization_Offsets_Q10[psEncCtrlC.sigtype][psEncCtrlC.QuantOffsetType];
  smpl_buf_idx=0;
  decisionDelay=(Silk_define.DECISION_DELAY < subfr_length ? Silk_define.DECISION_DELAY : subfr_length);
  if (psEncCtrlC.sigtype == Silk_define.SIG_TYPE_VOICED) {
    for (k=0; k < Silk_define.NB_SUBFR; k++) {
      decisionDelay=(decisionDelay < (psEncCtrlC.pitchL[k] - Silk_define.LTP_ORDER / 2 - 1) ? decisionDelay : (psEncCtrlC.pitchL[k] - Silk_define.LTP_ORDER / 2 - 1));
    }
  }
  if (LSFInterpFactor_Q2 == (1 << 2)) {
    LSF_interpolation_flag=0;
  }
 else {
    LSF_interpolation_flag=1;
  }
  pxq=NSQ.xq;
  pxq_offset=psEncC.frame_length;
  NSQ.sLTP_shp_buf_idx=psEncC.frame_length;
  NSQ.sLTP_buf_idx=psEncC.frame_length;
  subfr=0;
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    A_Q12=PredCoef_Q12;
    A_Q12_offset=((k >> 1) | (1 - LSF_interpolation_flag)) * Silk_define.MAX_LPC_ORDER;
    B_Q14=LTPCoef_Q14;
    B_Q14_offset=k * Silk_define.LTP_ORDER;
    AR_shp_Q13=AR2_Q13;
    AR_shp_Q13_offset=k * Silk_define.SHAPE_LPC_ORDER_MAX;
    NSQ.rewhite_flag=0;
    if (psEncCtrlC.sigtype == Silk_define.SIG_TYPE_VOICED) {
      lag=psEncCtrlC.pitchL[k];
      if ((k & (3 - (LSF_interpolation_flag << 1))) == 0) {
        if (k == 2) {
          RDmin_Q10=psDelDec[0].RD_Q10;
          Winner_ind=0;
          for (i=1; i < psEncC.nStatesDelayedDecision; i++) {
            if (psDelDec[i].RD_Q10 < RDmin_Q10) {
              RDmin_Q10=psDelDec[i].RD_Q10;
              Winner_ind=i;
            }
          }
          for (i=0; i < psEncC.nStatesDelayedDecision; i++) {
            if (i != Winner_ind) {
              psDelDec[i].RD_Q10+=(Integer.MAX_VALUE >> 4);
              assert(psDelDec[i].RD_Q10 >= 0);
            }
          }
          psDD=psDelDec[Winner_ind];
          last_smple_idx=smpl_buf_idx + decisionDelay;
          for (i=0; i < decisionDelay; i++) {
            last_smple_idx=(last_smple_idx - 1) & Silk_define.DECISION_DELAY_MASK;
            q_tmp[q_tmp_offset + i - decisionDelay]=(byte)(psDD.Q_Q10[last_smple_idx] >> 10);
            pxq[pxq_offset + i - decisionDelay]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(psDD.Xq_Q10[last_smple_idx],psDD.Gain_Q16[last_smple_idx]),10));
            NSQ.sLTP_shp_Q10[NSQ.sLTP_shp_buf_idx - decisionDelay + i]=psDD.Shape_Q10[last_smple_idx];
          }
          subfr=0;
        }
        start_idx=psEncC.frame_length - lag - psEncC.predictLPCOrder- Silk_define.LTP_ORDER / 2;
        start_idx=Silk_SigProc_FIX.SKP_LIMIT_int(start_idx,0,psEncC.frame_length - psEncC.predictLPCOrder);
        Arrays.fill(FiltState,0,psEncC.predictLPCOrder,0);
        Silk_MA.SKP_Silk_MA_Prediction(NSQ.xq,start_idx + k * psEncC.subfr_length,A_Q12,A_Q12_offset,FiltState,sLTP,start_idx,psEncC.frame_length - start_idx,psEncC.predictLPCOrder);
        NSQ.sLTP_buf_idx=psEncC.frame_length;
        NSQ.rewhite_flag=1;
      }
    }
    assert(HarmShapeGain_Q14[k] >= 0);
    HarmShapeFIRPacked_Q14=(HarmShapeGain_Q14[k] >> 2);
    HarmShapeFIRPacked_Q14|=((int)(HarmShapeGain_Q14[k] >> 1) << 16);
    SKP_Silk_nsq_del_dec_scale_states(NSQ,psDelDec,x_tmp,x_tmp_offset,x_sc_Q10,subfr_length,sLTP,sLTP_Q16,k,psEncC.nStatesDelayedDecision,smpl_buf_idx,LTP_scale_Q14,Gains_Q16,psEncCtrlC.pitchL);
    int smpl_buf_idx_ptr[]=new int[1];
    smpl_buf_idx_ptr[0]=smpl_buf_idx;
    SKP_Silk_noise_shape_quantizer_del_dec(NSQ,psDelDec,psEncCtrlC.sigtype,x_sc_Q10,q_tmp,q_tmp_offset,pxq,pxq_offset,sLTP_Q16,A_Q12,A_Q12_offset,B_Q14,B_Q14_offset,AR_shp_Q13,AR_shp_Q13_offset,lag,HarmShapeFIRPacked_Q14,Tilt_Q14[k],LF_shp_Q14[k],Gains_Q16[k],Lambda_Q10,offset_Q10,psEncC.subfr_length,subfr++,psEncC.shapingLPCOrder,psEncC.predictLPCOrder,psEncC.nStatesDelayedDecision,smpl_buf_idx_ptr,decisionDelay);
    smpl_buf_idx=smpl_buf_idx_ptr[0];
    x_tmp_offset+=psEncC.subfr_length;
    q_tmp_offset+=psEncC.subfr_length;
    pxq_offset+=psEncC.subfr_length;
  }
  RDmin_Q10=psDelDec[0].RD_Q10;
  Winner_ind=0;
  for (k=1; k < psEncC.nStatesDelayedDecision; k++) {
    if (psDelDec[k].RD_Q10 < RDmin_Q10) {
      RDmin_Q10=psDelDec[k].RD_Q10;
      Winner_ind=k;
    }
  }
  psDD=psDelDec[Winner_ind];
  psEncCtrlC.Seed=psDD.SeedInit;
  last_smple_idx=smpl_buf_idx + decisionDelay;
  for (i=0; i < decisionDelay; i++) {
    last_smple_idx=(last_smple_idx - 1) & Silk_define.DECISION_DELAY_MASK;
    q_tmp[q_tmp_offset + i - decisionDelay]=(byte)(psDD.Q_Q10[last_smple_idx] >> 10);
    pxq[pxq_offset + i - decisionDelay]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(psDD.Xq_Q10[last_smple_idx],psDD.Gain_Q16[last_smple_idx]),10));
    NSQ.sLTP_shp_Q10[NSQ.sLTP_shp_buf_idx - decisionDelay + i]=psDD.Shape_Q10[last_smple_idx];
    sLTP_Q16[NSQ.sLTP_buf_idx - decisionDelay + i]=psDD.Pred_Q16[last_smple_idx];
  }
  System.arraycopy(psDD.sLPC_Q14,psEncC.subfr_length,NSQ.sLPC_Q14,0,Silk_define.NSQ_LPC_BUF_LENGTH());
  NSQ.sLF_AR_shp_Q12=psDD.LF_AR_Q12;
  NSQ.prev_inv_gain_Q16=NSQ.prev_inv_gain_Q16;
  NSQ.lagPrev=psEncCtrlC.pitchL[Silk_define.NB_SUBFR - 1];
  System.arraycopy(NSQ.xq,psEncC.frame_length,NSQ.xq,0,psEncC.frame_length);
  System.arraycopy(NSQ.sLTP_shp_Q10,psEncC.frame_length,NSQ.sLTP_shp_Q10,0,psEncC.frame_length);
  System.arraycopy(q_tmp,0,q,0,q.length);
}
