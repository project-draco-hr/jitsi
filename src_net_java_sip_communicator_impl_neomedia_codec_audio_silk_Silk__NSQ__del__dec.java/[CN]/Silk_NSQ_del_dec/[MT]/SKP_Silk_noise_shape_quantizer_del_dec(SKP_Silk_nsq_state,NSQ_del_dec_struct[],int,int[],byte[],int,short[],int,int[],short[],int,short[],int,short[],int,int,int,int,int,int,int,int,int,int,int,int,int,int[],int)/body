{
  int i, j, k, Winner_ind, RDmin_ind, RDmax_ind, last_smple_idx;
  int Winner_rand_state;
  int LTP_pred_Q14, LPC_pred_Q10, n_AR_Q10, n_LTP_Q14;
  int n_LF_Q10;
  int r_Q10, rr_Q20, rd1_Q10, rd2_Q10, RDmin_Q10, RDmax_Q10;
  int q1_Q10, q2_Q10;
  int dither;
  int exc_Q10, LPC_exc_Q10, xq_Q10;
  int tmp, sLF_AR_shp_Q10;
  int pred_lag_ptr[], shp_lag_ptr[];
  int pred_lag_ptr_offset, shp_lag_ptr_offset;
  int[] psLPC_Q14;
  int psLPC_Q14_offset;
  NSQ_sample_struct psSampleState[][]=new NSQ_sample_struct[Silk_define.DEL_DEC_STATES_MAX][2];
{
    for (int Ini_i=0; Ini_i < Silk_define.DEL_DEC_STATES_MAX; Ini_i++) {
      for (int Ini_j=0; Ini_j < 2; Ini_j++) {
        psSampleState[Ini_i][Ini_j]=new NSQ_sample_struct();
      }
    }
  }
  NSQ_del_dec_struct psDD;
  NSQ_sample_struct[] psSS;
  shp_lag_ptr=NSQ.sLTP_shp_Q10;
  shp_lag_ptr_offset=NSQ.sLTP_shp_buf_idx - lag + Silk_define.HARM_SHAPE_FIR_TAPS / 2;
  pred_lag_ptr=sLTP_Q16;
  pred_lag_ptr_offset=NSQ.sLTP_buf_idx - lag + Silk_define.LTP_ORDER / 2;
  for (i=0; i < length; i++) {
    if (sigtype == Silk_define.SIG_TYPE_VOICED) {
      LTP_pred_Q14=Silk_macros.SKP_SMULWB(pred_lag_ptr[pred_lag_ptr_offset + 0],b_Q14[b_Q14_offset + 0]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 1],b_Q14[b_Q14_offset + 1]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 2],b_Q14[b_Q14_offset + 2]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 3],b_Q14[b_Q14_offset + 3]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 4],b_Q14[b_Q14_offset + 4]);
      pred_lag_ptr_offset++;
    }
 else {
      LTP_pred_Q14=0;
    }
    if (lag > 0) {
      n_LTP_Q14=Silk_macros.SKP_SMULWB((shp_lag_ptr[shp_lag_ptr_offset + 0] + shp_lag_ptr[shp_lag_ptr_offset - 2]),HarmShapeFIRPacked_Q14);
      n_LTP_Q14=Silk_macros.SKP_SMLAWT(n_LTP_Q14,shp_lag_ptr[shp_lag_ptr_offset - 1],HarmShapeFIRPacked_Q14);
      n_LTP_Q14=(n_LTP_Q14 << 6);
      shp_lag_ptr_offset++;
    }
 else {
      n_LTP_Q14=0;
    }
    for (k=0; k < nStatesDelayedDecision; k++) {
      psDD=psDelDec[k];
      psSS=psSampleState[k];
      psDD.Seed=Silk_SigProc_FIX.SKP_RAND(psDD.Seed);
      dither=(psDD.Seed >> 31);
      psLPC_Q14=psDD.sLPC_Q14;
      psLPC_Q14_offset=Silk_define.NSQ_LPC_BUF_LENGTH() - 1 + i;
      assert(predictLPCOrder >= 10);
      assert((predictLPCOrder & 1) == 0);
      LPC_pred_Q10=Silk_macros.SKP_SMULWB(psLPC_Q14[psLPC_Q14_offset + 0],a_Q12[a_Q12_offset + 0]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 1],a_Q12[a_Q12_offset + 1]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 2],a_Q12[a_Q12_offset + 2]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 3],a_Q12[a_Q12_offset + 3]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 4],a_Q12[a_Q12_offset + 4]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 5],a_Q12[a_Q12_offset + 5]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 6],a_Q12[a_Q12_offset + 6]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 7],a_Q12[a_Q12_offset + 7]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 8],a_Q12[a_Q12_offset + 8]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - 9],a_Q12[a_Q12_offset + 9]);
      for (j=10; j < predictLPCOrder; j++) {
        LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psLPC_Q14[psLPC_Q14_offset - j],a_Q12[a_Q12_offset + j]);
      }
      assert((shapingLPCOrder & 1) == 0);
      assert(shapingLPCOrder >= 12);
      n_AR_Q10=Silk_macros.SKP_SMULWB(psLPC_Q14[psLPC_Q14_offset + 0],AR_shp_Q13[AR_shp_Q13_offset + 0]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 1],AR_shp_Q13[AR_shp_Q13_offset + 1]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 2],AR_shp_Q13[AR_shp_Q13_offset + 2]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 3],AR_shp_Q13[AR_shp_Q13_offset + 3]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 4],AR_shp_Q13[AR_shp_Q13_offset + 4]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 5],AR_shp_Q13[AR_shp_Q13_offset + 5]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 6],AR_shp_Q13[AR_shp_Q13_offset + 6]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 7],AR_shp_Q13[AR_shp_Q13_offset + 7]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 8],AR_shp_Q13[AR_shp_Q13_offset + 8]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 9],AR_shp_Q13[AR_shp_Q13_offset + 9]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 10],AR_shp_Q13[AR_shp_Q13_offset + 10]);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - 11],AR_shp_Q13[AR_shp_Q13_offset + 11]);
      for (j=12; j < shapingLPCOrder; j++) {
        n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psLPC_Q14[psLPC_Q14_offset - j],AR_shp_Q13[AR_shp_Q13_offset + j]);
      }
      n_AR_Q10=(n_AR_Q10 >> 1);
      n_AR_Q10=Silk_macros.SKP_SMLAWB(n_AR_Q10,psDD.LF_AR_Q12,Tilt_Q14);
      n_LF_Q10=(Silk_macros.SKP_SMULWB(psDD.Shape_Q10[smpl_buf_idx[0]],LF_shp_Q14) << 2);
      n_LF_Q10=Silk_macros.SKP_SMLAWT(n_LF_Q10,psDD.LF_AR_Q12,LF_shp_Q14);
      tmp=(LTP_pred_Q14 - n_LTP_Q14);
      tmp=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(tmp,4);
      tmp=(tmp + LPC_pred_Q10);
      tmp=(tmp - n_AR_Q10);
      tmp=(tmp - n_LF_Q10);
      r_Q10=(x_Q10[i] - tmp);
      r_Q10=(r_Q10 ^ dither) - dither;
      r_Q10=(r_Q10 - offset_Q10);
      r_Q10=Silk_SigProc_FIX.SKP_LIMIT_32(r_Q10,-64 << 10,64 << 10);
      if (r_Q10 < -1536) {
        q1_Q10=(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(r_Q10,10) << 10);
        r_Q10=(r_Q10 - q1_Q10);
        rd1_Q10=(Silk_macros.SKP_SMLABB((-(q1_Q10 + offset_Q10) * Lambda_Q10),r_Q10,r_Q10) >> 10);
        rd2_Q10=(rd1_Q10 + 1024);
        rd2_Q10=(rd2_Q10 - Silk_SigProc_FIX.SKP_ADD_LSHIFT32(Lambda_Q10,r_Q10,1));
        q2_Q10=(q1_Q10 + 1024);
      }
 else       if (r_Q10 > 512) {
        q1_Q10=(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(r_Q10,10) << 10);
        r_Q10=(r_Q10 - q1_Q10);
        rd1_Q10=(Silk_macros.SKP_SMLABB(((q1_Q10 + offset_Q10) * Lambda_Q10),r_Q10,r_Q10) >> 10);
        rd2_Q10=(rd1_Q10 + 1024);
        rd2_Q10=(rd2_Q10 - Silk_SigProc_FIX.SKP_SUB_LSHIFT32(Lambda_Q10,r_Q10,1));
        q2_Q10=(q1_Q10 - 1024);
      }
 else {
        rr_Q20=Silk_macros.SKP_SMULBB(offset_Q10,Lambda_Q10);
        rd2_Q10=(Silk_macros.SKP_SMLABB(rr_Q20,r_Q10,r_Q10) >> 10);
        rd1_Q10=(rd2_Q10 + 1024);
        rd1_Q10=(rd1_Q10 + Silk_SigProc_FIX.SKP_SUB_RSHIFT32(Silk_SigProc_FIX.SKP_ADD_LSHIFT32(Lambda_Q10,r_Q10,1),rr_Q20,9));
        q1_Q10=-1024;
        q2_Q10=0;
      }
      if (rd1_Q10 < rd2_Q10) {
        psSS[0].RD_Q10=(psDD.RD_Q10 + rd1_Q10);
        psSS[1].RD_Q10=(psDD.RD_Q10 + rd2_Q10);
        psSS[0].Q_Q10=q1_Q10;
        psSS[1].Q_Q10=q2_Q10;
      }
 else {
        psSS[0].RD_Q10=(psDD.RD_Q10 + rd2_Q10);
        psSS[1].RD_Q10=(psDD.RD_Q10 + rd1_Q10);
        psSS[0].Q_Q10=q2_Q10;
        psSS[1].Q_Q10=q1_Q10;
      }
      exc_Q10=(offset_Q10 + psSS[0].Q_Q10);
      exc_Q10=(exc_Q10 ^ dither) - dither;
      LPC_exc_Q10=exc_Q10 + Silk_SigProc_FIX.SKP_RSHIFT_ROUND(LTP_pred_Q14,4);
      xq_Q10=(LPC_exc_Q10 + LPC_pred_Q10);
      sLF_AR_shp_Q10=(xq_Q10 - n_AR_Q10);
      psSS[0].sLTP_shp_Q10=(sLF_AR_shp_Q10 - n_LF_Q10);
      psSS[0].LF_AR_Q12=(sLF_AR_shp_Q10 << 2);
      psSS[0].xq_Q14=(xq_Q10 << 4);
      psSS[0].LPC_exc_Q16=(LPC_exc_Q10 << 6);
      exc_Q10=(offset_Q10 + psSS[1].Q_Q10);
      exc_Q10=(exc_Q10 ^ dither) - dither;
      LPC_exc_Q10=exc_Q10 + Silk_SigProc_FIX.SKP_RSHIFT_ROUND(LTP_pred_Q14,4);
      xq_Q10=(LPC_exc_Q10 + LPC_pred_Q10);
      sLF_AR_shp_Q10=(xq_Q10 - n_AR_Q10);
      psSS[1].sLTP_shp_Q10=(sLF_AR_shp_Q10 - n_LF_Q10);
      psSS[1].LF_AR_Q12=(sLF_AR_shp_Q10 << 2);
      psSS[1].xq_Q14=(xq_Q10 << 4);
      psSS[1].LPC_exc_Q16=(LPC_exc_Q10 << 6);
    }
    smpl_buf_idx[0]=(smpl_buf_idx[0] - 1) & Silk_define.DECISION_DELAY_MASK;
    last_smple_idx=(smpl_buf_idx[0] + decisionDelay) & Silk_define.DECISION_DELAY_MASK;
    RDmin_Q10=psSampleState[0][0].RD_Q10;
    Winner_ind=0;
    for (k=1; k < nStatesDelayedDecision; k++) {
      if (psSampleState[k][0].RD_Q10 < RDmin_Q10) {
        RDmin_Q10=psSampleState[k][0].RD_Q10;
        Winner_ind=k;
      }
    }
    Winner_rand_state=psDelDec[Winner_ind].RandState[last_smple_idx];
    for (k=0; k < nStatesDelayedDecision; k++) {
      if (psDelDec[k].RandState[last_smple_idx] != Winner_rand_state) {
        psSampleState[k][0].RD_Q10=(psSampleState[k][0].RD_Q10 + (Integer.MAX_VALUE >> 4));
        psSampleState[k][1].RD_Q10=(psSampleState[k][1].RD_Q10 + (Integer.MAX_VALUE >> 4));
        assert(psSampleState[k][0].RD_Q10 >= 0);
      }
    }
    RDmax_Q10=psSampleState[0][0].RD_Q10;
    RDmin_Q10=psSampleState[0][1].RD_Q10;
    RDmax_ind=0;
    RDmin_ind=0;
    for (k=1; k < nStatesDelayedDecision; k++) {
      if (psSampleState[k][0].RD_Q10 > RDmax_Q10) {
        RDmax_Q10=psSampleState[k][0].RD_Q10;
        RDmax_ind=k;
      }
      if (psSampleState[k][1].RD_Q10 < RDmin_Q10) {
        RDmin_Q10=psSampleState[k][1].RD_Q10;
        RDmin_ind=k;
      }
    }
    if (RDmin_Q10 < RDmax_Q10) {
      SKP_Silk_copy_del_dec_state(psDelDec[RDmax_ind],psDelDec[RDmin_ind],i);
      psSampleState[RDmax_ind][0]=(NSQ_sample_struct)psSampleState[RDmin_ind][1].clone();
    }
    psDD=psDelDec[Winner_ind];
    if (subfr > 0 || i >= decisionDelay) {
      q[q_offset + i - decisionDelay]=(byte)(psDD.Q_Q10[last_smple_idx] >> 10);
      xq[xq_offset + i - decisionDelay]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(psDD.Xq_Q10[last_smple_idx],psDD.Gain_Q16[last_smple_idx]),10));
      NSQ.sLTP_shp_Q10[NSQ.sLTP_shp_buf_idx - decisionDelay]=psDD.Shape_Q10[last_smple_idx];
      sLTP_Q16[NSQ.sLTP_buf_idx - decisionDelay]=psDD.Pred_Q16[last_smple_idx];
    }
    NSQ.sLTP_shp_buf_idx++;
    NSQ.sLTP_buf_idx++;
    for (k=0; k < nStatesDelayedDecision; k++) {
      psDD=psDelDec[k];
      psSS=psSampleState[k];
      psDD.LF_AR_Q12=psSS[0].LF_AR_Q12;
      psDD.sLPC_Q14[Silk_define.NSQ_LPC_BUF_LENGTH() + i]=psSS[0].xq_Q14;
      psDD.Xq_Q10[smpl_buf_idx[0]]=(psSS[0].xq_Q14 >> 4);
      psDD.Q_Q10[smpl_buf_idx[0]]=psSS[0].Q_Q10;
      psDD.Pred_Q16[smpl_buf_idx[0]]=psSS[0].LPC_exc_Q16;
      psDD.Shape_Q10[smpl_buf_idx[0]]=psSS[0].sLTP_shp_Q10;
      psDD.Seed=Silk_SigProc_FIX.SKP_ADD_RSHIFT32(psDD.Seed,psSS[0].Q_Q10,10);
      psDD.RandState[smpl_buf_idx[0]]=psDD.Seed;
      psDD.RD_Q10=psSS[0].RD_Q10;
      psDD.Gain_Q16[smpl_buf_idx[0]]=Gain_Q16;
    }
  }
  for (k=0; k < nStatesDelayedDecision; k++) {
    psDD=psDelDec[k];
    System.arraycopy(psDD.sLPC_Q14,length,psDD.sLPC_Q14,0,Silk_define.NSQ_LPC_BUF_LENGTH());
  }
}
