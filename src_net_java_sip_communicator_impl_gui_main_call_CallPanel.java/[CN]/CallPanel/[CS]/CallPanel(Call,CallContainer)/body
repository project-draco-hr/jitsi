{
  super(new BorderLayout());
  this.call=call;
  this.callWindow=callWindow;
  holdButton=new HoldButton(call);
  recordButton=new RecordButton(call);
  videoButton=new LocalVideoButton(call);
  showHideVideoButton=new ShowHideVideoButton(call);
  desktopSharingButton=new DesktopSharingButton(call);
  transferCallButton=new TransferCallButton(call);
  fullScreenButton=new FullScreenButton(this);
  chatButton=new SIPCommButton(ImageLoader.getImage(ImageLoader.CALL_SETTING_BUTTON_BG),ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_WHITE));
  localLevel=new InputVolumeControlButton(call,ImageLoader.MICROPHONE,ImageLoader.MUTE_BUTTON,false,true,false);
  remoteLevel=new OutputVolumeControlButton(ImageLoader.VOLUME_CONTROL_BUTTON,false,true);
  this.callDurationTimer=new Timer(1000,new CallTimerListener());
  this.callDurationTimer.setRepeats(true);
  this.setCallTitle(null);
  this.isLastConference=isConference();
  if (isLastConference) {
    enableConferenceInterface(CallManager.isVideoStreaming(call));
  }
 else {
    CallPeer callPeer=null;
    if (call.getCallPeers().hasNext())     callPeer=call.getCallPeers().next();
    if (callPeer != null)     this.callPanel=new OneToOneCallPanel(this,call,callPeer);
  }
  call.addCallChangeListener(this);
  Iterator<? extends CallPeer> callPeers=call.getCallPeers();
  while (callPeers.hasNext())   callPeers.next().addCallPeerConferenceListener(this);
  init();
  initPluginComponents();
}
