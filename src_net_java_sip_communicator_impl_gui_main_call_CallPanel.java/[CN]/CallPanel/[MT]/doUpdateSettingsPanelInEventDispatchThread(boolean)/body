{
  settingsPanel.setFullScreen(isFullScreen());
  boolean isConference=(callPanel instanceof BasicConferenceCallPanel);
  if (isConference) {
    settingsPanel.add(localLevel);
    settingsPanel.add(remoteLevel);
  }
 else {
    settingsPanel.remove(localLevel);
    settingsPanel.remove(remoteLevel);
  }
  List<Contact> imContacts=getIMCapableCallPeers(1);
  chatButton.setVisible(!isConference && (imContacts.size() == 1));
  if (chatButton.isVisible() && operationSetPresence == null) {
    Contact contact=imContacts.get(0);
    operationSetPresence=contact.getProtocolProvider().getOperationSet(OperationSetPresence.class);
    if (operationSetPresence != null)     operationSetPresence.addContactPresenceStatusListener(this);
    chatButton.setIconImage(Constants.getMessageStatusIcon(contact.getPresenceStatus()));
    chatButton.repaint();
  }
  updateHoldButtonState();
  updateMergeButtonState();
  List<Call> calls=callConference.getCalls();
  boolean advancedTelephony=!calls.isEmpty();
  boolean telephonyConferencing=false;
  boolean videoTelephony=false;
  boolean videoTelephonyIsLocalVideoAllowed=false;
  boolean videoTelephonyIsLocalVideoStreaming=false;
  boolean desktopSharing=false;
  boolean desktopSharingIsStreamed=false;
  boolean allCallsConnected=true;
  for (  Call call : calls) {
    ProtocolProviderService pps=call.getProtocolProvider();
    if (advancedTelephony) {
      OperationSetAdvancedTelephony<?> osat=pps.getOperationSet(OperationSetAdvancedTelephony.class);
      if (osat == null)       advancedTelephony=false;
    }
    if (!telephonyConferencing) {
      OperationSetTelephonyConferencing ostc=pps.getOperationSet(OperationSetTelephonyConferencing.class);
      if (ostc != null)       telephonyConferencing=true;
    }
    if (!videoTelephony || !videoTelephonyIsLocalVideoAllowed || !videoTelephonyIsLocalVideoStreaming) {
      OperationSetVideoTelephony osvt=pps.getOperationSet(OperationSetVideoTelephony.class);
      if (osvt != null) {
        if (!videoTelephony)         videoTelephony=true;
        if (!videoTelephonyIsLocalVideoAllowed && osvt.isLocalVideoAllowed(call))         videoTelephonyIsLocalVideoAllowed=true;
        if (!videoTelephonyIsLocalVideoStreaming && osvt.isLocalVideoStreaming(call))         videoTelephonyIsLocalVideoStreaming=true;
      }
    }
    if (!desktopSharing) {
      OperationSetDesktopStreaming osds=pps.getOperationSet(OperationSetDesktopStreaming.class);
      if (osds != null) {
        desktopSharing=true;
        if (videoTelephonyIsLocalVideoStreaming && call instanceof MediaAwareCall && ((MediaAwareCall<?,?,?>)call).getMediaUseCase() == MediaUseCase.DESKTOP) {
          desktopSharingIsStreamed=true;
        }
      }
    }
    if (CallState.CALL_IN_PROGRESS != call.getCallState()) {
      allCallsConnected=false;
    }
  }
  if (conferenceButton != null)   conferenceButton.setEnabled(telephonyConferencing);
  if (transferCallButton != null) {
    transferCallButton.setEnabled(advancedTelephony);
    transferCallButton.setVisible(!callConference.isConferenceFocus());
  }
  if (videoButton != null) {
    videoButton.setEnabled(allCallsConnected && videoTelephony);
    videoButton.setSelected(videoTelephonyIsLocalVideoAllowed);
    if (showHideVideoButton != null) {
      showHideVideoButton.setEnabled(videoButton.isEnabled() && videoTelephonyIsLocalVideoAllowed);
      showHideVideoButton.setSelected(showHideVideoButton.isEnabled() && uiVideoHandler.isLocalVideoVisible());
      showHideVideoButton.setVisible(showHideVideoButton.isEnabled());
    }
  }
  if (desktopSharingButton != null) {
    desktopSharingButton.setEnabled(desktopSharing);
    desktopSharingButton.setSelected(desktopSharingIsStreamed);
  }
  if (callPanel instanceof OneToOneCallPanel) {
    OneToOneCallPanel oneToOneCallPanel=(OneToOneCallPanel)callPanel;
    if (desktopSharingIsStreamed)     oneToOneCallPanel.addDesktopSharingComponents();
 else     oneToOneCallPanel.removeDesktopSharingComponents();
  }
}
