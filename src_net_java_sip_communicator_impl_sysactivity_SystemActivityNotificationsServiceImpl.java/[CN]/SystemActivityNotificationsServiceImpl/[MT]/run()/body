{
  while (running) {
    try {
      long idleTime=0;
      if (idleChangeListeners.size() > 0) {
        idleTime=SystemActivityNotifications.getLastInput();
        if (idleTime < idleStateCheckDelay && listenersInIdleState.size() > 0) {
          for (          SystemActivityChangeListener l : listenersInIdleState) {
            fireSystemIdleEndEvent(l);
          }
          listenersInIdleState.clear();
        }
        for (        Map.Entry<SystemActivityChangeListener,Long> entry : idleChangeListeners.entrySet()) {
          SystemActivityChangeListener listener=entry.getKey();
          if (listenersInIdleState.contains(listener))           continue;
          if (entry.getValue() <= idleTime) {
            fireSystemIdleEvent(listener);
            listenersInIdleState.add(listener);
          }
        }
      }
      if (listenersInIdleState.size() > 0) {
        idleStateCheckDelay=CHECK_FOR_IDLE_WHEN_IDLE;
      }
 else       if (idleTime != 0) {
        long minIdleSetting=CHECK_FOR_IDLE_DEFAULT;
        if (!idleChangeListeners.isEmpty())         minIdleSetting=Collections.min(idleChangeListeners.values());
        int newSetting=(int)(minIdleSetting - idleTime) + 1000;
        if (newSetting > 0)         idleStateCheckDelay=newSetting;
 else         idleStateCheckDelay=CHECK_FOR_IDLE_DEFAULT;
      }
 else {
        idleStateCheckDelay=CHECK_FOR_IDLE_DEFAULT;
      }
synchronized (this) {
        this.wait(idleStateCheckDelay);
      }
    }
 catch (    UnsatisfiedLinkError t) {
      logger.error("Missing native impl",t);
      return;
    }
catch (    Throwable t) {
      logger.error("Error checking for idle",t);
    }
  }
}
