{
  int ret=0;
  if (inputBuffer.getFormat() instanceof AVFrameFormat) {
    if (!configured) {
      AVFrameFormat format=(AVFrameFormat)inputBuffer.getFormat();
      if (FFmpeg.avfilter_configure_filters("hflip",inputstream,format.getPixFmt(),graph) != 0) {
        if (logger.isDebugEnabled()) {
          logger.debug("Failed to configure libavfilter's filters");
        }
        return BUFFER_PROCESSED_FAILED;
      }
      configured=true;
    }
    AVFrame frame=(AVFrame)inputBuffer.getData();
    FFmpeg.av_vsrc_buffer_add_frame(inputstream,frame.getPtr());
    if (FFmpeg.av_get_filtered_video_frame(inputstream,avframe) != -1) {
      Object out=outputBuffer.getData();
      if (!(out instanceof AVFrame) || (((AVFrame)out).getPtr() != avframe)) {
        outputBuffer.setData(new AVFrame(avframe));
      }
    }
  }
  if (ret == BUFFER_PROCESSED_OK) {
    outputBuffer.setLength(inputBuffer.getLength());
    outputBuffer.setFormat(inputBuffer.getFormat());
    outputBuffer.setHeader(inputBuffer.getHeader());
    outputBuffer.setSequenceNumber(inputBuffer.getSequenceNumber());
    outputBuffer.setTimeStamp(inputBuffer.getTimeStamp());
    outputBuffer.setFlags(inputBuffer.getFlags());
    outputBuffer.setDiscard(inputBuffer.isDiscard());
    outputBuffer.setEOM(inputBuffer.isEOM());
    outputBuffer.setDuration(inputBuffer.getDuration());
  }
  return ret;
}
