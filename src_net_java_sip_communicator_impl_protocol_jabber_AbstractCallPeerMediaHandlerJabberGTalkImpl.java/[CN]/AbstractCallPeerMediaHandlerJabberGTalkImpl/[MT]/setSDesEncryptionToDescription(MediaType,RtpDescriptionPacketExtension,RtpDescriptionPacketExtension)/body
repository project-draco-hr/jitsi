{
  AccountID accountID=getPeer().getProtocolProvider().getAccountID();
  if (accountID.getAccountPropertyBoolean(ProtocolProviderFactory.SDES_ENABLED,false) && accountID.getAccountPropertyBoolean(ProtocolProviderFactory.DEFAULT_ENCRYPTION,true)) {
    Map<MediaTypeSrtpControl,SrtpControl> srtpControls=getSrtpControls();
    MediaTypeSrtpControl key=new MediaTypeSrtpControl(mediaType,SrtpControlType.SDES);
    SrtpControl control=srtpControls.get(key);
    if (control == null) {
      control=JabberActivator.getMediaService().createSDesControl();
      srtpControls.put(key,control);
    }
    SDesControl sdcontrol=(SDesControl)control;
    String ciphers=accountID.getAccountPropertyString(ProtocolProviderFactory.SDES_CIPHER_SUITES);
    if (ciphers == null) {
      ciphers=JabberActivator.getResources().getSettingsString(SDesControl.SDES_CIPHER_SUITES);
    }
    sdcontrol.setEnabledCiphers(Arrays.asList(ciphers.split(",")));
    if (remoteDescription == null) {
      EncryptionPacketExtension localEncryption=localDescription.getFirstChildOfType(EncryptionPacketExtension.class);
      if (localEncryption == null) {
        localEncryption=new EncryptionPacketExtension();
        localDescription.addChildExtension(localEncryption);
      }
      for (      SrtpCryptoAttribute ca : sdcontrol.getInitiatorCryptoAttributes()) {
        CryptoPacketExtension crypto=new CryptoPacketExtension(ca);
        localEncryption.addChildExtension(crypto);
      }
      return true;
    }
 else {
      EncryptionPacketExtension remoteEncryption=remoteDescription.getFirstChildOfType(EncryptionPacketExtension.class);
      if (remoteEncryption != null) {
        SrtpCryptoAttribute selectedSdes=selectSdesCryptoSuite(false,sdcontrol,remoteEncryption);
        if (selectedSdes != null) {
          EncryptionPacketExtension localEncryption=localDescription.getFirstChildOfType(EncryptionPacketExtension.class);
          if (localEncryption == null) {
            localEncryption=new EncryptionPacketExtension();
            localDescription.addChildExtension(localEncryption);
          }
          CryptoPacketExtension crypto=new CryptoPacketExtension(selectedSdes);
          localEncryption.addChildExtension(crypto);
          return true;
        }
 else {
          sdcontrol.cleanup();
          srtpControls.remove(key);
          logger.warn("Received unsupported sdes crypto attribute");
        }
      }
 else {
        sdcontrol.cleanup();
        srtpControls.remove(key);
      }
    }
  }
  return false;
}
