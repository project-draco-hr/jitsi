{
  if (!checkInputBuffer(inputBuffer)) {
    return BUFFER_PROCESSED_FAILED;
  }
  if (isEOM(inputBuffer) || !opened) {
    propagateEOM(outputBuffer);
    return BUFFER_PROCESSED_OK;
  }
  if (inputBuffer.isDiscard()) {
    inputBuffer.setDiscard(true);
    reset();
    return BUFFER_PROCESSED_OK;
  }
  if (lastReceivedSeq != -1 && inputBuffer.getSequenceNumber() - lastReceivedSeq > 1) {
    lastReceivedSeq=inputBuffer.getSequenceNumber();
    logger.trace("DROP rtp data!");
    parser.reset();
    inputBuffer.setDiscard(true);
    outputBuffer.setDiscard(true);
    reset();
    return BUFFER_PROCESSED_OK;
  }
 else   if (!parser.pushRTPInput(inputBuffer)) {
    lastReceivedSeq=inputBuffer.getSequenceNumber();
    return OUTPUT_BUFFER_NOT_FILLED;
  }
  lastReceivedSeq=inputBuffer.getSequenceNumber();
  IntByReference got_picture=new IntByReference();
  Pointer encBuf=AVUTIL.av_malloc(parser.getEncodedFrameLen());
  arraycopy(parser.getEncodedFrame(),0,encBuf,0,parser.getEncodedFrameLen());
synchronized (AVCODEC) {
    AVCODEC.avcodec_decode_video(avcontext,avpicture,got_picture,encBuf,parser.getEncodedFrameLen());
    if (currentVideoWidth != avcontext.width) {
      currentVideoWidth=avcontext.width;
      VideoFormat format=getVideoFormat(currentVideoWidth);
      if (format != null) {
        outputBuffer.setFormat(format);
        outputFormat=format;
      }
    }
    if (got_picture.getValue() == 0) {
      outputBuffer.setDiscard(true);
      AVUTIL.av_free(encBuf);
      return BUFFER_PROCESSED_OK;
    }
    int numBytes=AVCODEC.avpicture_get_size(AVCodecLibrary.PIX_FMT_RGB32,avcontext.width,avcontext.height);
    Pointer buffer=AVUTIL.av_malloc(numBytes);
    AVCODEC.avpicture_fill(frameRGB,buffer,AVCodecLibrary.PIX_FMT_RGB32,avcontext.width,avcontext.height);
    AVCODEC.img_convert(frameRGB,AVCodecLibrary.PIX_FMT_RGB32,avpicture,avcontext.pix_fmt,avcontext.width,avcontext.height);
    int[] data=frameRGB.data0.getIntArray(0,numBytes / 4);
    int[] outData;
    Object outDataO=outputBuffer.getData();
    if (outDataO instanceof int[] && ((int[])outDataO).length >= data.length) {
      outData=(int[])outDataO;
    }
 else {
      outData=new int[data.length];
    }
    System.arraycopy(data,0,outData,0,data.length);
    outputBuffer.setOffset(0);
    outputBuffer.setLength(data.length);
    outputBuffer.setData(outData);
    AVUTIL.av_free(encBuf);
    AVUTIL.av_free(buffer);
    return BUFFER_PROCESSED_OK;
  }
}
