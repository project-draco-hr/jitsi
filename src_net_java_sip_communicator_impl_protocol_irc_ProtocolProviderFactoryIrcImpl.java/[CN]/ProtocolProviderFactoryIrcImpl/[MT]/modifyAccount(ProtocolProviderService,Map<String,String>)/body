{
  if (protocolProvider == null) {
    throw new NullPointerException("The specified Protocol Provider was null");
  }
  if (!(protocolProvider instanceof ProtocolProviderServiceIrcImpl)) {
    throw new IllegalArgumentException("expected IRC instance of ProtocolProviderService");
  }
  if (accountProperties == null) {
    throw new NullPointerException("The specified property map was null");
  }
  BundleContext context=IrcActivator.getBundleContext();
  ProtocolProviderServiceIrcImpl ircProvider=(ProtocolProviderServiceIrcImpl)protocolProvider;
  if (context == null) {
    throw new NullPointerException("The specified BundleContext was null");
  }
  IrcAccountID accountID=(IrcAccountID)ircProvider.getAccountID();
  if (!registeredAccounts.containsKey(accountID)) {
    return;
  }
  ServiceRegistration<ProtocolProviderService> registration=registeredAccounts.get(accountID);
  if (registration != null) {
    registration.unregister();
  }
  accountProperties.put(USER_ID,accountID.getUserID());
  if (!accountProperties.containsKey(PROTOCOL)) {
    accountProperties.put(PROTOCOL,ProtocolNames.IRC);
  }
  accountID.setAccountProperties(accountProperties);
  this.storeAccount(accountID);
  Hashtable<String,String> properties=new Hashtable<String,String>();
  properties.put(PROTOCOL,ProtocolNames.IRC);
  properties.put(USER_ID,accountID.getUserID());
  ircProvider.initialize(accountID.getUserID(),accountID);
  this.storeAccount(accountID);
  registration=context.registerService(ProtocolProviderService.class,protocolProvider,properties);
  registeredAccounts.put(accountID,registration);
}
