{
  byte[] address=null;
  if ((address=strToIPv4(domain)) != null || (address=strToIPv6(domain)) != null) {
    try {
      return new InetSocketAddress[]{new InetSocketAddress(InetAddress.getByAddress(domain,address),port)};
    }
 catch (    UnknownHostException e) {
      logger.error("Unable to create InetAddress for <" + domain + ">",e);
      return null;
    }
  }
  List<InetSocketAddress> addresses=new LinkedList<InetSocketAddress>();
  boolean v6lookup=Boolean.getBoolean("java.net.preferIPv6Addresses");
  for (int i=0; i < 2; i++) {
    Lookup lookup;
    try {
      lookup=createLookup(domain,v6lookup ? Type.AAAA : Type.A);
    }
 catch (    TextParseException tpe) {
      logger.error("Failed to parse domain <" + domain + ">",tpe);
      throw new ParseException(tpe.getMessage(),0);
    }
    Record[] records=null;
    try {
      records=lookup.run();
    }
 catch (    DnssecRuntimeException e) {
      throw new DnssecException(e);
    }
    if (records != null) {
      for (      Record r : records) {
        try {
          addresses.add(new InetSocketAddress(InetAddress.getByAddress(domain,v6lookup ? ((AAAARecord)r).getAddress().getAddress() : ((ARecord)r).getAddress().getAddress()),port));
        }
 catch (        UnknownHostException e) {
          logger.error("Invalid record returned from DNS",e);
        }
      }
    }
    v6lookup=!v6lookup;
  }
  if (logger.isTraceEnabled())   logger.trace("A or AAAA addresses: " + addresses);
  return addresses.toArray(new InetSocketAddress[0]);
}
