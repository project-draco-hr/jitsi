{
  if (netListenerAdded.compareAndSet(false,true)) {
    if (logger.isDebugEnabled())     logger.debug("NetConfigChange listener added: " + netListener.hashCode());
    UtilActivator.getNetworkAddressManagerService().addNetworkConfigurationChangeListener(netListener);
  }
  Lookup lookup=new Lookup(domain,type);
  if (logger.isDebugEnabled()) {
    StringBuilder sb=new StringBuilder();
    sb.append("Active DNS servers in default resolver: ");
    for (    String s : ResolverConfig.getCurrentConfig().servers()) {
      sb.append(s);
      sb.append(", ");
    }
    logger.debug(sb.toString());
  }
  if (!UtilActivator.getConfigurationService().getBoolean(PNAME_BACKUP_RESOLVER_ENABLED,PDEFAULT_BACKUP_RESOLVER_ENABLED))   return lookup;
synchronized (parallelResolverLock) {
    if (parallelResolver == null) {
      try {
        String rslvrAddrStr=UtilActivator.getConfigurationService().getString(PNAME_BACKUP_RESOLVER,DEFAULT_BACKUP_RESOLVER);
        String customRslvrIP=UtilActivator.getConfigurationService().getString(PNAME_BACKUP_RESOLVER_FALLBACK_IP,UtilActivator.getResources().getSettingsString(PNAME_BACKUP_RESOLVER_FALLBACK_IP));
        InetAddress resolverAddress=null;
        try {
          resolverAddress=getInetAddress(rslvrAddrStr);
        }
 catch (        UnknownHostException exc) {
          logger.warn("Oh! Seems like our primary DNS is down!" + "Don't panic! We'll try to fall back to " + customRslvrIP);
        }
        if (resolverAddress == null) {
          resolverAddress=getInetAddress(customRslvrIP);
        }
        int rslvrPort=UtilActivator.getConfigurationService().getInt(PNAME_BACKUP_RESOLVER_PORT,SimpleResolver.DEFAULT_PORT);
        InetSocketAddress resolverSockAddr=new InetSocketAddress(resolverAddress,rslvrPort);
        parallelResolver=new ParallelResolver(new InetSocketAddress[]{resolverSockAddr});
        UtilActivator.getConfigurationService().addPropertyChangeListener(new DnsConfigurationChangeListener());
      }
 catch (      Throwable t) {
        logger.info("failed to initialize parallel resolver. we will " + "be using dnsjava's default one instead");
        if (logger.isDebugEnabled())         logger.debug("exception was: ",t);
        parallelResolver=Lookup.getDefaultResolver();
      }
    }
    lookup.setResolver(parallelResolver);
  }
  return lookup;
}
