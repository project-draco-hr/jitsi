{
  Record[] records=null;
  try {
    Lookup lookup=createLookup(domain,Type.NAPTR);
    records=lookup.run();
  }
 catch (  TextParseException tpe) {
    logger.error("Failed to parse domain=" + domain,tpe);
    throw new ParseException(tpe.getMessage(),0);
  }
  if (records == null) {
    if (logger.isTraceEnabled())     logger.trace("No NAPTRs found for " + domain);
    return null;
  }
  String[][] recVals=new String[records.length][3];
  for (int i=0; i < records.length; i++) {
    NAPTRRecord r=(NAPTRRecord)records[i];
    recVals[i][0]="" + r.getOrder();
    recVals[i][1]=getProtocolFromNAPTRRecords(r.getService());
    String replacement=r.getReplacement().toString();
    if (replacement.endsWith(".")) {
      recVals[i][2]=replacement.substring(0,replacement.length() - 1);
    }
 else     recVals[i][2]=replacement;
  }
  Arrays.sort(recVals,new Comparator<String[]>(){
    public int compare(    String array1[],    String array2[]){
      return (Integer.parseInt(array1[0]) - Integer.parseInt(array2[0]));
    }
  }
);
  if (logger.isTraceEnabled())   logger.trace("NAPTRs for " + domain + "="+ Arrays.toString(recVals));
  return recVals;
}
