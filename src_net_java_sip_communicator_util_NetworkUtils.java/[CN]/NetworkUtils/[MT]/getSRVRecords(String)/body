{
  Record[] records=null;
  try {
    Lookup lookup=createLookup(domain,Type.SRV);
    records=lookup.run();
  }
 catch (  TextParseException tpe) {
    logger.error("Failed to parse domain=" + domain,tpe);
    throw new ParseException(tpe.getMessage(),0);
  }
  if (records == null) {
    return null;
  }
  String[][] pvhn=new String[records.length][4];
  for (int i=0; i < records.length; i++) {
    SRVRecord srvRecord=(SRVRecord)records[i];
    pvhn[i][0]="" + srvRecord.getPriority();
    pvhn[i][1]="" + srvRecord.getWeight();
    pvhn[i][2]="" + srvRecord.getPort();
    pvhn[i][3]=srvRecord.getTarget().toString();
    if (pvhn[i][3].endsWith(".")) {
      pvhn[i][3]=pvhn[i][3].substring(0,pvhn[i][3].length() - 1);
    }
  }
  Arrays.sort(pvhn,new Comparator<String[]>(){
    public int compare(    String array1[],    String array2[]){
      return (Integer.parseInt(array1[0]) - Integer.parseInt(array2[0]));
    }
  }
);
  ArrayList<InetSocketAddress> sortedHostNames=new ArrayList<InetSocketAddress>();
  for (int i=0; i < pvhn.length; i++) {
    try {
      sortedHostNames.add(new InetSocketAddress(Address.getByName(pvhn[i][3]),Integer.valueOf(pvhn[i][2])));
    }
 catch (    UnknownHostException e) {
      logger.warn("Unknown host: " + pvhn[i][3],e);
    }
  }
  if (logger.isTraceEnabled()) {
    logger.trace("DNS SRV query for domain " + domain + " returned:");
    for (int i=0; i < sortedHostNames.size(); i++) {
      if (logger.isTraceEnabled())       logger.trace(sortedHostNames.get(i));
    }
  }
  return sortedHostNames.toArray(new InetSocketAddress[0]);
}
