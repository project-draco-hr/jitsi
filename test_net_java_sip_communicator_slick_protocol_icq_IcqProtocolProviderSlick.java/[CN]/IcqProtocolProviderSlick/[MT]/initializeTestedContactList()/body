{
  String contactList=System.getProperty(CONTACT_LIST_PROPERTY_NAME,null);
  logger.debug("The " + CONTACT_LIST_PROPERTY_NAME + " property is set to="+ contactList);
  if (contactList == null || contactList.trim().length() < 6)   throw new IllegalArgumentException("The " + CONTACT_LIST_PROPERTY_NAME + " property did not contain a contact list.");
  StringTokenizer tokenizer=new StringTokenizer(contactList," \n\t");
  logger.debug("tokens contained by the CL tokenized=" + tokenizer.countTokens());
  Hashtable<String,List<String>> contactListToCreate=new Hashtable<String,List<String>>();
  while (tokenizer.hasMoreTokens()) {
    String groupUinToken=tokenizer.nextToken();
    int dotIndex=groupUinToken.indexOf(".");
    if (dotIndex == -1) {
      throw new IllegalArgumentException(groupUinToken + " is not a valid Group.UIN token");
    }
    String groupName=groupUinToken.substring(0,dotIndex);
    String uin=groupUinToken.substring(dotIndex + 1);
    if (groupName.trim().length() < 1 || uin.trim().length() < 4) {
      throw new IllegalArgumentException(groupName + " or " + uin+ " are not a valid group name or ICQ UIN.");
    }
    List<String> uinInThisGroup=contactListToCreate.get(groupName);
    if (uinInThisGroup == null) {
      uinInThisGroup=new ArrayList<String>();
      contactListToCreate.put(groupName,uinInThisGroup);
    }
    uinInThisGroup.add(uin);
  }
  if (IcqSlickFixture.onlineTestingDisabled)   return;
  IcqTesterAgent cListInitTesterAgent=new IcqTesterAgent(System.getProperty(TESTED_IMPL_USER_ID_PROP_NAME,null));
  cListInitTesterAgent.register(System.getProperty(TESTED_IMPL_PWD_PROP_NAME,null));
  cListInitTesterAgent.setAuthorizationRequired();
  cListInitTesterAgent.initializeBuddyList(contactListToCreate);
  cListInitTesterAgent.unregister();
  IcqSlickFixture.preInstalledBuddyList=contactListToCreate;
}
