{
  Request invite=messageFactory.createInviteRequest(calleeAddress,cause);
  String forceTransport=null;
  javax.sip.address.URI calleeURI=calleeAddress.getURI();
  if (calleeURI.getScheme().toLowerCase().equals("sips")) {
    forceTransport="TLS";
    logger.trace("detected SIPS URI, must use TLS");
  }
 else   if (calleeURI.isSipURI() && calleeURI instanceof SipURI) {
    SipURI _calleeURI=(SipURI)calleeURI;
    forceTransport=_calleeURI.getTransportParam();
    if (forceTransport != null) {
      logger.trace("got transport parameter: " + forceTransport);
    }
  }
  ClientTransaction inviteTransaction=null;
  SipProvider jainSipProvider;
  if (forceTransport != null) {
    logger.trace("trying to use transport: " + forceTransport);
    jainSipProvider=getProtocolProvider().getJainSipProvider(forceTransport);
  }
 else {
    logger.trace("trying default transport");
    jainSipProvider=getProtocolProvider().getDefaultJainSipProvider();
  }
  try {
    inviteTransaction=jainSipProvider.getNewClientTransaction(invite);
  }
 catch (  TransactionUnavailableException ex) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to create inviteTransaction.\n" + "This is most probably a network connection error.",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  CallPeerSipImpl callPeer=createCallPeerFor(inviteTransaction,jainSipProvider);
  CallPeerMediaHandlerSipImpl mediaHandler=callPeer.getMediaHandler();
  mediaHandler.setLocalVideoTransmissionEnabled(localVideoAllowed);
  if (initialQualityPreferences != null) {
    mediaHandler.setSupportQualityControls(true);
    mediaHandler.getQualityControl().setRemoteSendMaxPreset(initialQualityPreferences);
  }
  try {
    callPeer.invite();
  }
 catch (  OperationFailedException ex) {
    callPeer.setState(CallPeerState.FAILED);
    throw ex;
  }
  return callPeer;
}
