{
  CallPeerSipImpl callPeer=new CallPeerSipImpl(containingTransaction.getDialog().getRemoteParty(),this,containingTransaction,sourceProvider){
    /** 
 * A place where we can handle any headers we need for requests
 * and responses.
 * @param message the SIP <tt>Message</tt> in which a header change
 * is to be reflected
 * @throws ParseException if modifying the specified SIP
 * <tt>Message</tt> to reflect the header change fails
 */
    protected void processExtraHeaders(    javax.sip.message.Message message) throws ParseException {
      super.processExtraHeaders(message);
      CallSipImpl.this.processExtraHeaders(message);
    }
  }
;
  addCallPeer(callPeer);
  boolean incomingCall=(containingTransaction instanceof ServerTransaction);
  callPeer.setState(incomingCall ? CallPeerState.INCOMING_CALL : CallPeerState.INITIATING_CALL);
  if (getCallPeerCount() == 1) {
    Map<MediaType,MediaDirection> mediaDirections=new HashMap<MediaType,MediaDirection>();
    mediaDirections.put(MediaType.AUDIO,MediaDirection.INACTIVE);
    mediaDirections.put(MediaType.VIDEO,MediaDirection.INACTIVE);
    boolean hasZrtp=false;
    boolean hasSdes=false;
    try {
      Request inviteReq=containingTransaction.getRequest();
      if (inviteReq != null && inviteReq.getRawContent() != null) {
        String sdpStr=SdpUtils.getContentAsString(inviteReq);
        SessionDescription sesDescr=SdpUtils.parseSdpString(sdpStr);
        List<MediaDescription> remoteDescriptions=SdpUtils.extractMediaDescriptions(sesDescr);
        for (        MediaDescription mediaDescription : remoteDescriptions) {
          MediaType mediaType=SdpUtils.getMediaType(mediaDescription);
          mediaDirections.put(mediaType,SdpUtils.getDirection(mediaDescription));
          if (!hasZrtp) {
            hasZrtp=(mediaDescription.getAttribute(SdpUtils.ZRTP_HASH_ATTR) != null);
          }
          if (!hasSdes) {
            @SuppressWarnings("unchecked") Vector<Attribute> attrs=mediaDescription.getAttributes(true);
            for (            Attribute attr : attrs) {
              try {
                if ("crypto".equals(attr.getName())) {
                  hasSdes=true;
                  break;
                }
              }
 catch (              SdpParseException spe) {
                logger.error("Failed to parse SDP attribute",spe);
              }
            }
          }
        }
      }
    }
 catch (    Throwable t) {
      logger.warn("Error getting media types",t);
    }
    fireCallEvent(incomingCall ? CallEvent.CALL_RECEIVED : CallEvent.CALL_INITIATED,this,mediaDirections);
    if (hasZrtp) {
      callPeer.getMediaHandler().addAdvertisedEncryptionMethod(SrtpControlType.ZRTP);
    }
    if (hasSdes) {
      callPeer.getMediaHandler().addAdvertisedEncryptionMethod(SrtpControlType.SDES);
    }
  }
  return callPeer;
}
