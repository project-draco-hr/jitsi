{
  Request invite=serverTran.getRequest();
  final CallPeerSipImpl peer=createCallPeerFor(serverTran,jainSipProvider);
  CallInfoHeader infoHeader=(CallInfoHeader)invite.getHeader(CallInfoHeader.NAME);
  String alternativeIMPPAddress=null;
  if (infoHeader != null && infoHeader.getParameter("purpose") != null && infoHeader.getParameter("purpose").equals("impp")) {
    alternativeIMPPAddress=infoHeader.getInfo().toString();
  }
  if (alternativeIMPPAddress != null)   peer.setAlternativeIMPPAddress(alternativeIMPPAddress);
  Response response=null;
  try {
    if (logger.isTraceEnabled())     logger.trace("will send ringing response: ");
    response=messageFactory.createResponse(Response.RINGING,invite);
    serverTran.sendResponse(response);
    if (serverTran instanceof SIPTransaction && !((SIPTransaction)serverTran).isReliable()) {
      final Timer timer=new Timer();
      CallPeerAdapter stateListener=new CallPeerAdapter(){
        @Override public void peerStateChanged(        CallPeerChangeEvent evt){
          if (!evt.getNewValue().equals(CallPeerState.INCOMING_CALL)) {
            timer.cancel();
            peer.removeCallPeerListener(this);
          }
        }
      }
;
      int interval=retransmitsRingingInterval;
      int delay=0;
      for (int i=0; i < MAX_RETRANSMISSIONS; i++) {
        delay+=interval;
        timer.schedule(new RingingResponseTask(response,serverTran,peer,timer,stateListener),delay);
        interval*=2;
      }
      peer.addCallPeerListener(stateListener);
    }
    if (logger.isDebugEnabled())     logger.debug("sent a ringing response: " + response);
  }
 catch (  Exception ex) {
    logger.error("Error while trying to send a request",ex);
    peer.setState(CallPeerState.FAILED,"Internal Error: " + ex.getMessage());
    return peer;
  }
  return peer;
}
