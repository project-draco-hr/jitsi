{
  AbstractButton button=(AbstractButton)e.getSource();
  String buttonText=button.getName();
  ChatPanel chatPanel=chatContainer.getCurrentChat();
  if (buttonText.equals("previous")) {
    chatPanel.loadPreviousPageFromHistory();
  }
 else   if (buttonText.equals("next")) {
    chatPanel.loadNextPageFromHistory();
  }
 else   if (buttonText.equals("sendFile")) {
    SipCommFileChooser scfc=GenericFileDialog.create(null,"Send file...",SipCommFileChooser.LOAD_FILE_OPERATION,ConfigurationManager.getSendFileLastDir());
    File selectedFile=scfc.getFileFromDialog();
    if (selectedFile != null) {
      ConfigurationManager.setSendFileLastDir(selectedFile.getParent());
      chatContainer.getCurrentChat().sendFile(selectedFile);
    }
  }
 else   if (buttonText.equals("history")) {
    HistoryWindow history;
    HistoryWindowManager historyWindowManager=GuiActivator.getUIService().getHistoryWindowManager();
    ChatSession chatSession=chatPanel.getChatSession();
    if (historyWindowManager.containsHistoryWindowForContact(chatSession.getDescriptor())) {
      history=historyWindowManager.getHistoryWindowForContact(chatSession.getDescriptor());
      if (history.getState() == JFrame.ICONIFIED)       history.setState(JFrame.NORMAL);
      history.toFront();
    }
 else {
      history=new HistoryWindow(chatPanel.getChatSession().getDescriptor());
      history.setVisible(true);
      historyWindowManager.addHistoryWindowForContact(chatSession.getDescriptor(),history);
    }
  }
 else   if (buttonText.equals("invite")) {
    ChatInviteDialog inviteDialog=new ChatInviteDialog(chatPanel);
    inviteDialog.setVisible(true);
  }
 else   if (buttonText.equals("leave")) {
    ConferenceChatManager conferenceManager=GuiActivator.getUIService().getConferenceChatManager();
    conferenceManager.leaveChatRoom((ChatRoomWrapper)chatPanel.getChatSession().getDescriptor());
  }
 else   if (buttonText.equals("call")) {
    ChatSession chatSession=chatPanel.getChatSession();
    List<ChatTransport> telTransports=null;
    if (chatSession != null)     telTransports=chatSession.getTransportsForOperationSet(OperationSetBasicTelephony.class);
    List<ChatTransport> contactOpSetSupported=getOperationSetForCapabilities(telTransports,OperationSetBasicTelephony.class);
    MetaContact metaContact=GuiActivator.getUIService().getChatContact(chatPanel);
    List<UIContactDetail> phones=CallManager.getAdditionalNumbers(metaContact);
    if (telTransports != null || phones.size() > 0) {
      if (contactOpSetSupported.size() == 1 && phones.size() == 0) {
        ChatTransport transport=contactOpSetSupported.get(0);
        CallManager.createCall(transport.getProtocolProvider(),transport.getName());
      }
 else       if (contactOpSetSupported.size() == 0 && phones.size() == 1) {
        UIContactDetail detail=phones.get(0);
        ProtocolProviderService preferredProvider=detail.getPreferredProtocolProvider(OperationSetBasicTelephony.class);
        List<ProtocolProviderService> providers=GuiActivator.getOpSetRegisteredProviders(OperationSetBasicTelephony.class,preferredProvider,detail.getPreferredProtocol(OperationSetBasicTelephony.class));
        if (providers != null) {
          int providersCount=providers.size();
          if (providersCount <= 0) {
            new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.CALL_FAILED"),GuiActivator.getResources().getI18NString("service.gui.NO_ONLINE_TELEPHONY_ACCOUNT")).showDialog();
          }
 else           if (providersCount == 1) {
            CallManager.createCall(providers.get(0),detail.getAddress());
          }
 else           if (providersCount > 1) {
            ChooseCallAccountPopupMenu chooseAccountDialog=new ChooseCallAccountPopupMenu(callButton,detail.getAddress(),providers);
            Point location=new Point(callButton.getX(),callButton.getY() + callButton.getHeight());
            SwingUtilities.convertPointToScreen(location,this);
            chooseAccountDialog.showPopupMenu(location.x,location.y);
          }
        }
      }
 else       if ((contactOpSetSupported.size() + phones.size()) > 1) {
        List<Object> allContacts=new ArrayList<Object>();
        for (        ChatTransport t : contactOpSetSupported) {
          allContacts.add(t);
        }
        for (        UIContactDetail t : phones) {
          allContacts.add(t);
        }
        ChooseCallAccountPopupMenu chooseAccountDialog=new ChooseCallAccountPopupMenu(callButton,allContacts);
        Point location=new Point(callButton.getX(),callButton.getY() + callButton.getHeight());
        SwingUtilities.convertPointToScreen(location,this);
        chooseAccountDialog.showPopupMenu(location.x,location.y);
      }
    }
  }
 else   if (buttonText.equals("desktop")) {
    ChatSession chatSession=chatPanel.getChatSession();
    List<ChatTransport> desktopTransports=null;
    if (chatSession != null)     desktopTransports=chatSession.getTransportsForOperationSet(OperationSetDesktopSharingServer.class);
    List<ChatTransport> contactOpSetSupported=getOperationSetForCapabilities(desktopTransports,OperationSetDesktopSharingServer.class);
    if (desktopTransports != null) {
      if (contactOpSetSupported.size() == 1) {
        ChatTransport transport=contactOpSetSupported.get(0);
        CallManager.createDesktopSharing(transport.getProtocolProvider(),transport.getName());
      }
 else       if (contactOpSetSupported.size() > 1) {
        ChooseCallAccountPopupMenu chooseAccountDialog=new ChooseCallAccountPopupMenu(desktopSharingButton,contactOpSetSupported,OperationSetDesktopSharingServer.class);
        Point location=new Point(callButton.getX(),desktopSharingButton.getY() + desktopSharingButton.getHeight());
        SwingUtilities.convertPointToScreen(location,this);
        chooseAccountDialog.showPopupMenu(location.x,location.y);
      }
    }
  }
 else   if (buttonText.equals("options")) {
    GuiActivator.getUIService().getConfigurationContainer().setVisible(true);
  }
 else   if (buttonText.equals("font"))   chatPanel.showFontChooserDialog();
}
