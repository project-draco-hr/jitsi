{
  int multiStreams=0;
  Iterator<?> ii=subCode.iterator();
  Object msgCode=ii.next();
  String messageType=null;
  String i18nMessage=null;
  int severity=0;
  boolean sendEvent=true;
  if (msgCode instanceof ZrtpCodes.InfoCodes) {
    ZrtpCodes.InfoCodes inf=(ZrtpCodes.InfoCodes)msgCode;
    sendEvent=false;
    if (inf == ZrtpCodes.InfoCodes.InfoSecureStateOn) {
      if (isDHSession) {
        multiStreams=((CallSessionImpl)callSession).startZrtpMultiStreams();
        ((AbstractCallParticipant)callParticipant).setSecurityOn(sessionType,cipher,sas,isSasVerified);
      }
 else {
        ((AbstractCallParticipant)callParticipant).setSecurityOn(sessionType,cipher,null,false);
      }
    }
  }
 else   if (msgCode instanceof ZrtpCodes.WarningCodes) {
    ZrtpCodes.WarningCodes warn=(ZrtpCodes.WarningCodes)msgCode;
    severity=CallParticipantSecurityMessageEvent.WARNING;
    messageType=MediaActivator.getResources().getI18NString("impl.media.security.WARNING");
    if (warn == ZrtpCodes.WarningCodes.WarningNoRSMatch) {
      i18nMessage=WARNING_NO_RS_MATCH;
    }
 else     if (warn == ZrtpCodes.WarningCodes.WarningNoExpectedRSMatch) {
      i18nMessage=WARNING_NO_EXPECTED_RS_MATCH;
    }
 else     if (warn == ZrtpCodes.WarningCodes.WarningCRCmismatch) {
      i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.CHECKSUM_MISMATCH");
    }
 else {
      sendEvent=false;
    }
  }
 else   if (msgCode instanceof ZrtpCodes.SevereCodes) {
    ZrtpCodes.SevereCodes severe=(ZrtpCodes.SevereCodes)msgCode;
    severity=CallParticipantSecurityMessageEvent.SEVERE;
    messageType=MediaActivator.getResources().getI18NString("impl.media.security.SEVERE");
    if (severe == ZrtpCodes.SevereCodes.SevereCannotSend) {
      i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.DATA_SEND_FAILED",new String[]{msgCode.toString()});
    }
 else     if (severe == ZrtpCodes.SevereCodes.SevereTooMuchRetries) {
      i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.RETRY_RATE_EXCEEDED",new String[]{msgCode.toString()});
    }
 else     if (severe == ZrtpCodes.SevereCodes.SevereProtocolError) {
      i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.INTERNAL_PROTOCOL_ERROR",new String[]{msgCode.toString()});
    }
 else {
      i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.ZRTP_GENERIC_MSG",new String[]{msgCode.toString()});
    }
  }
 else   if (msgCode instanceof ZrtpCodes.ZrtpErrorCodes) {
    severity=CallParticipantSecurityMessageEvent.ZRTP;
    messageType=MediaActivator.getResources().getI18NString("impl.media.security.ZRTP");
    i18nMessage=MediaActivator.getResources().getI18NString("impl.media.security.ZRTP_GENERIC_MSG",new String[]{msgCode.toString()});
  }
  if (sendEvent)   ((AbstractCallParticipant)callParticipant).setSecurityMessage(messageType,i18nMessage,severity);
  if (logger.isInfoEnabled()) {
    logger.info(sessionTypeToString(sessionType) + ": " + "ZRTP message: severity: "+ sev+ ", sub code: "+ msgCode+ ", DH session: "+ isDHSession+ ", multi: "+ multiStreams);
  }
}
