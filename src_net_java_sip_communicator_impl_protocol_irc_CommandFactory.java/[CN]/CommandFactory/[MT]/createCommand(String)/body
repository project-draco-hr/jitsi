{
  if (command == null || command.isEmpty()) {
    throw new IllegalArgumentException("command cannot be null or empty");
  }
  final Class<? extends Command> type=COMMANDS.get(command);
  if (type == null) {
    throw new UnsupportedCommandException(command);
  }
  try {
    Constructor<? extends Command> cmdCtor=type.getConstructor(ProtocolProviderServiceIrcImpl.class,IrcConnection.class);
    return cmdCtor.newInstance(this.provider,this.connection);
  }
 catch (  NoSuchMethodException e) {
    throw new BadCommandException(command,type,"There is no compatible constructor for instantiating this " + "command.",e);
  }
catch (  InstantiationException e) {
    throw new BadCommandException(command,type,"Unable to instantiate this command class.",e);
  }
catch (  IllegalAccessException e) {
    throw new BadCommandException(command,type,"Unable to access the constructor of this command class.",e);
  }
catch (  InvocationTargetException e) {
    throw new BadCommandException(command,type,"An exception occurred while executing the constructor.",e);
  }
catch (  IllegalArgumentException e) {
    throw new BadCommandException(command,type,"Invalid arguments were passed to the " + "constructor. This may be a bug in the CommandFactory " + "implementation.",e);
  }
}
