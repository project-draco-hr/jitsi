{
  String itemName=globalStatus.getStatusName();
  Iterator<ProtocolProviderService> pProviders=AccountUtils.getRegisteredProviders().iterator();
  while (pProviders.hasNext()) {
    ProtocolProviderService protocolProvider=pProviders.next();
    if (itemName.equals(GlobalStatusEnum.ONLINE_STATUS)) {
      if (!protocolProvider.isRegistered()) {
        saveStatusInformation(protocolProvider,itemName);
        GlobalDisplayDetailsActivator.getUIService().getLoginManager().login(protocolProvider);
      }
 else {
        OperationSetPresence presence=protocolProvider.getOperationSet(OperationSetPresence.class);
        if (presence == null) {
          saveStatusInformation(protocolProvider,itemName);
          continue;
        }
        Iterator<PresenceStatus> statusSet=presence.getSupportedStatusSet();
        while (statusSet.hasNext()) {
          PresenceStatus status=statusSet.next();
          if (status.getStatus() < PresenceStatus.EAGER_TO_COMMUNICATE_THRESHOLD && status.getStatus() >= PresenceStatus.AVAILABLE_THRESHOLD) {
            new PublishPresenceStatusThread(protocolProvider,presence,status).start();
            this.saveStatusInformation(protocolProvider,status.getStatusName());
            break;
          }
        }
      }
    }
 else     if (itemName.equals(GlobalStatusEnum.OFFLINE_STATUS)) {
      if (!protocolProvider.getRegistrationState().equals(RegistrationState.UNREGISTERED) && !protocolProvider.getRegistrationState().equals(RegistrationState.UNREGISTERING)) {
        OperationSetPresence presence=protocolProvider.getOperationSet(OperationSetPresence.class);
        if (presence == null) {
          saveStatusInformation(protocolProvider,itemName);
          LoginManager.logoff(protocolProvider);
          continue;
        }
        Iterator<PresenceStatus> statusSet=presence.getSupportedStatusSet();
        while (statusSet.hasNext()) {
          PresenceStatus status=statusSet.next();
          if (status.getStatus() < PresenceStatus.ONLINE_THRESHOLD) {
            this.saveStatusInformation(protocolProvider,status.getStatusName());
            break;
          }
        }
        try {
          protocolProvider.unregister(true);
        }
 catch (        OperationFailedException e1) {
          logger.error("Unable to unregister the protocol provider: " + protocolProvider + " due to the following exception: "+ e1);
        }
      }
    }
 else     if (itemName.equals(GlobalStatusEnum.FREE_FOR_CHAT_STATUS)) {
      if (!protocolProvider.isRegistered()) {
        saveStatusInformation(protocolProvider,itemName);
        GlobalDisplayDetailsActivator.getUIService().getLoginManager().login(protocolProvider);
      }
 else       publishStatus(protocolProvider,PresenceStatus.AVAILABLE_THRESHOLD,PresenceStatus.MAX_STATUS_VALUE);
    }
 else     if (itemName.equals(GlobalStatusEnum.DO_NOT_DISTURB_STATUS)) {
      if (!protocolProvider.isRegistered()) {
        saveStatusInformation(protocolProvider,itemName);
        GlobalDisplayDetailsActivator.getUIService().getLoginManager().login(protocolProvider);
      }
 else       publishStatus(protocolProvider,PresenceStatus.ONLINE_THRESHOLD,PresenceStatus.EXTENDED_AWAY_THRESHOLD);
    }
 else     if (itemName.equals(GlobalStatusEnum.AWAY_STATUS)) {
      if (!protocolProvider.isRegistered()) {
        saveStatusInformation(protocolProvider,itemName);
        GlobalDisplayDetailsActivator.getUIService().getLoginManager().login(protocolProvider);
      }
 else       publishStatus(protocolProvider,PresenceStatus.AWAY_THRESHOLD,PresenceStatus.AVAILABLE_THRESHOLD);
    }
 else     if (itemName.equals(GlobalStatusEnum.EXTENDED_AWAY_STATUS)) {
      if (!protocolProvider.isRegistered()) {
        saveStatusInformation(protocolProvider,itemName);
        GlobalDisplayDetailsActivator.getUIService().getLoginManager().login(protocolProvider);
      }
 else       publishStatus(protocolProvider,PresenceStatus.EXTENDED_AWAY_THRESHOLD,PresenceStatus.AWAY_THRESHOLD);
    }
  }
}
