{
  int i, k, j, iter, bit, nLS, scale_down, RateLevelIndex=0;
  int abs_q, minSumBits_Q6, sumBits_Q6;
  int[] abs_pulses=new int[Silk_define.MAX_FRAME_LENGTH];
  int[] sum_pulses=new int[Silk_define.MAX_NB_SHELL_BLOCKS];
  int[] nRshifts=new int[Silk_define.MAX_NB_SHELL_BLOCKS];
  int[] pulses_comb=new int[8];
  int[] abs_pulses_ptr;
  int abs_pulses_ptr_offset;
  byte[] pulses_ptr;
  int pulses_ptr_offset;
  final int[] cdf_ptr;
  short[] nBits_ptr;
  iter=frame_length / Silk_define.SHELL_CODEC_FRAME_LENGTH;
  for (i=0; i < frame_length; i+=4) {
    abs_pulses[i + 0]=q[i + 0] > 0 ? q[i + 0] : (-q[i + 0]);
    abs_pulses[i + 1]=q[i + 1] > 0 ? q[i + 1] : (-q[i + 1]);
    abs_pulses[i + 2]=q[i + 2] > 0 ? q[i + 2] : (-q[i + 2]);
    abs_pulses[i + 3]=q[i + 3] > 0 ? q[i + 3] : (-q[i + 3]);
  }
  abs_pulses_ptr=abs_pulses;
  abs_pulses_ptr_offset=0;
  for (i=0; i < iter; i++) {
    nRshifts[i]=0;
    while (true) {
      scale_down=combine_and_check(pulses_comb,abs_pulses_ptr,abs_pulses_ptr_offset,Silk_tables_pulses_per_block.SKP_Silk_max_pulses_table[0],8);
      scale_down+=combine_and_check(pulses_comb,pulses_comb,0,Silk_tables_pulses_per_block.SKP_Silk_max_pulses_table[1],4);
      scale_down+=combine_and_check(pulses_comb,pulses_comb,0,Silk_tables_pulses_per_block.SKP_Silk_max_pulses_table[2],2);
      sum_pulses[i]=pulses_comb[0] + pulses_comb[1];
      if (sum_pulses[i] > Silk_tables_pulses_per_block.SKP_Silk_max_pulses_table[3]) {
        scale_down++;
      }
      if (scale_down != 0) {
        nRshifts[i]++;
        for (k=0; k < Silk_define.SHELL_CODEC_FRAME_LENGTH; k++) {
          abs_pulses_ptr[abs_pulses_ptr_offset + k]=(abs_pulses_ptr[abs_pulses_ptr_offset + k] >> 1);
        }
      }
 else {
        break;
      }
    }
    abs_pulses_ptr_offset+=Silk_define.SHELL_CODEC_FRAME_LENGTH;
  }
  minSumBits_Q6=Integer.MAX_VALUE;
  for (k=0; k < Silk_define.N_RATE_LEVELS - 1; k++) {
    nBits_ptr=Silk_tables_pulses_per_block.SKP_Silk_pulses_per_block_BITS_Q6[k];
    sumBits_Q6=Silk_tables_pulses_per_block.SKP_Silk_rate_levels_BITS_Q6[sigtype][k];
    for (i=0; i < iter; i++) {
      if (nRshifts[i] > 0) {
        sumBits_Q6+=nBits_ptr[Silk_define.MAX_PULSES + 1];
      }
 else {
        sumBits_Q6+=nBits_ptr[sum_pulses[i]];
      }
    }
    if (sumBits_Q6 < minSumBits_Q6) {
      minSumBits_Q6=sumBits_Q6;
      RateLevelIndex=k;
    }
  }
  Silk_range_coder.SKP_Silk_range_encoder(psRC,RateLevelIndex,Silk_tables_pulses_per_block.SKP_Silk_rate_levels_CDF[sigtype],0);
  cdf_ptr=Silk_tables_pulses_per_block.SKP_Silk_pulses_per_block_CDF[RateLevelIndex];
  for (i=0; i < iter; i++) {
    if (nRshifts[i] == 0) {
      Silk_range_coder.SKP_Silk_range_encoder(psRC,sum_pulses[i],cdf_ptr,0);
    }
 else {
      Silk_range_coder.SKP_Silk_range_encoder(psRC,Silk_define.MAX_PULSES + 1,cdf_ptr,0);
      for (k=0; k < nRshifts[i] - 1; k++) {
        Silk_range_coder.SKP_Silk_range_encoder(psRC,Silk_define.MAX_PULSES + 1,Silk_tables_pulses_per_block.SKP_Silk_pulses_per_block_CDF[Silk_define.N_RATE_LEVELS - 1],0);
      }
      Silk_range_coder.SKP_Silk_range_encoder(psRC,sum_pulses[i],Silk_tables_pulses_per_block.SKP_Silk_pulses_per_block_CDF[Silk_define.N_RATE_LEVELS - 1],0);
    }
  }
  for (i=0; i < iter; i++) {
    if (sum_pulses[i] > 0) {
      Silk_shell_coder.SKP_Silk_shell_encoder(psRC,abs_pulses,i * Silk_define.SHELL_CODEC_FRAME_LENGTH);
    }
  }
  for (i=0; i < iter; i++) {
    if (nRshifts[i] > 0) {
      pulses_ptr=q;
      pulses_ptr_offset=i * Silk_define.SHELL_CODEC_FRAME_LENGTH;
      nLS=nRshifts[i] - 1;
      for (k=0; k < Silk_define.SHELL_CODEC_FRAME_LENGTH; k++) {
        abs_q=pulses_ptr[pulses_ptr_offset + k] > 0 ? pulses_ptr[pulses_ptr_offset + k] : (-pulses_ptr[pulses_ptr_offset + k]);
        for (j=nLS; j > 0; j--) {
          bit=(abs_q >> j) & 1;
          Silk_range_coder.SKP_Silk_range_encoder(psRC,bit,Silk_tables_other.SKP_Silk_lsb_CDF,0);
        }
        bit=abs_q & 1;
        Silk_range_coder.SKP_Silk_range_encoder(psRC,bit,Silk_tables_other.SKP_Silk_lsb_CDF,0);
      }
    }
  }
  Silk_code_signs.SKP_Silk_encode_signs(psRC,q,frame_length,sigtype,QuantOffsetType,RateLevelIndex);
}
