{
  if (logger.isTraceEnabled()) {
    logger.trace("Preparing to install account for user " + userName);
  }
  Hashtable<String,String> accountProperties=new Hashtable<String,String>();
  accountProperties.put(ProtocolProviderFactory.IS_PREFERRED_PROTOCOL,Boolean.toString(isPreferredProtocol()));
  accountProperties.put(ProtocolProviderFactory.PROTOCOL,getProtocol());
  String protocolIconPath=getProtocolIconPath();
  if (protocolIconPath != null)   accountProperties.put(ProtocolProviderFactory.PROTOCOL_ICON_PATH,protocolIconPath);
  String accountIconPath=getAccountIconPath();
  if (accountIconPath != null)   accountProperties.put(ProtocolProviderFactory.ACCOUNT_ICON_PATH,accountIconPath);
  if (registration.isRememberPassword()) {
    accountProperties.put(ProtocolProviderFactory.PASSWORD,passwd);
  }
  accountProperties.put("GMAIL_NOTIFICATIONS_ENABLED",String.valueOf(registration.isGmailNotificationEnabled()));
  accountProperties.put("GOOGLE_CONTACTS_ENABLED",String.valueOf(registration.isGoogleContactsEnabled()));
  String serverName=null;
  if (registration.getServerAddress() != null && registration.getServerAddress().length() > 0) {
    serverName=registration.getServerAddress();
  }
 else {
    serverName=getServerFromUserName(userName);
  }
  if (registration.isServerOverridden()) {
    accountProperties.put(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,Boolean.toString(true));
  }
 else {
    accountProperties.put(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,Boolean.toString(false));
  }
  if (serverName == null || serverName.length() <= 0)   throw new OperationFailedException("Should specify a server for user name " + userName + ".",OperationFailedException.SERVER_NOT_SPECIFIED);
  if (userName.indexOf('@') < 0 && registration.getDefaultUserSufix() != null)   userName=userName + '@' + registration.getDefaultUserSufix();
  if (registration.getOverridePhoneSuffix() != null) {
    accountProperties.put("OVERRIDE_PHONE_SUFFIX",registration.getOverridePhoneSuffix());
  }
  accountProperties.put(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT,Boolean.toString(registration.isJingleDisabled()));
  accountProperties.put("BYPASS_GTALK_CAPABILITIES",String.valueOf(registration.getBypassGtalkCaps()));
  if (registration.getTelephonyDomainBypassCaps() != null) {
    accountProperties.put("TELEPHONY_BYPASS_GTALK_CAPS",registration.getTelephonyDomainBypassCaps());
  }
  accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,serverName);
  String smsServerAddress=registration.getSmsServerAddress();
  String clientCertId=registration.getClientCertificateId();
  if (clientCertId != null) {
    accountProperties.put(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE,clientCertId);
  }
 else {
    accountProperties.remove(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE);
  }
  if (smsServerAddress != null) {
    accountProperties.put(ProtocolProviderFactory.SMS_SERVER_ADDRESS,smsServerAddress);
  }
  accountProperties.put(ProtocolProviderFactory.SERVER_PORT,String.valueOf(registration.getPort()));
  accountProperties.put(ProtocolProviderFactory.AUTO_GENERATE_RESOURCE,String.valueOf(registration.isResourceAutogenerated()));
  accountProperties.put(ProtocolProviderFactory.RESOURCE,registration.getResource());
  accountProperties.put(ProtocolProviderFactory.RESOURCE_PRIORITY,String.valueOf(registration.getPriority()));
  accountProperties.put(ProtocolProviderFactory.IS_USE_ICE,String.valueOf(registration.isUseIce()));
  accountProperties.put(ProtocolProviderFactory.IS_USE_GOOGLE_ICE,String.valueOf(registration.isUseGoogleIce()));
  accountProperties.put(ProtocolProviderFactory.AUTO_DISCOVER_STUN,String.valueOf(registration.isAutoDiscoverStun()));
  accountProperties.put(ProtocolProviderFactory.USE_DEFAULT_STUN_SERVER,String.valueOf(registration.isUseDefaultStunServer()));
  String accountDisplayName=registration.getAccountDisplayName();
  if (accountDisplayName != null && accountDisplayName.length() > 0)   accountProperties.put(ProtocolProviderFactory.ACCOUNT_DISPLAY_NAME,accountDisplayName);
  List<StunServerDescriptor> stunServers=registration.getAdditionalStunServers();
  int serverIndex=-1;
  for (  StunServerDescriptor stunServer : stunServers) {
    serverIndex++;
    stunServer.storeDescriptor(accountProperties,ProtocolProviderFactory.STUN_PREFIX + serverIndex);
  }
  accountProperties.put(ProtocolProviderFactory.IS_USE_JINGLE_NODES,String.valueOf(registration.isUseJingleNodes()));
  accountProperties.put(ProtocolProviderFactory.AUTO_DISCOVER_JINGLE_NODES,String.valueOf(registration.isAutoDiscoverJingleNodes()));
  List<JingleNodeDescriptor> jnRelays=registration.getAdditionalJingleNodes();
  serverIndex=-1;
  for (  JingleNodeDescriptor jnRelay : jnRelays) {
    serverIndex++;
    jnRelay.storeDescriptor(accountProperties,JingleNodeDescriptor.JN_PREFIX + serverIndex);
  }
  accountProperties.put(ProtocolProviderFactory.IS_USE_UPNP,String.valueOf(registration.isUseUPNP()));
  accountProperties.put(ProtocolProviderFactory.IS_ALLOW_NON_SECURE,String.valueOf(registration.isAllowNonSecure()));
  if (registration.getDTMFMethod() != null)   accountProperties.put("DTMF_METHOD",registration.getDTMFMethod());
 else   accountProperties.put("DTMF_METHOD",registration.getDefaultDTMFMethod());
  accountProperties.put(ProtocolProviderFactory.DTMF_MINIMAL_TONE_DURATION,registration.getDtmfMinimalToneDuration());
  accountProperties.put(ProtocolProviderFactory.DEFAULT_ENCRYPTION,Boolean.toString(registration.isDefaultEncryption()));
  registration.addEncryptionProtocolsToProperties(accountProperties);
  registration.addEncryptionProtocolStatusToProperties(accountProperties);
  accountProperties.put(ProtocolProviderFactory.DEFAULT_SIPZRTP_ATTRIBUTE,Boolean.toString(registration.isSipZrtpAttribute()));
  accountProperties.put(ProtocolProviderFactory.SDES_CIPHER_SUITES,registration.getSDesCipherSuites());
  accountProperties.put(ProtocolProviderFactory.OVERRIDE_ENCODINGS,Boolean.toString(registration.isOverrideEncodings()));
  accountProperties.putAll(registration.getEncodingProperties());
  if (isModification()) {
    providerFactory.modifyAccount(protocolProvider,accountProperties);
    setModification(false);
    return protocolProvider;
  }
  try {
    if (logger.isTraceEnabled()) {
      logger.trace("Will install account for user " + userName + " with the following properties."+ accountProperties);
    }
    AccountID accountID=providerFactory.installAccount(userName,accountProperties);
    ServiceReference serRef=providerFactory.getProviderForAccount(accountID);
    protocolProvider=(ProtocolProviderService)JabberAccRegWizzActivator.bundleContext.getService(serRef);
  }
 catch (  IllegalArgumentException exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Username, password or server is null.",OperationFailedException.ILLEGAL_ARGUMENT);
  }
catch (  IllegalStateException exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Account already exists.",OperationFailedException.IDENTIFICATION_CONFLICT);
  }
catch (  Throwable exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Failed to add account.",OperationFailedException.GENERAL_ERROR);
  }
  return protocolProvider;
}
