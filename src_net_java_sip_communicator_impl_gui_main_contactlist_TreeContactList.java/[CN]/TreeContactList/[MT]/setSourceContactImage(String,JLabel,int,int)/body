{
  imageSearchCanceled=false;
  Pattern filterPattern=Pattern.compile("^" + Pattern.quote(contactString) + "$",Pattern.UNICODE_CASE);
  Iterator<UIContactSource> contactSources=getContactSources().iterator();
  final Vector<ContactQuery> loadedQueries=new Vector<ContactQuery>();
  while (contactSources.hasNext()) {
    if (imageSearchCanceled)     return;
    ContactSourceService contactSource=contactSources.next().getContactSourceService();
    if (contactSource instanceof ExtendedContactSourceService) {
      ContactQueryListener queryListener=new ContactQueryListener(){
        public void queryStatusChanged(        ContactQueryStatusEvent event){
        }
        public void contactReceived(        ContactReceivedEvent event){
          SourceContact sourceContact=event.getContact();
          byte[] image=sourceContact.getImage();
          if (image != null && image.length > 0) {
            setScaledLabelImage(label,image,imgWidth,imgHeight);
            cancelImageQueries(loadedQueries);
            imageSearchCanceled=true;
          }
        }
        /** 
 * Indicates that a contact has been removed after a search.
 * @param event the <tt>ContactQueryEvent</tt> containing
 * information
 * about the received <tt>SourceContact</tt>
 */
        public void contactRemoved(        ContactRemovedEvent event){
          final SourceContact sourceContact=event.getContact();
          ContactSourceService contactSource=sourceContact.getContactSource();
          UIContactSource sourceUI=getContactSource(contactSource);
          if (sourceUI == null)           return;
          UIContact uiContact=sourceUI.getUIContact(sourceContact);
          if (uiContact == null)           return;
          if ((contactSource instanceof ExtendedContactSourceService) || currentFilter.isMatching(uiContact)) {
            removeContact(uiContact,false);
          }
        }
        /** 
 * Indicates that a contact has been updated after a search.
 * @param event the <tt>ContactQueryEvent</tt> containing
 * information
 * about the updated <tt>SourceContact</tt>
 */
        public void contactChanged(        ContactChangedEvent event){
          final SourceContact sourceContact=event.getContact();
          ContactSourceService contactSource=sourceContact.getContactSource();
          UIContactSource sourceUI=getContactSource(contactSource);
          if (sourceUI == null)           return;
          UIContact uiContact=sourceUI.getUIContact(sourceContact);
          if (uiContact == null || !(uiContact instanceof UIContactImpl))           return;
synchronized (uiContact) {
            ContactNode contactNode=((UIContactImpl)uiContact).getContactNode();
            if (contactNode != null)             nodeChanged(contactNode);
          }
        }
      }
;
      ContactQuery query=((ExtendedContactSourceService)contactSource).createContactQuery(filterPattern);
      if (query == null)       continue;
      loadedQueries.add(query);
      query.start();
      if (imageSearchCanceled)       return;
      List<SourceContact> results=query.getQueryResults();
      if (results != null && !results.isEmpty()) {
        Iterator<SourceContact> resultsIter=results.iterator();
        while (resultsIter.hasNext()) {
          byte[] image=resultsIter.next().getImage();
          if (image != null && image.length > 0) {
            setScaledLabelImage(label,image,imgWidth,imgHeight);
            cancelImageQueries(loadedQueries);
            return;
          }
        }
      }
    }
  }
  if (imageSearchCanceled)   return;
  int atIndex=contactString.indexOf("@");
  if (atIndex >= 0 && StringUtils.isNumber(contactString.substring(0,atIndex))) {
    setSourceContactImage(contactString.substring(0,atIndex),label,imgWidth,imgHeight);
  }
}
