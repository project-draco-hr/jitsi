{
  logger.debug("Start action added");
  String eventName=(String)event.getSourceEventType();
  Iterator it=null;
  int row=0;
  NotificationsTableEntry tmpNTE=null;
  NotificationActionHandler handler=event.getActionHandler();
  boolean isActionEnabled=(handler != null && handler.isEnabled());
  if (dataVector.size() <= 0) {
    tmpNTE=new NotificationsTableEntry();
    tmpNTE.setEvent(eventName);
    if (event.getSourceActionType().equals(NotificationService.ACTION_POPUP_MESSAGE)) {
      tmpNTE.setPopup(isActionEnabled);
    }
 else     if (event.getSourceActionType().equals(notificationService.ACTION_COMMAND)) {
      tmpNTE.setProgram(isActionEnabled);
      tmpNTE.setProgramFile(((CommandNotificationHandler)event.getActionHandler()).getDescriptor());
    }
 else     if (event.getSourceActionType().equals(NotificationService.ACTION_SOUND)) {
      tmpNTE.setSound(isActionEnabled);
      tmpNTE.setSoundFile(((SoundNotificationHandler)event.getActionHandler()).getDescriptor());
    }
    tmpNTE.setEnabled(notificationService.isActive(eventName));
    this.addRowAtVector(tmpNTE);
    notificationList.setRowSelectionInterval(0,0);
    updatePanel(tmpNTE);
    logger.debug("End action added");
    return;
  }
  it=dataVector.iterator();
  while (it.hasNext()) {
    tmpNTE=(NotificationsTableEntry)it.next();
    if (tmpNTE.getEvent().equals(eventName)) {
      if (event.getSourceActionType().equals(NotificationService.ACTION_POPUP_MESSAGE)) {
        tmpNTE.setPopup(isActionEnabled);
      }
 else       if (event.getSourceActionType().equals(notificationService.ACTION_COMMAND)) {
        tmpNTE.setProgram(isActionEnabled);
        tmpNTE.setProgramFile(((CommandNotificationHandler)event.getActionHandler()).getDescriptor());
      }
 else       if (event.getSourceActionType().equals(NotificationService.ACTION_SOUND)) {
        tmpNTE.setSound(isActionEnabled);
        tmpNTE.setSoundFile(((SoundNotificationHandler)event.getActionHandler()).getDescriptor());
      }
      tmpNTE.setEnabled(notificationService.isActive(eventName));
      this.updateTableRow(tmpNTE,row);
      updatePanel(tmpNTE);
      notificationList.setRowSelectionInterval(row,row);
      logger.debug("End action added");
      return;
    }
    row++;
  }
  tmpNTE=new NotificationsTableEntry();
  tmpNTE.setEvent(eventName);
  if (event.getSourceActionType().equals(NotificationService.ACTION_POPUP_MESSAGE)) {
    tmpNTE.setPopup(isActionEnabled);
  }
 else   if (event.getSourceActionType().equals(notificationService.ACTION_COMMAND)) {
    tmpNTE.setProgram(isActionEnabled);
    tmpNTE.setProgramFile(((CommandNotificationHandler)event.getActionHandler()).getDescriptor());
  }
 else   if (event.getSourceActionType().equals(NotificationService.ACTION_SOUND)) {
    tmpNTE.setSound(isActionEnabled);
    tmpNTE.setSoundFile(((SoundNotificationHandler)event.getActionHandler()).getDescriptor());
  }
  tmpNTE.setEnabled(notificationService.isActive(eventName));
  this.addRowAtVector(tmpNTE);
  updatePanel(tmpNTE);
  notificationList.setRowSelectionInterval(notificationList.getRowCount() - 1,notificationList.getRowCount() - 1);
  logger.debug("End action added");
  return;
}
