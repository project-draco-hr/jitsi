{
  if (outputDataSource != null)   return;
  inputDataSource.connect();
  Processor processor;
  try {
    processor=Manager.createProcessor(inputDataSource);
  }
 catch (  NoProcessorException npex) {
    IOException ioex=new IOException();
    ioex.initCause(npex);
    throw ioex;
  }
  ProcessorUtility processorUtility=new ProcessorUtility();
  if (!processorUtility.waitForState(processor,Processor.Configured))   throw new IOException("Couldn't configure transcoding processor.");
  TrackControl[] trackControls=processor.getTrackControls();
  if (trackControls != null)   for (  TrackControl trackControl : trackControls) {
    Format trackFormat=trackControl.getFormat();
    if ((trackFormat instanceof AudioFormat) && !trackFormat.matches(outputFormat)) {
      Format[] supportedTrackFormats=trackControl.getSupportedFormats();
      if (supportedTrackFormats != null)       for (      Format supportedTrackFormat : supportedTrackFormats)       if (supportedTrackFormat.matches(outputFormat)) {
        Format intersectionFormat=supportedTrackFormat.intersects(outputFormat);
        if (intersectionFormat != null) {
          trackControl.setFormat(intersectionFormat);
          break;
        }
      }
    }
  }
  if (!processorUtility.waitForState(processor,Processor.Realized))   throw new IOException("Couldn't realize transcoding processor.");
  DataSource outputDataSource=processor.getDataOutput();
  outputDataSource.connect();
  transcodingProcessor=processor;
  this.outputDataSource=outputDataSource;
}
