{
  if (!this.connectionState.isConnected()) {
    throw new IllegalStateException("Please connect to an IRC server first");
  }
  if (chatroom == null) {
    throw new IllegalArgumentException("chatroom cannot be null");
  }
  if (password == null) {
    throw new IllegalArgumentException("password cannot be null");
  }
  final String chatRoomId=chatroom.getIdentifier();
  if (this.joined.containsKey(chatRoomId)) {
    return;
  }
  if (this.isupportChannelLen != null && chatRoomId.length() > this.isupportChannelLen) {
    throw new IllegalArgumentException("the channel name must not be " + "longer than " + this.isupportChannelLen.intValue() + " characters according to server parameters.");
  }
  final Integer limit=this.isupportChanLimit.get(chatRoomId.charAt(0));
  if (limit != null && this.joined.size() >= limit) {
    throw new IllegalStateException("already joined to the maximum " + "allowed number of channels (" + this.isupportChanLimit.toString() + ") according to "+ "server parameters.");
  }
  LOGGER.trace("Start joining channel " + chatRoomId);
  final Result<Object,Exception> joinSignal=new Result<Object,Exception>();
synchronized (joinSignal) {
    LOGGER.trace("Issue join channel command to IRC library and wait " + "for join operation to complete (un)successfully.");
    this.joined.put(chatRoomId,null);
    this.irc.joinChannel(chatRoomId,password,new Callback<IRCChannel>(){
      @Override public void onSuccess(      final IRCChannel channel){
        if (LOGGER.isTraceEnabled()) {
          LOGGER.trace("Started callback for successful " + "join of channel '" + chatroom.getIdentifier() + "'.");
        }
        boolean isRequestedChatRoom=channel.getName().equalsIgnoreCase(chatRoomId);
synchronized (joinSignal) {
          if (!isRequestedChatRoom) {
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Callback for successful " + "join finished prematurely " + "since we got forwarded from '" + chatRoomId + "' to '"+ channel.getName()+ "'. Joining of forwarded channel "+ "gets handled by Server Listener "+ "since that channel was not "+ "announced.");
            }
            ChannelManager.this.joined.remove(chatRoomId);
            ChannelManager.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED,"We got forwarded to channel '" + channel.getName() + "'.");
            joinSignal.setDone();
            joinSignal.notifyAll();
            return;
          }
          try {
            ChannelManager.this.joined.put(chatRoomId,chatroom);
            ChannelManager.this.irc.addListener(new ChatRoomListener(chatroom,ChannelManager.this.config.isChannelPresenceTaskEnabled(),ChannelManager.this.awayNotify));
            prepareChatRoom(chatroom,channel);
          }
  finally {
            ChannelManager.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOINED,null);
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Finished successful join " + "callback for channel '" + chatRoomId + "'. Waking up original thread.");
            }
            joinSignal.setDone();
            joinSignal.notifyAll();
          }
        }
      }
      @Override public void onFailure(      final Exception e){
        LOGGER.trace("Started callback for failed attempt to " + "join channel '" + chatRoomId + "'.");
synchronized (joinSignal) {
          try {
            ChannelManager.this.joined.remove(chatRoomId);
            ChannelManager.this.provider.getMUC().fireLocalUserPresenceEvent(chatroom,LocalUserChatRoomPresenceChangeEvent.LOCAL_USER_JOIN_FAILED,e.getMessage());
          }
  finally {
            if (LOGGER.isTraceEnabled()) {
              LOGGER.trace("Finished callback for " + "failed attempt to join " + "channel '" + chatRoomId + "'. Waking up original thread.");
            }
            joinSignal.setDone(e);
            joinSignal.notifyAll();
          }
        }
      }
    }
);
    try {
      while (!joinSignal.isDone()) {
        LOGGER.trace("Waiting for channel join message ...");
        joinSignal.wait();
      }
      LOGGER.trace("Finished waiting for join operation for channel '" + chatroom.getIdentifier() + "' to complete.");
    }
 catch (    InterruptedException e) {
      LOGGER.error("Wait for join operation was interrupted.",e);
      throw new OperationFailedException(e.getMessage(),OperationFailedException.INTERNAL_ERROR,e);
    }
  }
}
