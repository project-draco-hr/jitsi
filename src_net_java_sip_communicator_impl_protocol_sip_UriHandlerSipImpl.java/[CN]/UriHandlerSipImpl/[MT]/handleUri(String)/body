{
synchronized (storedAccountsAreLoaded) {
    if (!storedAccountsAreLoaded[0]) {
      if (uris == null) {
        uris=new LinkedList<String>();
      }
      uris.add(uri);
      return;
    }
  }
  final ProtocolProviderService provider;
  try {
    provider=selectHandlingProvider(uri);
  }
 catch (  OperationFailedException exc) {
    if (logger.isTraceEnabled())     logger.trace("User canceled handling of uri " + uri);
    return;
  }
  if (provider == null) {
    showErrorMessage("You need to configure at least one SIP account \n" + "to be able to call " + uri,null);
    return;
  }
  if (provider.getRegistrationState() == RegistrationState.REGISTERED) {
    handleUri(uri,provider);
  }
 else {
    long initialRegistrationTimeout=SipActivator.getConfigurationService().getLong(INITIAL_REGISTRATION_TIMEOUT_PROP,DEFAULT_INITIAL_REGISTRATION_TIMEOUT);
    final DelayRegistrationStateChangeListener listener=new DelayRegistrationStateChangeListener(uri,provider);
    provider.addRegistrationStateChangeListener(listener);
    new Timer().schedule(new TimerTask(){
      @Override public void run(){
        provider.removeRegistrationStateChangeListener(listener);
        if (provider.getRegistrationState() != RegistrationState.REGISTERED) {
          handleUri(uri,provider);
        }
      }
    }
,initialRegistrationTimeout);
  }
}
