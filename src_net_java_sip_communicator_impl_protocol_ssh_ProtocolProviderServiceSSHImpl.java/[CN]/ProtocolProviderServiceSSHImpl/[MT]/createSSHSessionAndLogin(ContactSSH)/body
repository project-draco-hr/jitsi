{
  if (logger.isInfoEnabled())   logger.info("Creating a new SSH Session to " + sshContact.getHostName());
  JSch jsch=new JSch();
  String knownHosts=accountID.getAccountPropertyString("KNOWN_HOSTS_FILE");
  if (!knownHosts.equals("Optional"))   jsch.setKnownHosts(knownHosts);
  String identitiyKey=accountID.getAccountPropertyString("IDENTITY_FILE");
  String userName=sshContact.getUserName();
  if (userName.equals(""))   userName=System.getProperty("user.name");
  if (!identitiyKey.equals("Optional"))   jsch.addIdentity(identitiyKey);
  Session session=jsch.getSession(userName,sshContact.getHostName(),sshContact.getSSHConfigurationForm().getPort());
  SSHUserInfo sshUserInfo=new SSHUserInfo(sshContact);
  session.setUserInfo(sshUserInfo);
  session.connect(connectionTimeout);
  int count=0;
  while (!session.isConnected() && count <= 30000) {
    Thread.sleep(1000);
    count+=1000;
    if (logger.isTraceEnabled())     logger.trace("SSH:" + sshContact.getHostName() + ": Sleep zzz .. ");
  }
  if (count > 30000) {
    sshContact.setSSHSession(null);
    JOptionPane.showMessageDialog(null,"SSH Connection attempt to " + sshContact.getHostName() + " timed out");
    throw new OperationFailedException("SSH Connection attempt to " + sshContact.getHostName() + " timed out",2);
  }
  sshContact.setJSch(jsch);
  sshContact.setSSHSession(session);
  if (logger.isInfoEnabled())   logger.info("A new SSH Session to " + sshContact.getHostName() + " Created");
}
