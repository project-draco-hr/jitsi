{
  String branchID=challengedTransaction.getBranchId();
  Request challengedRequest=challengedTransaction.getRequest();
  Request reoriginatedRequest=cloneReqForAuthentication(challengedRequest,challenge);
  incrementRequestSeqNo(reoriginatedRequest,newCSeq);
  ListIterator<WWWAuthenticateHeader> authHeaders=extractChallenges(challenge);
  ClientTransaction retryTran=transactionCreator.getNewClientTransaction(reoriginatedRequest);
  Dialog tranDialog=retryTran.getDialog();
  if (tranDialog != null && tranDialog.getLocalSeqNumber() != getRequestSeqNo(reoriginatedRequest))   tranDialog.incrementLocalSequenceNumber();
  while (authHeaders.hasNext()) {
    WWWAuthenticateHeader authHeader=authHeaders.next();
    String realm=authHeader.getRealm();
    CredentialsCacheEntry ccEntry=cachedCredentials.remove(realm);
    boolean ccEntryHasSeenTran=false;
    if (ccEntry != null)     ccEntryHasSeenTran=ccEntry.popBranchID(branchID);
    String storedPassword=SipActivator.getProtocolProviderFactory().loadPassword(accountID);
    if (ccEntry == null) {
      if (storedPassword != null) {
        ccEntry=createCcEntryWithStoredPassword(storedPassword);
        if (logger.isTraceEnabled())         logger.trace("seem to have a stored pass! Try with it.");
      }
 else {
        if (logger.isTraceEnabled())         logger.trace("We don't seem to have a good pass! Get one.");
        ccEntry=createCcEntryWithNewCredentials(realm,SecurityAuthority.AUTHENTICATION_REQUIRED);
        if (ccEntry == null)         throw new OperationFailedException("User has canceled the authentication process.",OperationFailedException.AUTHENTICATION_CANCELED);
      }
    }
 else {
      if (ccEntryHasSeenTran && !authHeader.isStale()) {
        SipActivator.getProtocolProviderFactory().storePassword(accountID,null);
        ccEntry=createCcEntryWithNewCredentials(realm,SecurityAuthority.WRONG_PASSWORD);
        if (ccEntry == null)         throw new OperationFailedException("User has canceled the authentication process.",OperationFailedException.AUTHENTICATION_CANCELED);
      }
 else {
        if (logger.isTraceEnabled())         logger.trace("We seem to have a pass in the cache. " + "Let's try with it.");
      }
    }
    if (ccEntry.userCredentials == null) {
      throw new OperationFailedException("Unable to authenticate with realm " + realm + ". User did not provide credentials.",OperationFailedException.AUTHENTICATION_FAILED);
    }
    AuthorizationHeader authorization=this.createAuthorizationHeader(reoriginatedRequest.getMethod(),reoriginatedRequest.getRequestURI().toString(),(reoriginatedRequest.getContent() == null) ? "" : reoriginatedRequest.getContent().toString(),authHeader,ccEntry.userCredentials);
    ccEntry.pushBranchID(retryTran.getBranchId());
    cachedCredentials.cacheEntry(realm,ccEntry);
    if (logger.isDebugEnabled())     logger.debug("Created authorization header: " + authorization.toString());
    CallIdHeader call=(CallIdHeader)reoriginatedRequest.getHeader(CallIdHeader.NAME);
    if (call != null) {
      String callid=call.getCallId();
      cachedCredentials.cacheAuthorizationHeader(callid,authorization);
    }
    reoriginatedRequest.addHeader(authorization);
  }
  if (logger.isDebugEnabled())   logger.debug("Returning authorization transaction.");
  return retryTran;
}
