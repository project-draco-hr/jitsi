{
  @SuppressWarnings("unchecked") Collection<String> registeredPlugins=new HashSet<String>(PlugInManager.getPlugInList(null,null,PlugInManager.CODEC));
  boolean commit=false;
  PlugInManager.removePlugIn("com.sun.media.codec.video.colorspace.JavaRGBToYUV",PlugInManager.CODEC);
  PlugInManager.removePlugIn("com.sun.media.codec.video.colorspace.JavaRGBConverter",PlugInManager.CODEC);
  for (  String className : CUSTOM_CODECS) {
    if (className == null)     continue;
    if (registeredPlugins.contains(className)) {
      if (logger.isDebugEnabled())       logger.debug("Codec : " + className + " is already registered");
    }
 else {
      commit=true;
      boolean registered;
      Throwable exception=null;
      try {
        Codec codec=(Codec)Class.forName(className).newInstance();
        registered=PlugInManager.addPlugIn(className,codec.getSupportedInputFormats(),codec.getSupportedOutputFormats(null),PlugInManager.CODEC);
      }
 catch (      Throwable ex) {
        registered=false;
        exception=ex;
      }
      if (registered) {
        if (logger.isDebugEnabled())         logger.debug("Codec " + className + " is successfully registered");
      }
 else {
        if (logger.isDebugEnabled())         logger.debug("Codec " + className + " is NOT succsefully registered",exception);
      }
    }
  }
  @SuppressWarnings("unchecked") Vector<String> codecs=PlugInManager.getPlugInList(null,null,PlugInManager.CODEC);
  if (codecs != null) {
    int speexResamplerIndex=codecs.indexOf(SPEEX_RESAMPLER);
    if (speexResamplerIndex != -1) {
      codecs.remove(speexResamplerIndex);
      codecs.add(0,SPEEX_RESAMPLER);
      PlugInManager.setPlugInList(codecs,PlugInManager.CODEC);
    }
  }
  if (commit)   try {
    PlugInManager.commit();
  }
 catch (  IOException ex) {
    logger.error("Cannot commit to PlugInManager",ex);
  }
}
