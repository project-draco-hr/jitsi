{
  final Call call=callParticipant.getCall();
  if (call == null)   return null;
  final OperationSetVideoTelephony telephony=(OperationSetVideoTelephony)call.getProtocolProvider().getOperationSet(OperationSetVideoTelephony.class);
  if (telephony == null)   return null;
  final VideoTelephonyListener videoTelephonyListener=new VideoTelephonyListener();
  CallChangeListener callListener=new CallChangeListener(){
    private boolean videoListenerIsAdded;
    private void addVideoListener(){
      telephony.addVideoListener(callParticipant,videoTelephonyListener);
      telephony.addPropertyChangeListener(call,videoTelephonyListener);
      videoListenerIsAdded=true;
synchronized (videoContainers) {
        videoTelephony=telephony;
        handleVideoEvent(null);
        boolean localVideoStreaming=videoTelephony.isLocalVideoStreaming(call);
        handleLocalVideoStreamingChange(videoTelephonyListener,!localVideoStreaming,localVideoStreaming);
      }
    }
    public synchronized void callParticipantAdded(    CallParticipantEvent event){
      if (callParticipant.equals(event.getSourceCallParticipant()) && !videoListenerIsAdded) {
        Call call=callParticipant.getCall();
        if ((call != null) && CallState.CALL_IN_PROGRESS.equals(call.getCallState()))         addVideoListener();
      }
    }
    public synchronized void callParticipantRemoved(    CallParticipantEvent event){
      if (callParticipant.equals(event.getSourceCallParticipant()) && videoListenerIsAdded) {
        Call call=callParticipant.getCall();
        if (call != null)         removeVideoListener();
      }
    }
    public synchronized void callStateChanged(    CallChangeEvent event){
      CallState newCallState=(CallState)event.getNewValue();
      if (CallState.CALL_ENDED.equals(newCallState)) {
        if (videoListenerIsAdded)         removeVideoListener();
        call.removeCallChangeListener(this);
      }
 else       if (CallState.CALL_IN_PROGRESS.equals(newCallState)) {
        if (!videoListenerIsAdded)         addVideoListener();
      }
    }
    private void removeVideoListener(){
      telephony.removeVideoListener(callParticipant,videoTelephonyListener);
      telephony.removePropertyChangeListener(call,videoTelephonyListener);
      videoListenerIsAdded=false;
      if (localVideo != null) {
        telephony.disposeLocalVisualComponent(callParticipant,localVideo);
        localVideo=null;
      }
synchronized (videoContainers) {
        if (telephony.equals(videoTelephony))         videoTelephony=null;
      }
      exitFullScreen(fullScreenWindow);
    }
  }
;
  call.addCallChangeListener(callListener);
  callListener.callStateChanged(new CallChangeEvent(call,CallChangeEvent.CALL_STATE_CHANGE,null,call.getCallState()));
  return telephony;
}
