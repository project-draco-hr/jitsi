{
  Processor player=null;
  Throwable exception=null;
  try {
    dataSource.connect();
  }
 catch (  IOException ioex) {
    exception=ioex;
  }
  if (exception != null) {
    logger.error("Failed to connect to " + MediaStreamImpl.toString(dataSource),exception);
    return player;
  }
  try {
    player=Manager.createProcessor(dataSource);
  }
 catch (  IOException ioe) {
    exception=ioe;
  }
catch (  NoPlayerException npe) {
    exception=npe;
  }
  if (exception != null) {
    logger.error("Failed to create Player for " + MediaStreamImpl.toString(dataSource),exception);
  }
 else {
    if (playerControllerListener == null)     playerControllerListener=new ControllerListener(){
      /** 
 * Notifies this <tt>ControllerListener</tt> that the
 * <tt>Controller</tt> which it is registered with has
 * generated an event.
 * @param event the <tt>ControllerEvent</tt> specifying the
 * <tt>Controller</tt> which is the source of the event and
 * the very type of the event
 * @see ControllerListener#controllerUpdate(ControllerEvent)
 */
      public void controllerUpdate(      ControllerEvent event){
        playerControllerUpdate(event);
      }
    }
;
    player.addControllerListener(playerControllerListener);
    player.configure();
    if (logger.isTraceEnabled())     logger.trace("Created Player with hashCode " + player.hashCode() + " for "+ MediaStreamImpl.toString(dataSource));
  }
  if (player == null)   dataSource.disconnect();
  return player;
}
