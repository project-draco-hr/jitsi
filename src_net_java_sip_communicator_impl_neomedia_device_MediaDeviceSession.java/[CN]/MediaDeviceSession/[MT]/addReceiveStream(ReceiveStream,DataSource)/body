{
  if (receiveStreamDataSource == null)   return;
  receiveStreams.put(receiveStream,receiveStreamDataSource);
synchronized (players) {
    Player player=players.get(receiveStreamDataSource);
    if (player == null) {
      Throwable exception=null;
      try {
        player=Manager.createPlayer(receiveStreamDataSource);
      }
 catch (      IOException ioe) {
        exception=ioe;
      }
catch (      NoPlayerException npe) {
        exception=npe;
      }
      if (exception != null)       logger.error("Failed to create player for new receive stream " + receiveStream,exception);
 else {
        if (playerControllerListener == null)         playerControllerListener=new ControllerListener(){
          /** 
 * Notifies this <tt>ControllerListener</tt> that
 * the <tt>Controller</tt> which it is registered
 * with has generated an event.
 * @param event the <tt>ControllerEvent</tt>
 * specifying the <tt>Controller</tt> which is the
 * source of the event and the very type of the
 * event
 * @see ControllerListener#controllerUpdate(ControllerEvent)
 */
          public void controllerUpdate(          ControllerEvent event){
            playerControllerUpdate(event);
          }
        }
;
        player.addControllerListener(playerControllerListener);
        player.realize();
        players.put(receiveStreamDataSource,player);
      }
    }
  }
}
