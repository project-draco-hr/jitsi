{
  int LBRRRate_thres_bps;
  int k, fs_kHz, ret=0;
  float frac;
  int[] rateTable;
  fs_kHz=psEnc.sCmn.fs_kHz;
  if (API_fs_Hz == 8000 || fs_kHz == 0 || API_fs_Hz < fs_kHz * 1000 || fs_kHz > max_internal_fs_kHz) {
    fs_kHz=Math.min(API_fs_Hz / 1000,max_internal_fs_kHz);
  }
 else {
    psEnc.sCmn.bitrateDiff+=InputFramesize_ms * (TargetRate_bps - psEnc.sCmn.bitrate_threshold_down);
    psEnc.sCmn.bitrateDiff=Math.min(psEnc.sCmn.bitrateDiff,0);
    if (psEnc.speech_activity < 0.5f && psEnc.sCmn.nFramesInPayloadBuf == 0) {
      if (Silk_define.SWITCH_TRANSITION_FILTERING != 0) {
        if ((psEnc.sCmn.sLP.transition_frame_no == 0) && (psEnc.sCmn.bitrateDiff <= -Silk_define.ACCUM_BITS_DIFF_THRESHOLD || (psEnc.sCmn.sSWBdetect.WB_detected * psEnc.sCmn.fs_kHz == 24))) {
          psEnc.sCmn.sLP.transition_frame_no=1;
          psEnc.sCmn.sLP.mode=0;
        }
 else         if ((psEnc.sCmn.sLP.transition_frame_no >= Silk_define.TRANSITION_FRAMES_DOWN) && (psEnc.sCmn.sLP.mode == 0)) {
          psEnc.sCmn.sLP.transition_frame_no=0;
          psEnc.sCmn.bitrateDiff=0;
          if (psEnc.sCmn.fs_kHz == 24) {
            fs_kHz=16;
          }
 else           if (psEnc.sCmn.fs_kHz == 16) {
            fs_kHz=12;
          }
 else {
            assert(psEnc.sCmn.fs_kHz == 12);
            fs_kHz=8;
          }
        }
      }
 else {
        if (psEnc.sCmn.bitrateDiff <= -Silk_define.ACCUM_BITS_DIFF_THRESHOLD) {
          psEnc.sCmn.bitrateDiff=0;
          if (psEnc.sCmn.fs_kHz == 24) {
            fs_kHz=16;
          }
 else           if (psEnc.sCmn.fs_kHz == 16) {
            fs_kHz=12;
          }
 else {
            assert(psEnc.sCmn.fs_kHz == 12);
            fs_kHz=8;
          }
        }
      }
      if (Silk_define.SWITCH_TRANSITION_FILTERING != 0) {
        if (((psEnc.sCmn.fs_kHz * 1000 < API_fs_Hz) && (TargetRate_bps >= psEnc.sCmn.bitrate_threshold_up) && (psEnc.sCmn.sSWBdetect.WB_detected * psEnc.sCmn.fs_kHz != 16)) && ((psEnc.sCmn.fs_kHz == 16) && (max_internal_fs_kHz >= 24) || (psEnc.sCmn.fs_kHz == 12) && (max_internal_fs_kHz >= 16) || (psEnc.sCmn.fs_kHz == 8) && (max_internal_fs_kHz >= 12)) && (psEnc.sCmn.sLP.transition_frame_no == 0)) {
          psEnc.sCmn.sLP.mode=1;
          psEnc.sCmn.bitrateDiff=0;
          if (psEnc.sCmn.fs_kHz == 8) {
            fs_kHz=12;
          }
 else           if (psEnc.sCmn.fs_kHz == 12) {
            fs_kHz=16;
          }
 else {
            assert(psEnc.sCmn.fs_kHz == 16);
            fs_kHz=24;
          }
        }
      }
 else {
        if (((psEnc.sCmn.fs_kHz * 1000 < API_fs_Hz) && (TargetRate_bps >= psEnc.sCmn.bitrate_threshold_up) && (psEnc.sCmn.sSWBdetect.WB_detected * psEnc.sCmn.fs_kHz != 16)) && ((psEnc.sCmn.fs_kHz == 16) && (max_internal_fs_kHz >= 24) || (psEnc.sCmn.fs_kHz == 12) && (max_internal_fs_kHz >= 16) || (psEnc.sCmn.fs_kHz == 8) && (max_internal_fs_kHz >= 12))) {
          psEnc.sCmn.bitrateDiff=0;
          if (psEnc.sCmn.fs_kHz == 8) {
            fs_kHz=12;
          }
 else           if (psEnc.sCmn.fs_kHz == 12) {
            fs_kHz=16;
          }
 else {
            assert(psEnc.sCmn.fs_kHz == 16);
            fs_kHz=24;
          }
        }
      }
    }
  }
  if (Silk_define.SWITCH_TRANSITION_FILTERING != 0) {
    if ((psEnc.sCmn.sLP.mode == 1) && (psEnc.sCmn.sLP.transition_frame_no >= Silk_define.TRANSITION_FRAMES_UP) && (psEnc.speech_activity < 0.5f)&& (psEnc.sCmn.nFramesInPayloadBuf == 0)) {
      psEnc.sCmn.sLP.transition_frame_no=0;
      Arrays.fill(psEnc.sCmn.sLP.In_LP_State,0,2,0);
    }
  }
  if (psEnc.sCmn.fs_kHz != fs_kHz || psEnc.sCmn.prev_API_fs_Hz != API_fs_Hz) {
    short[] x_buf_API_fs_Hz=new short[(Silk_define.MAX_API_FS_KHZ / 8) * (2 * Silk_define.MAX_FRAME_LENGTH + Silk_define.LA_SHAPE_MAX)];
    short[] x_bufFIX=new short[2 * Silk_define.MAX_FRAME_LENGTH + Silk_define.LA_SHAPE_MAX];
    int nSamples_temp=2 * psEnc.sCmn.frame_length + psEnc.sCmn.la_shape;
    Silk_SigProc_FLP.SKP_float2short_array(x_bufFIX,0,psEnc.x_buf,0,2 * Silk_define.MAX_FRAME_LENGTH + Silk_define.LA_SHAPE_MAX);
    if (fs_kHz * 1000 < API_fs_Hz && psEnc.sCmn.fs_kHz != 0) {
      SKP_Silk_resampler_state_struct temp_resampler_state=new SKP_Silk_resampler_state_struct();
      ret+=Silk_resampler.SKP_Silk_resampler_init(temp_resampler_state,psEnc.sCmn.fs_kHz * 1000,API_fs_Hz);
      ret+=Silk_resampler.SKP_Silk_resampler(temp_resampler_state,x_buf_API_fs_Hz,0,x_bufFIX,0,nSamples_temp);
      nSamples_temp=(nSamples_temp * API_fs_Hz) / (psEnc.sCmn.fs_kHz * 1000);
      ret+=Silk_resampler.SKP_Silk_resampler_init(psEnc.sCmn.resampler_state,API_fs_Hz,fs_kHz * 1000);
    }
 else {
      System.arraycopy(x_bufFIX,0,x_buf_API_fs_Hz,0,nSamples_temp);
    }
    if (1000 * fs_kHz != API_fs_Hz) {
      ret+=Silk_resampler.SKP_Silk_resampler(psEnc.sCmn.resampler_state,x_bufFIX,0,x_buf_API_fs_Hz,0,nSamples_temp);
    }
    Silk_SigProc_FLP.SKP_short2float_array(psEnc.x_buf,0,x_bufFIX,0,2 * Silk_define.MAX_FRAME_LENGTH + Silk_define.LA_SHAPE_MAX);
  }
  psEnc.sCmn.prev_API_fs_Hz=API_fs_Hz;
  if (psEnc.sCmn.fs_kHz != fs_kHz) {
    psEnc.sShape.memZero();
    psEnc.sPrefilt.memZero();
    psEnc.sNSQ.memZero();
    psEnc.sPred.memZero();
    Arrays.fill(psEnc.sNSQ.xq,0,2 * Silk_define.MAX_FRAME_LENGTH,(short)0);
    Arrays.fill(psEnc.sNSQ_LBRR.xq,(short)0);
    for (int i=0; i < Silk_define.MAX_LBRR_DELAY; i++) {
      psEnc.sCmn.LBRR_buffer[i].memZero();
    }
    if (Silk_define.SWITCH_TRANSITION_FILTERING != 0) {
      Arrays.fill(psEnc.sCmn.sLP.In_LP_State,0,2,0);
      if (psEnc.sCmn.sLP.mode == 1) {
        psEnc.sCmn.sLP.transition_frame_no=1;
      }
 else {
        psEnc.sCmn.sLP.transition_frame_no=0;
      }
    }
    psEnc.sCmn.inputBufIx=0;
    psEnc.sCmn.nFramesInPayloadBuf=0;
    psEnc.sCmn.nBytesInPayloadBuf=0;
    psEnc.sCmn.oldest_LBRR_idx=0;
    psEnc.sCmn.TargetRate_bps=0;
    Arrays.fill(psEnc.sPred.prev_NLSFq,0,Silk_define.MAX_LPC_ORDER,0);
    psEnc.sCmn.prevLag=100;
    psEnc.sCmn.prev_sigtype=Silk_define.SIG_TYPE_UNVOICED;
    psEnc.sCmn.first_frame_after_reset=1;
    psEnc.sPrefilt.lagPrev=100;
    psEnc.sShape.LastGainIndex=1;
    psEnc.sNSQ.lagPrev=100;
    psEnc.sNSQ.prev_inv_gain_Q16=65536;
    psEnc.sNSQ_LBRR.prev_inv_gain_Q16=65536;
    psEnc.sCmn.fs_kHz=fs_kHz;
    if (psEnc.sCmn.fs_kHz == 8) {
      psEnc.sCmn.predictLPCOrder=Silk_define.MIN_LPC_ORDER;
      psEnc.sCmn.psNLSF_CB[0]=Silk_tables_NLSF_CB0_10.SKP_Silk_NLSF_CB0_10;
      psEnc.sCmn.psNLSF_CB[1]=Silk_tables_NLSF_CB1_10.SKP_Silk_NLSF_CB1_10;
      psEnc.psNLSF_CB_FLP[0]=Silk_tables_NLSF_CB0_10_FLP.SKP_Silk_NLSF_CB0_10_FLP;
      psEnc.psNLSF_CB_FLP[1]=Silk_tables_NLSF_CB1_10_FLP.SKP_Silk_NLSF_CB1_10_FLP;
    }
 else {
      psEnc.sCmn.predictLPCOrder=Silk_define.MAX_LPC_ORDER;
      psEnc.sCmn.psNLSF_CB[0]=Silk_tables_NLSF_CB0_16.SKP_Silk_NLSF_CB0_16;
      psEnc.sCmn.psNLSF_CB[1]=Silk_tables_NLSF_CB1_16.SKP_Silk_NLSF_CB1_16;
      psEnc.psNLSF_CB_FLP[0]=Silk_tables_NLSF_CB0_16_FLP.SKP_Silk_NLSF_CB0_16_FLP;
      psEnc.psNLSF_CB_FLP[1]=Silk_tables_NLSF_CB1_16_FLP.SKP_Silk_NLSF_CB1_16_FLP;
    }
    psEnc.sCmn.frame_length=Silk_define.FRAME_LENGTH_MS * fs_kHz;
    psEnc.sCmn.subfr_length=psEnc.sCmn.frame_length / Silk_define.NB_SUBFR;
    psEnc.sCmn.la_pitch=Silk_define.LA_PITCH_MS * fs_kHz;
    psEnc.sCmn.la_shape=Silk_define.LA_SHAPE_MS * fs_kHz;
    psEnc.sPred.min_pitch_lag=3 * fs_kHz;
    psEnc.sPred.max_pitch_lag=18 * fs_kHz;
    psEnc.sPred.pitch_LPC_win_length=Silk_define.FIND_PITCH_LPC_WIN_MS * fs_kHz;
    if (psEnc.sCmn.fs_kHz == 24) {
      psEnc.mu_LTP=Silk_define_FLP.MU_LTP_QUANT_SWB;
      psEnc.sCmn.bitrate_threshold_up=Silk_typedef.SKP_int32_MAX;
      psEnc.sCmn.bitrate_threshold_down=Silk_define.SWB2WB_BITRATE_BPS;
    }
 else     if (psEnc.sCmn.fs_kHz == 16) {
      psEnc.mu_LTP=Silk_define_FLP.MU_LTP_QUANT_WB;
      psEnc.sCmn.bitrate_threshold_up=Silk_define.WB2SWB_BITRATE_BPS;
      psEnc.sCmn.bitrate_threshold_down=Silk_define.WB2MB_BITRATE_BPS;
    }
 else     if (psEnc.sCmn.fs_kHz == 12) {
      psEnc.mu_LTP=Silk_define_FLP.MU_LTP_QUANT_MB;
      psEnc.sCmn.bitrate_threshold_up=Silk_define.MB2WB_BITRATE_BPS;
      psEnc.sCmn.bitrate_threshold_down=Silk_define.MB2NB_BITRATE_BPS;
    }
 else {
      psEnc.mu_LTP=Silk_define_FLP.MU_LTP_QUANT_NB;
      psEnc.sCmn.bitrate_threshold_up=Silk_define.NB2MB_BITRATE_BPS;
      psEnc.sCmn.bitrate_threshold_down=0;
    }
    psEnc.sCmn.fs_kHz_changed=1;
    assert((psEnc.sCmn.subfr_length * Silk_define.NB_SUBFR) == psEnc.sCmn.frame_length);
  }
  if (Silk_define.LOW_COMPLEXITY_ONLY != 0 && Complexity != 0) {
    ret=Silk_errors.SKP_SILK_ENC_INVALID_COMPLEXITY_SETTING;
  }
  if (Complexity == 0 || Silk_define.LOW_COMPLEXITY_ONLY != 0) {
    psEnc.sCmn.Complexity=0;
    psEnc.sCmn.pitchEstimationComplexity=Silk_define.PITCH_EST_COMPLEXITY_LC_MODE;
    psEnc.pitchEstimationThreshold=Silk_define_FLP.FIND_PITCH_CORRELATION_THRESHOLD_LC_MODE;
    psEnc.sCmn.pitchEstimationLPCOrder=8;
    psEnc.sCmn.shapingLPCOrder=12;
    psEnc.sCmn.nStatesDelayedDecision=1;
    psEnc.noiseShapingQuantizerCB=new NSQImplNSQ();
    psEnc.sCmn.useInterpolatedNLSFs=0;
    psEnc.sCmn.LTPQuantLowComplexity=1;
    psEnc.sCmn.NLSF_MSVQ_Survivors=Silk_define.MAX_NLSF_MSVQ_SURVIVORS_LC_MODE;
  }
 else   if (Complexity == 1) {
    psEnc.sCmn.Complexity=1;
    psEnc.sCmn.pitchEstimationComplexity=Silk_define.PITCH_EST_COMPLEXITY_MC_MODE;
    psEnc.pitchEstimationThreshold=Silk_define_FLP.FIND_PITCH_CORRELATION_THRESHOLD_MC_MODE;
    psEnc.sCmn.pitchEstimationLPCOrder=12;
    psEnc.sCmn.shapingLPCOrder=16;
    psEnc.sCmn.nStatesDelayedDecision=2;
    psEnc.noiseShapingQuantizerCB=new NSQImplNSQDelDec();
    psEnc.sCmn.useInterpolatedNLSFs=0;
    psEnc.sCmn.LTPQuantLowComplexity=0;
    psEnc.sCmn.NLSF_MSVQ_Survivors=Silk_define.MAX_NLSF_MSVQ_SURVIVORS_MC_MODE;
  }
 else   if (Complexity == 2) {
    psEnc.sCmn.Complexity=2;
    psEnc.sCmn.pitchEstimationComplexity=Silk_define.PITCH_EST_COMPLEXITY_HC_MODE;
    psEnc.pitchEstimationThreshold=Silk_define_FLP.FIND_PITCH_CORRELATION_THRESHOLD_HC_MODE;
    psEnc.sCmn.pitchEstimationLPCOrder=16;
    psEnc.sCmn.shapingLPCOrder=16;
    psEnc.sCmn.nStatesDelayedDecision=4;
    psEnc.noiseShapingQuantizerCB=new NSQImplNSQDelDec();
    psEnc.sCmn.useInterpolatedNLSFs=1;
    psEnc.sCmn.LTPQuantLowComplexity=0;
    psEnc.sCmn.NLSF_MSVQ_Survivors=Silk_define.MAX_NLSF_MSVQ_SURVIVORS;
  }
 else {
    ret=Silk_errors.SKP_SILK_ENC_INVALID_COMPLEXITY_SETTING;
  }
  psEnc.sCmn.pitchEstimationLPCOrder=Math.min(psEnc.sCmn.pitchEstimationLPCOrder,psEnc.sCmn.predictLPCOrder);
  assert(psEnc.sCmn.pitchEstimationLPCOrder <= Silk_define.FIND_PITCH_LPC_ORDER_MAX);
  assert(psEnc.sCmn.shapingLPCOrder <= Silk_define.SHAPE_LPC_ORDER_MAX);
  assert(psEnc.sCmn.nStatesDelayedDecision <= Silk_define.DEL_DEC_STATES_MAX);
  TargetRate_bps=Math.min(TargetRate_bps,100000);
  if (psEnc.sCmn.fs_kHz == 8) {
    TargetRate_bps=Math.max(TargetRate_bps,Silk_define.MIN_TARGET_RATE_NB_BPS);
  }
 else   if (psEnc.sCmn.fs_kHz == 12) {
    TargetRate_bps=Math.max(TargetRate_bps,Silk_define.MIN_TARGET_RATE_MB_BPS);
  }
 else   if (psEnc.sCmn.fs_kHz == 16) {
    TargetRate_bps=Math.max(TargetRate_bps,Silk_define.MIN_TARGET_RATE_WB_BPS);
  }
 else {
    TargetRate_bps=Math.max(TargetRate_bps,Silk_define.MIN_TARGET_RATE_SWB_BPS);
  }
  if (TargetRate_bps != psEnc.sCmn.TargetRate_bps) {
    psEnc.sCmn.TargetRate_bps=TargetRate_bps;
    if (psEnc.sCmn.fs_kHz == 8) {
      rateTable=Silk_tables_other.TargetRate_table_NB;
    }
 else     if (psEnc.sCmn.fs_kHz == 12) {
      rateTable=Silk_tables_other.TargetRate_table_MB;
    }
 else     if (psEnc.sCmn.fs_kHz == 16) {
      rateTable=Silk_tables_other.TargetRate_table_WB;
    }
 else {
      rateTable=Silk_tables_other.TargetRate_table_SWB;
    }
    for (k=1; k < Silk_define.TARGET_RATE_TAB_SZ; k++) {
      if (TargetRate_bps < rateTable[k]) {
        frac=(float)(TargetRate_bps - rateTable[k - 1]) / (float)(rateTable[k] - rateTable[k - 1]);
        psEnc.SNR_dB=0.5f * (Silk_tables_other.SNR_table_Q1[k - 1] + frac * (Silk_tables_other.SNR_table_Q1[k] - Silk_tables_other.SNR_table_Q1[k - 1]));
        break;
      }
    }
  }
  if ((PacketSize_ms != 20) && (PacketSize_ms != 40) && (PacketSize_ms != 60)&& (PacketSize_ms != 80)&& (PacketSize_ms != 100)) {
    ret=Silk_errors.SKP_SILK_ENC_PACKET_SIZE_NOT_SUPPORTED;
  }
 else {
    if (PacketSize_ms != psEnc.sCmn.PacketSize_ms) {
      psEnc.sCmn.PacketSize_ms=PacketSize_ms;
      Silk_LBRR_reset.SKP_Silk_LBRR_reset(psEnc.sCmn);
    }
  }
  if ((PacketLoss_perc < 0) || (PacketLoss_perc > 100)) {
    ret=Silk_errors.SKP_SILK_ENC_INVALID_LOSS_RATE;
  }
  psEnc.sCmn.PacketLoss_perc=PacketLoss_perc;
  if (Silk_define.USE_LBRR != 0) {
    if (INBandFEC_enabled < 0 || INBandFEC_enabled > 1) {
      ret=Silk_errors.SKP_SILK_ENC_INVALID_INBAND_FEC_SETTING;
    }
    if (psEnc.sCmn.nFramesInPayloadBuf == 0) {
      psEnc.sCmn.LBRR_enabled=INBandFEC_enabled;
      if (psEnc.sCmn.fs_kHz == 8) {
        LBRRRate_thres_bps=Silk_define.INBAND_FEC_MIN_RATE_BPS - 9000;
      }
 else       if (psEnc.sCmn.fs_kHz == 12) {
        LBRRRate_thres_bps=Silk_define.INBAND_FEC_MIN_RATE_BPS - 6000;
        ;
      }
 else       if (psEnc.sCmn.fs_kHz == 16) {
        LBRRRate_thres_bps=Silk_define.INBAND_FEC_MIN_RATE_BPS - 3000;
      }
 else {
        LBRRRate_thres_bps=Silk_define.INBAND_FEC_MIN_RATE_BPS;
      }
      if (psEnc.sCmn.TargetRate_bps >= LBRRRate_thres_bps) {
        psEnc.sCmn.LBRR_GainIncreases=Math.max(8 - (psEnc.sCmn.PacketLoss_perc >> 1),0);
        if (psEnc.sCmn.LBRR_enabled != 0 && psEnc.sCmn.PacketLoss_perc > Silk_define.LBRR_LOSS_THRES) {
          psEnc.inBandFEC_SNR_comp=6.0f - 0.5f * psEnc.sCmn.LBRR_GainIncreases;
        }
 else {
          psEnc.inBandFEC_SNR_comp=0;
          psEnc.sCmn.LBRR_enabled=0;
        }
      }
 else {
        psEnc.inBandFEC_SNR_comp=0;
        psEnc.sCmn.LBRR_enabled=0;
      }
    }
  }
 else {
    if (INBandFEC_enabled != 0) {
      ret=Silk_errors.SKP_SILK_ENC_INVALID_INBAND_FEC_SETTING;
    }
    psEnc.sCmn.LBRR_enabled=0;
  }
  if (DTX_enabled < 0 || DTX_enabled > 1) {
    ret=Silk_errors.SKP_SILK_ENC_INVALID_DTX_SETTING;
  }
  psEnc.sCmn.useDTX=DTX_enabled;
  return ret;
}
