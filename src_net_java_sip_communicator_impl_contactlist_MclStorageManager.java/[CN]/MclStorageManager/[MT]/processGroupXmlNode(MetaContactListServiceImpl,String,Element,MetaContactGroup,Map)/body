{
  MetaContactGroupImpl currentMetaGroup=null;
  Map protoGroupsMap=new Hashtable();
  if (parentGroup == null) {
    currentMetaGroup=mclServiceImpl.rootMetaGroup;
  }
 else {
    String groupMetaUID=XMLUtils.getAttribute(groupNode,GROUP_UID_ATTR_NAME);
    String groupDisplayName=XMLUtils.getAttribute(groupNode,GROUP_NAME_ATTR_NAME);
    currentMetaGroup=mclServiceImpl.loadStoredMetaContactGroup(parentGroup,groupMetaUID,groupDisplayName);
    Node protoGroupsNode=XMLUtils.findChild(groupNode,PROTO_GROUPS_NODE_NAME);
    NodeList protoGroups=protoGroupsNode.getChildNodes();
    for (int i=0; i < protoGroups.getLength(); i++) {
      Node currentProtoGroupNode=protoGroups.item(i);
      if (currentProtoGroupNode.getNodeType() != Node.ELEMENT_NODE)       continue;
      String groupAccountID=XMLUtils.getAttribute(currentProtoGroupNode,ACCOUNT_ID_ATTR_NAME);
      if (!accountID.equals(groupAccountID))       continue;
      String protoGroupUID=XMLUtils.getAttribute(currentProtoGroupNode,UID_ATTR_NAME);
      String parentProtoGroupUID=XMLUtils.getAttribute(currentProtoGroupNode,PARENT_PROTO_GROUP_UID_ATTR_NAME);
      Element persistentDataNode=XMLUtils.findChild((Element)currentProtoGroupNode,PERSISTENT_DATA_NODE_NAME);
      String persistentData="";
      if (persistentDataNode != null) {
        persistentData=XMLUtils.getText(persistentDataNode);
      }
      ContactGroup parentProtoGroup=null;
      if (parentProtoGroups != null && parentProtoGroups.size() > 0)       parentProtoGroup=(ContactGroup)parentProtoGroups.get(parentProtoGroupUID);
      ContactGroup newProtoGroup=mclServiceImpl.loadStoredContactGroup(currentMetaGroup,protoGroupUID,parentProtoGroup,persistentData,accountID);
      protoGroupsMap.put(protoGroupUID,newProtoGroup);
    }
    if (protoGroupsMap.size() == 0)     return;
  }
  Node childContactsNode=XMLUtils.findChild(groupNode,CHILD_CONTACTS_NODE_NAME);
  NodeList childContacts=(childContactsNode == null) ? null : childContactsNode.getChildNodes();
  for (int i=0; childContacts != null && i < childContacts.getLength(); i++) {
    Node currentMetaContactNode=childContacts.item(i);
    if (currentMetaContactNode.getNodeType() != Node.ELEMENT_NODE)     continue;
    try {
      String uid=XMLUtils.getAttribute(currentMetaContactNode,UID_ATTR_NAME);
      Element displayNameNode=XMLUtils.findChild((Element)currentMetaContactNode,META_CONTACT_DISPLAY_NAME_NODE_NAME);
      String displayName=XMLUtils.getText(displayNameNode);
      List protoContacts=extractProtoContacts((Element)currentMetaContactNode,accountID,protoGroupsMap);
      if (protoContacts.size() < 1)       continue;
      Hashtable details=new Hashtable();
      try {
        List detailsNodes=XMLUtils.findChildren((Element)currentMetaContactNode,META_CONTACT_DETAIL_NAME_NODE_NAME);
        for (int j=0; j < detailsNodes.size(); j++) {
          Element e=(Element)detailsNodes.get(j);
          String name=e.getAttribute(DETAIL_NAME_ATTR_NAME);
          String value=e.getAttribute(DETAIL_VALUE_ATTR_NAME);
          Object detailsObj=details.get(name);
          if (detailsObj == null)           details.put(name,value);
 else           if (detailsObj instanceof List)           ((List)detailsObj).add(value);
 else           if (detailsObj instanceof String) {
            ArrayList ds=new ArrayList();
            ds.add(detailsObj);
            ds.add(value);
            details.put(name,ds);
          }
        }
      }
 catch (      Exception ex) {
        logger.error("Cannot load details for contact node " + currentMetaContactNode,ex);
      }
      mclServiceImpl.loadStoredMetaContact(currentMetaGroup,uid,displayName,details,protoContacts,accountID);
    }
 catch (    Throwable thr) {
      logger.warn("Failed to parse meta contact " + currentMetaContactNode + ". Will remove and continue with other contacts",thr);
      if (currentMetaContactNode != null && currentMetaContactNode.getParentNode() != null) {
        try {
          currentMetaContactNode.getParentNode().removeChild(currentMetaContactNode);
        }
 catch (        Throwable throwable) {
          logger.error("Failed to remove meta contact node " + currentMetaContactNode,throwable);
        }
      }
    }
  }
  Node subgroupsNode=XMLUtils.findChild(groupNode,SUBGROUPS_NODE_NAME);
  if (subgroupsNode == null)   return;
  NodeList subgroups=subgroupsNode.getChildNodes();
  for (int i=0; i < subgroups.getLength(); i++) {
    Node currentGroupNode=subgroups.item(i);
    if (currentGroupNode.getNodeType() != Node.ELEMENT_NODE || !currentGroupNode.getNodeName().equals(GROUP_NODE_NAME))     continue;
    try {
      processGroupXmlNode(mclServiceImpl,accountID,(Element)currentGroupNode,currentMetaGroup,protoGroupsMap);
    }
 catch (    Throwable throwable) {
      logger.error("Failed to process group node " + currentGroupNode + ". Removing.",throwable);
      if (currentGroupNode != null && currentGroupNode.getParentNode() != null) {
        try {
          currentGroupNode.getParentNode().removeChild(currentGroupNode);
        }
 catch (        Throwable thr) {
          logger.error("Failed to remove group node " + currentGroupNode,thr);
        }
      }
    }
  }
}
