{
  this.remove(chatButton);
  this.remove(callButton);
  this.remove(callVideoButton);
  this.remove(desktopSharingButton);
  this.remove(addContactButton);
  clearCustomActionButtons();
  if (!isSelected)   return;
  UIContactDetail imContact=null;
  if (uiContact.getDescriptor() instanceof MetaContact)   imContact=uiContact.getDefaultContactDetail(OperationSetBasicInstantMessaging.class);
  int x=(statusIcon == null ? 0 : statusIcon.getIconWidth()) + LEFT_BORDER + H_GAP;
  constraints.gridx=0;
  int gridX=0;
  if (imContact != null) {
    x+=addButton(chatButton,++gridX,x,false);
  }
  UIContactDetail telephonyContact=uiContact.getDefaultContactDetail(OperationSetBasicTelephony.class);
  ContactPhoneUtil contactPhoneUtil=null;
  if (uiContact.getDescriptor() != null && uiContact.getDescriptor() instanceof MetaContact && telephonyContact == null) {
    contactPhoneUtil=ContactPhoneUtil.getPhoneUtil((MetaContact)uiContact.getDescriptor());
    MetaContact metaContact=(MetaContact)uiContact.getDescriptor();
    Iterator<Contact> contacts=metaContact.getContacts();
    while (contacts.hasNext()) {
      Contact contact=contacts.next();
      if (!contact.getProtocolProvider().isRegistered())       continue;
      contactPhoneUtil.addDetailsResponseListener(contact,new DetailsListener(treeNode,callButton,uiContact));
    }
  }
  List<ProtocolProviderService> providers=AccountUtils.getOpSetRegisteredProviders(OperationSetBasicTelephony.class,null,null);
  if ((telephonyContact != null && telephonyContact.getAddress() != null) || (contactPhoneUtil != null && contactPhoneUtil.isCallEnabled() && providers.size() > 0)) {
    x+=addButton(callButton,++gridX,x,false);
  }
  UIContactDetail videoContact=uiContact.getDefaultContactDetail(OperationSetVideoTelephony.class);
  if (videoContact != null || (contactPhoneUtil != null && contactPhoneUtil.isVideoCallEnabled())) {
    x+=addButton(callVideoButton,++gridX,x,false);
  }
  UIContactDetail desktopContact=uiContact.getDefaultContactDetail(OperationSetDesktopSharingServer.class);
  if (desktopContact != null || (contactPhoneUtil != null && contactPhoneUtil.isDesktopSharingEnabled())) {
    x+=addButton(desktopSharingButton,++gridX,x,false);
  }
  if (uiContact.getDescriptor() instanceof SourceContact && uiContact.getDefaultContactDetail(OperationSetPersistentPresence.class) != null && AccountUtils.getOpSetRegisteredProviders(OperationSetPersistentPresence.class,null,null).size() > 0 && !ConfigurationUtils.isAddContactDisabled()) {
    x+=addButton(addContactButton,++gridX,x,false);
  }
  Collection<SIPCommButton> contactActions=uiContact.getContactCustomActionButtons();
  if (contactActions != null && contactActions.size() > 0) {
    initContactActionButtons(contactActions,++gridX,x);
  }
 else {
    addLabels(gridX);
  }
  if (lastAddedButton != null)   setButtonBg(lastAddedButton,gridX,true);
  this.setBounds(0,0,treeContactList.getWidth(),getPreferredSize().height);
}
