{
  this.remove(chatButton);
  this.remove(callButton);
  this.remove(callVideoButton);
  this.remove(desktopSharingButton);
  this.remove(addContactButton);
  this.remove(webButton);
  clearCustomActionButtons();
  if (!isSelected)   return;
  UIContactDetail imContact=null;
  if (uiContact.getDescriptor() instanceof MetaContact)   imContact=uiContact.getDefaultContactDetail(OperationSetBasicInstantMessaging.class);
  if (imContact == null)   imContact=uiContact.getDefaultContactDetail(OperationSetMultiUserChat.class);
  int x=(statusIcon == null ? 0 : statusIcon.getIconWidth()) + LEFT_BORDER + H_GAP;
  constraints.gridx=0;
  int gridX=0;
  if (imContact != null) {
    x+=addButton(chatButton,++gridX,x,false);
  }
  UIContactDetail telephonyContact=uiContact.getDefaultContactDetail(OperationSetBasicTelephony.class);
  MetaContactPhoneUtil contactPhoneUtil=null;
  DetailsResponseListener detailsListener=null;
  if (uiContact.getDescriptor() != null && uiContact.getDescriptor() instanceof MetaContact && telephonyContact == null) {
    contactPhoneUtil=MetaContactPhoneUtil.getPhoneUtil((MetaContact)uiContact.getDescriptor());
    detailsListener=new DetailsListener(treeNode,callButton,uiContact);
  }
  List<ProtocolProviderService> providers=AccountUtils.getOpSetRegisteredProviders(OperationSetBasicTelephony.class,null,null);
  if ((telephonyContact != null && telephonyContact.getAddress() != null) || (contactPhoneUtil != null && contactPhoneUtil.isCallEnabled(detailsListener) && providers.size() > 0)) {
    x+=addButton(callButton,++gridX,x,false);
  }
  UIContactDetail videoContact=uiContact.getDefaultContactDetail(OperationSetVideoTelephony.class);
  if (videoContact != null || (contactPhoneUtil != null && contactPhoneUtil.isVideoCallEnabled(detailsListener))) {
    x+=addButton(callVideoButton,++gridX,x,false);
  }
  UIContactDetail desktopContact=uiContact.getDefaultContactDetail(OperationSetDesktopSharingServer.class);
  if (desktopContact != null || (contactPhoneUtil != null && contactPhoneUtil.isDesktopSharingEnabled(detailsListener))) {
    x+=addButton(desktopSharingButton,++gridX,x,false);
  }
  if (uiContact.getDescriptor() instanceof SourceContact && uiContact.getDefaultContactDetail(OperationSetPersistentPresence.class) != null && AccountUtils.getOpSetRegisteredProviders(OperationSetPersistentPresence.class,null,null).size() > 0 && !ConfigurationUtils.isAddContactDisabled()) {
    x+=addButton(addContactButton,++gridX,x,false);
  }
  if (uiContact.getDescriptor() instanceof MetaContact) {
    WebDetailsListener webDetailsListener=new WebDetailsListener(treeNode,webButton,uiContact);
    List<WebPageDetail> dets=getWebPageDetails(uiContact,webDetailsListener,true);
    if (dets != null && dets.size() > 0) {
      x+=addButton(webButton,++gridX,x,false);
      webButton.setLinks(dets);
    }
 else     webButton.setLinks(null);
  }
  Collection<SIPCommButton> contactActions=uiContact.getContactCustomActionButtons();
  int lastGridX=gridX;
  if (contactActions != null && contactActions.size() > 0) {
    lastGridX=initContactActionButtons(contactActions,gridX,x);
  }
 else {
    addLabels(gridX);
  }
  if (lastAddedButton != null)   setButtonBg(lastAddedButton,lastGridX,true);
  this.setBounds(0,0,treeContactList.getWidth(),getPreferredSize().height);
}
