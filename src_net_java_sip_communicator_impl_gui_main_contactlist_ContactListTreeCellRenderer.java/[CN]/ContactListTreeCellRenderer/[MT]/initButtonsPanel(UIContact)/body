{
  this.remove(chatButton);
  this.remove(callButton);
  this.remove(callVideoButton);
  this.remove(desktopSharingButton);
  this.remove(addContactButton);
  if (customActionButtons != null && customActionButtons.size() > 0) {
    Iterator<JButton> buttonsIter=customActionButtons.iterator();
    while (buttonsIter.hasNext()) {
      remove(buttonsIter.next());
    }
    customActionButtons.clear();
  }
  if (!isSelected)   return;
  UIContactDetail imContact=null;
  if (uiContact.getDescriptor() instanceof MetaContact)   imContact=uiContact.getDefaultContactDetail(OperationSetBasicInstantMessaging.class);
  int x=(statusIcon == null ? 0 : statusIcon.getIconWidth()) + LEFT_BORDER + H_GAP;
  constraints.gridx=0;
  int gridX=0;
  if (imContact != null) {
    x+=addButton(chatButton,++gridX,x,false);
  }
  UIContactDetail telephonyContact=uiContact.getDefaultContactDetail(OperationSetBasicTelephony.class);
  boolean hasPhone=false;
  if (uiContact.getDescriptor() != null && uiContact.getDescriptor() instanceof MetaContact && telephonyContact == null) {
    MetaContact metaContact=(MetaContact)uiContact.getDescriptor();
    Iterator<Contact> contacts=metaContact.getContacts();
    while (contacts.hasNext() && !hasPhone) {
      Contact contact=contacts.next();
      if (!contact.getProtocolProvider().isRegistered())       continue;
      OperationSetServerStoredContactInfo infoOpSet=contact.getProtocolProvider().getOperationSet(OperationSetServerStoredContactInfo.class);
      Iterator<GenericDetail> details;
      if (infoOpSet != null) {
        details=infoOpSet.requestAllDetailsForContact(contact,new DetailsListener(treeNode,callButton,uiContact));
        if (details != null) {
          while (details.hasNext()) {
            GenericDetail d=details.next();
            if (d instanceof PhoneNumberDetail && !(d instanceof PagerDetail) && !(d instanceof FaxDetail)) {
              PhoneNumberDetail pnd=(PhoneNumberDetail)d;
              if (pnd.getNumber() != null && pnd.getNumber().length() > 0) {
                hasPhone=true;
                break;
              }
            }
          }
        }
      }
    }
  }
  List<ProtocolProviderService> providers=GuiActivator.getOpSetRegisteredProviders(OperationSetBasicTelephony.class,null,null);
  if ((telephonyContact != null && telephonyContact.getAddress() != null) || (hasPhone && providers.size() > 0)) {
    x+=addButton(callButton,++gridX,x,false);
  }
  UIContactDetail videoContact=uiContact.getDefaultContactDetail(OperationSetVideoTelephony.class);
  if (videoContact != null || (ConfigurationUtils.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && hasPhone && GuiActivator.getOpSetRegisteredProviders(OperationSetVideoTelephony.class,null,null).size() > 0)) {
    x+=addButton(callVideoButton,++gridX,x,false);
  }
  UIContactDetail desktopContact=uiContact.getDefaultContactDetail(OperationSetDesktopSharingServer.class);
  if (desktopContact != null || (ConfigurationUtils.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && hasPhone && GuiActivator.getOpSetRegisteredProviders(OperationSetDesktopSharingServer.class,null,null).size() > 0)) {
    x+=addButton(desktopSharingButton,++gridX,x,false);
  }
  if (uiContact.getDescriptor() instanceof SourceContact && uiContact.getDefaultContactDetail(OperationSetPersistentPresence.class) != null && GuiActivator.getOpSetRegisteredProviders(OperationSetPersistentPresence.class,null,null).size() > 0 && !ConfigurationUtils.isAddContactDisabled()) {
    x+=addButton(addContactButton,++gridX,x,false);
  }
  Collection<SIPCommButton> contactActions=uiContact.getContactCustomActionButtons();
  if (contactActions != null && contactActions.size() > 0) {
    initContactActionButtons(contactActions,++gridX,x);
  }
 else {
    addLabels(gridX);
  }
  if (lastAddedButton != null)   setButtonBg(lastAddedButton,gridX,true);
  this.setBounds(0,0,treeContactList.getWidth(),getPreferredSize().height);
}
