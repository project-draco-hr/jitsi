{
  this.remove(chatButton);
  this.remove(callButton);
  this.remove(callVideoButton);
  this.remove(desktopSharingButton);
  this.remove(addContactButton);
  if (customActionButtons != null && customActionButtons.size() > 0) {
    Iterator<JButton> buttonsIter=customActionButtons.iterator();
    while (buttonsIter.hasNext()) {
      remove(buttonsIter.next());
    }
    customActionButtons.clear();
  }
  if (!isSelected)   return;
  int statusMessageLabelHeight=0;
  if (displayDetailsLabel.getText().length() > 0)   statusMessageLabelHeight=20;
 else   statusMessageLabelHeight=15;
  UIContactDetail imContact=null;
  if (uiContact.getDescriptor() instanceof MetaContact)   imContact=uiContact.getDefaultContactDetail(OperationSetBasicInstantMessaging.class);
  int x=(statusIcon == null ? 0 : statusIcon.getIconWidth()) + (statusLabel == null ? 0 : statusLabel.getIconTextGap()) + LEFT_BORDER+ STATUS_RIGHT_BORDER;
  constraints.gridx=0;
  if (imContact != null) {
    constraints.anchor=GridBagConstraints.WEST;
    constraints.fill=GridBagConstraints.NONE;
    constraints.gridx=1;
    constraints.gridy=2;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weightx=0f;
    constraints.weighty=0f;
    this.chatButton.setBorder(null);
    this.add(chatButton,constraints);
    chatButton.setBounds(x,nameLabel.getHeight() + statusMessageLabelHeight,28,28);
    x+=chatButton.getWidth();
  }
  UIContactDetail telephonyContact=uiContact.getDefaultContactDetail(OperationSetBasicTelephony.class);
  boolean hasPhone=false;
  if (uiContact.getDescriptor() != null && uiContact.getDescriptor() instanceof MetaContact && telephonyContact == null) {
    MetaContact metaContact=(MetaContact)uiContact.getDescriptor();
    Iterator<Contact> contacts=metaContact.getContacts();
    while (contacts.hasNext() && !hasPhone) {
      Contact contact=contacts.next();
      if (!contact.getProtocolProvider().isRegistered())       continue;
      OperationSetServerStoredContactInfo infoOpSet=contact.getProtocolProvider().getOperationSet(OperationSetServerStoredContactInfo.class);
      Iterator<GenericDetail> details;
      if (infoOpSet != null) {
        details=infoOpSet.requestAllDetailsForContact(contact,new DetailsListener(treeNode,callButton,uiContact));
        if (details != null) {
          while (details.hasNext()) {
            GenericDetail d=details.next();
            if (d instanceof PhoneNumberDetail && !(d instanceof PagerDetail) && !(d instanceof FaxDetail)) {
              PhoneNumberDetail pnd=(PhoneNumberDetail)d;
              if (pnd.getNumber() != null && pnd.getNumber().length() > 0) {
                hasPhone=true;
                break;
              }
            }
          }
        }
      }
    }
  }
  List<ProtocolProviderService> providers=GuiActivator.getOpSetRegisteredProviders(OperationSetBasicTelephony.class,null,null);
  if ((telephonyContact != null && telephonyContact.getAddress() != null) || uiContact.getDescriptor() instanceof SourceContact || (hasPhone && providers.size() > 0)) {
    constraints.anchor=GridBagConstraints.WEST;
    constraints.fill=GridBagConstraints.NONE;
    constraints.gridx=2;
    constraints.gridy=2;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weightx=0f;
    constraints.weighty=0f;
    this.callButton.setBorder(null);
    this.add(callButton,constraints);
    callButton.setBounds(x,nameLabel.getHeight() + statusMessageLabelHeight,28,28);
    callButton.setEnabled(telephonyContact != null || hasPhone);
    x+=callButton.getWidth();
  }
  UIContactDetail videoContact=uiContact.getDefaultContactDetail(OperationSetVideoTelephony.class);
  if (videoContact != null || (ConfigurationManager.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && hasPhone && GuiActivator.getOpSetRegisteredProviders(OperationSetVideoTelephony.class,null,null).size() > 0)) {
    constraints.anchor=GridBagConstraints.WEST;
    constraints.fill=GridBagConstraints.NONE;
    constraints.gridx=3;
    constraints.gridy=2;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weightx=0f;
    constraints.weighty=0f;
    this.callVideoButton.setBorder(null);
    this.add(callVideoButton,constraints);
    callVideoButton.setBounds(x,nameLabel.getHeight() + statusMessageLabelHeight,28,28);
    x+=callVideoButton.getWidth();
  }
  UIContactDetail desktopContact=uiContact.getDefaultContactDetail(OperationSetDesktopSharingServer.class);
  if (desktopContact != null || (ConfigurationManager.isRouteVideoAndDesktopUsingPhoneNumberEnabled() && hasPhone && GuiActivator.getOpSetRegisteredProviders(OperationSetDesktopSharingServer.class,null,null).size() > 0)) {
    constraints.anchor=GridBagConstraints.WEST;
    constraints.fill=GridBagConstraints.NONE;
    constraints.gridx=4;
    constraints.gridy=2;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weightx=0f;
    constraints.weighty=0f;
    this.desktopSharingButton.setBorder(null);
    this.add(desktopSharingButton,constraints);
    desktopSharingButton.setBounds(x,nameLabel.getHeight() + statusMessageLabelHeight,28,28);
    x+=desktopSharingButton.getWidth();
  }
  if (uiContact.getDescriptor() instanceof SourceContact && !ConfigurationManager.isAddContactDisabled()) {
    constraints.anchor=GridBagConstraints.WEST;
    constraints.fill=GridBagConstraints.NONE;
    constraints.gridx=5;
    constraints.gridy=2;
    constraints.gridwidth=1;
    constraints.gridheight=1;
    constraints.weightx=0f;
    constraints.weighty=0f;
    this.addContactButton.setBorder(null);
    this.add(addContactButton,constraints);
    addContactButton.setBounds(x,nameLabel.getHeight() + statusMessageLabelHeight,28,28);
    x+=addContactButton.getWidth();
  }
  Collection<SIPCommButton> contactActions=uiContact.getContactCustomActionButtons();
  if (contactActions != null) {
    initContactActionButtons(contactActions,constraints.gridx,x);
  }
  this.setBounds(0,0,tree.getWidth(),getPreferredSize().height);
}
