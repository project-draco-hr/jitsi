{
  this.treeContactList=(TreeContactList)tree;
  this.row=row;
  this.isSelected=selected;
  this.treeNode=(TreeNode)value;
  this.rightLabel.setIcon(null);
  DefaultTreeContactList contactList=(DefaultTreeContactList)tree;
  if (contactList instanceof TreeContactList) {
    ContactListFilter filter=((TreeContactList)contactList).getCurrentFilter();
    if (filter != null && filter.equals(TreeContactList.historyFilter) && value instanceof ContactNode && row % 2 == 0) {
      setBackground(Constants.CALL_HISTORY_EVEN_ROW_COLOR);
    }
 else {
      setBackground(Color.WHITE);
    }
  }
  if (value instanceof ContactNode) {
    UIContactImpl contact=((ContactNode)value).getContactDescriptor();
    String displayName=contact.getDisplayName();
    if ((displayName == null || displayName.trim().length() < 1) && !(contact instanceof ShowMoreContact)) {
      displayName=GuiActivator.getResources().getI18NString("service.gui.UNKNOWN");
    }
    this.nameLabel.setText(displayName);
    if (statusIcon != null && contactList.isContactActive(contact) && statusIcon instanceof ImageIcon)     ((ImageIcon)statusIcon).setImage(msgReceivedImage);
 else     statusIcon=contact.getStatusIcon();
    this.statusLabel.setIcon(statusIcon);
    this.nameLabel.setFont(this.getFont().deriveFont(Font.PLAIN));
    if (contactForegroundColor != null)     nameLabel.setForeground(contactForegroundColor);
    this.initDisplayDetails(contact.getDisplayDetails());
    if (this.treeContactList.isContactButtonsVisible())     this.initButtonsPanel(contact);
    int avatarWidth, avatarHeight;
    if (isSelected && treeContactList.isContactButtonsVisible()) {
      avatarWidth=EXTENDED_AVATAR_WIDTH;
      avatarHeight=EXTENDED_AVATAR_HEIGHT;
    }
 else {
      avatarWidth=AVATAR_WIDTH;
      avatarHeight=AVATAR_HEIGHT;
    }
    Icon avatar=contact.getAvatar(isSelected,avatarWidth,avatarHeight);
    if (avatar != null) {
      this.rightLabel.setIcon(avatar);
    }
    if (contact instanceof ShowMoreContact) {
      rightLabel.setFont(rightLabel.getFont().deriveFont(12f));
      rightLabel.setForeground(Color.GRAY);
      rightLabel.setText((String)contact.getDescriptor());
    }
 else {
      rightLabel.setFont(rightLabel.getFont().deriveFont(9f));
      rightLabel.setText("");
    }
    this.setToolTipText(contact.getDescriptor().toString());
  }
 else   if (value instanceof GroupNode) {
    UIGroupImpl groupItem=((GroupNode)value).getGroupDescriptor();
    this.nameLabel.setText(groupItem.getDisplayName());
    this.nameLabel.setFont(this.getFont().deriveFont(Font.BOLD));
    if (groupForegroundColor != null)     this.nameLabel.setForeground(groupForegroundColor);
    this.remove(displayDetailsLabel);
    this.remove(callButton);
    this.remove(callVideoButton);
    this.remove(desktopSharingButton);
    this.remove(chatButton);
    this.remove(addContactButton);
    if (customActionButtons != null && customActionButtons.size() > 0) {
      Iterator<JButton> buttonsIter=customActionButtons.iterator();
      while (buttonsIter.hasNext()) {
        remove(buttonsIter.next());
      }
      customActionButtons.clear();
    }
    this.statusLabel.setIcon(expanded ? openedGroupIcon : closedGroupIcon);
    this.rightLabel.setIcon(null);
    this.rightLabel.setText("");
    if (groupItem.countChildContacts() >= 0) {
      rightLabel.setFont(rightLabel.getFont().deriveFont(9f));
      this.rightLabel.setForeground(Color.BLACK);
      this.rightLabel.setText(groupItem.countOnlineChildContacts() + "/" + groupItem.countChildContacts());
    }
    this.initDisplayDetails(groupItem.getDisplayDetails());
    this.setToolTipText(groupItem.getDescriptor().toString());
  }
  return this;
}
