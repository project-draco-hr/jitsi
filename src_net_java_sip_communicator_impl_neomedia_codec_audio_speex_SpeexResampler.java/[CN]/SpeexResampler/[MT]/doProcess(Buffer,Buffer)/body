{
  Format inputFormat=inputBuffer.getFormat();
  if ((inputFormat != null) && (inputFormat != this.inputFormat) && !inputFormat.equals(this.inputFormat)) {
    if (null == setInputFormat(inputFormat))     return BUFFER_PROCESSED_FAILED;
  }
  inputFormat=this.inputFormat;
  AudioFormat inputAudioFormat=(AudioFormat)inputFormat;
  int inputSampleRate=(int)inputAudioFormat.getSampleRate();
  AudioFormat outputAudioFormat=(AudioFormat)getOutputFormat();
  int outputSampleRate=(int)outputAudioFormat.getSampleRate();
  if (inputSampleRate == outputSampleRate) {
    Class<?> inputDataType=inputAudioFormat.getDataType();
    Class<?> outputDataType=outputAudioFormat.getDataType();
    if (Format.byteArray.equals(inputDataType)) {
      byte[] input=(byte[])inputBuffer.getData();
      if (Format.byteArray.equals(outputDataType)) {
        int length=(input == null) ? 0 : input.length;
        byte[] output=validateByteArraySize(outputBuffer,length);
        if ((input != null) && (output != null))         System.arraycopy(input,0,output,0,length);
        outputBuffer.setFormat(inputBuffer.getFormat());
        outputBuffer.setLength(inputBuffer.getLength());
        outputBuffer.setOffset(inputBuffer.getOffset());
      }
 else {
        int inputLength=inputBuffer.getLength();
        int outputOffset=0;
        int outputLength=inputLength / 2;
        short[] output=validateShortArraySize(outputBuffer,outputLength);
        for (int i=inputBuffer.getOffset(), o=outputOffset; o < outputLength; o++) {
          output[o]=(short)(((input[i++] & 0xFF) | (input[i++] & 0xFF) << 8));
        }
        outputBuffer.setFormat(outputAudioFormat);
        outputBuffer.setLength(outputLength);
        outputBuffer.setOffset(outputOffset);
      }
    }
 else {
      short[] input=(short[])inputBuffer.getData();
      if (Format.byteArray.equals(outputDataType)) {
        int inputLength=inputBuffer.getLength();
        int outputOffset=0;
        int outputLength=inputLength * 2;
        byte[] output=validateByteArraySize(outputBuffer,outputLength);
        for (int i=inputBuffer.getOffset(), o=outputOffset; o < outputLength; i++) {
          short s=input[i];
          output[o++]=(byte)(s & 0x00FF);
          output[o++]=(byte)((s & 0xFF00) >>> 8);
        }
        outputBuffer.setFormat(outputAudioFormat);
        outputBuffer.setLength(outputLength);
        outputBuffer.setOffset(outputOffset);
      }
 else {
        int length=(input == null) ? 0 : input.length;
        short[] output=validateShortArraySize(outputBuffer,length);
        if ((input != null) && (output != null))         System.arraycopy(input,0,output,0,length);
        outputBuffer.setFormat(inputBuffer.getFormat());
        outputBuffer.setLength(inputBuffer.getLength());
        outputBuffer.setOffset(inputBuffer.getOffset());
      }
    }
  }
 else {
    if ((this.inputSampleRate != inputSampleRate) || (this.outputSampleRate != outputSampleRate)) {
      if (resampler == 0) {
        resampler=Speex.speex_resampler_init(1,inputSampleRate,outputSampleRate,Speex.SPEEX_RESAMPLER_QUALITY_VOIP,0);
      }
 else {
        Speex.speex_resampler_set_rate(resampler,inputSampleRate,outputSampleRate);
      }
      if (resampler != 0) {
        this.inputSampleRate=inputSampleRate;
        this.outputSampleRate=outputSampleRate;
      }
    }
    if (resampler == 0)     return BUFFER_PROCESSED_FAILED;
    byte[] input=(byte[])inputBuffer.getData();
    int inputLength=inputBuffer.getLength();
    int sampleSizeInBytes=inputAudioFormat.getSampleSizeInBits() / 8;
    int inputSampleCount=inputLength / sampleSizeInBytes;
    int outputLength=(inputLength * outputSampleRate) / inputSampleRate;
    byte[] output=validateByteArraySize(outputBuffer,outputLength);
    int outputSampleCount=outputLength / sampleSizeInBytes;
    outputSampleCount=Speex.speex_resampler_process_interleaved_int(resampler,input,inputBuffer.getOffset(),inputSampleCount,output,0,outputSampleCount);
    outputBuffer.setFormat(outputAudioFormat);
    outputBuffer.setLength(outputSampleCount * sampleSizeInBytes);
    outputBuffer.setOffset(0);
  }
  outputBuffer.setDuration(inputBuffer.getDuration());
  outputBuffer.setEOM(inputBuffer.isEOM());
  outputBuffer.setFlags(inputBuffer.getFlags());
  outputBuffer.setHeader(inputBuffer.getHeader());
  outputBuffer.setSequenceNumber(inputBuffer.getSequenceNumber());
  outputBuffer.setTimeStamp(inputBuffer.getTimeStamp());
  return BUFFER_PROCESSED_OK;
}
