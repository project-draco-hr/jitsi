{
  configService.addPropertyChangeListener(new ConfigurationChangeListener());
  String autoPopupProperty="service.gui.AUTO_POPUP_NEW_MESSAGE";
  String autoPopup=configService.getString(autoPopupProperty);
  if (autoPopup == null)   autoPopup=UtilActivator.getResources().getSettingsString(autoPopupProperty);
  if (autoPopup != null && autoPopup.equalsIgnoreCase("yes"))   autoPopupNewMessage=true;
  String messageCommandProperty="service.gui.SEND_MESSAGE_COMMAND";
  String messageCommand=configService.getString(messageCommandProperty);
  if (messageCommand == null)   messageCommand=UtilActivator.getResources().getSettingsString(messageCommandProperty);
  if (messageCommand == null || messageCommand.length() == 0)   sendMessageCommand=messageCommand;
  String callPanelShown=configService.getString("net.java.sip.communicator.impl.gui.showCallPanel");
  if (callPanelShown != null && callPanelShown.length() > 0) {
    isCallPanelShown=Boolean.parseBoolean(callPanelShown);
  }
  String showOffline=configService.getString("net.java.sip.communicator.impl.gui.showOffline");
  if (showOffline != null && showOffline.length() > 0) {
    isShowOffline=Boolean.parseBoolean(showOffline);
  }
  isApplicationVisible=configService.getBoolean("net.java.sip.communicator.impl.systray.showApplication",isApplicationVisible);
  String quitWarningShown=configService.getString("net.java.sip.communicator.impl.gui.quitWarningShown");
  if (quitWarningShown != null && quitWarningShown.length() > 0) {
    isQuitWarningShown=Boolean.parseBoolean(quitWarningShown);
  }
  String isSendTypingNotifProperty="service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED";
  String isSendTypingNotif=configService.getString(isSendTypingNotifProperty);
  if (isSendTypingNotif == null)   isSendTypingNotif=UtilActivator.getResources().getSettingsString(isSendTypingNotifProperty);
  if (isSendTypingNotif != null && isSendTypingNotif.length() > 0) {
    isSendTypingNotifications=Boolean.parseBoolean(isSendTypingNotif);
  }
  String isMoveContactConfirmationRequestedString=configService.getString("net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested");
  if (isMoveContactConfirmationRequestedString != null && isMoveContactConfirmationRequestedString.length() > 0) {
    isMoveContactConfirmationRequested=Boolean.parseBoolean(isMoveContactConfirmationRequestedString);
  }
  String isMultiChatWindowEnabledStringProperty="service.gui.IS_MULTI_CHAT_WINDOW_ENABLED";
  String isMultiChatWindowEnabledString=configService.getString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString == null)   isMultiChatWindowEnabledString=UtilActivator.getResources().getSettingsString(isMultiChatWindowEnabledStringProperty);
  if (isMultiChatWindowEnabledString != null && isMultiChatWindowEnabledString.length() > 0) {
    isMultiChatWindowEnabled=Boolean.parseBoolean(isMultiChatWindowEnabledString);
  }
  isPrivateMessagingInChatRoomDisabled=configService.getBoolean("service.gui.IS_PRIVATE_CHAT_IN_CHATROOM_DISABLED",false);
  String isLeaveChatRoomOnWindowCloseEnabledStringProperty="service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE";
  String isLeaveChatRoomOnWindowCloseEnabledString=configService.getString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);
  if (isLeaveChatRoomOnWindowCloseEnabledString == null) {
    isLeaveChatRoomOnWindowCloseEnabledString=UtilActivator.getResources().getSettingsString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);
  }
  if (isLeaveChatRoomOnWindowCloseEnabledString != null && isLeaveChatRoomOnWindowCloseEnabledString.length() > 0) {
    isLeaveChatRoomOnWindowCloseEnabled=Boolean.parseBoolean(isLeaveChatRoomOnWindowCloseEnabledString);
  }
  String isHistoryShownStringProperty="service.gui.IS_MESSAGE_HISTORY_SHOWN";
  String isHistoryShownString=configService.getString(isHistoryShownStringProperty);
  if (isHistoryShownString == null)   isHistoryShownString=UtilActivator.getResources().getSettingsString(isHistoryShownStringProperty);
  if (isHistoryShownString != null && isHistoryShownString.length() > 0) {
    isHistoryShown=Boolean.parseBoolean(isHistoryShownString);
  }
  isRecentMessagesShown=!configService.getBoolean(MessageHistoryService.PNAME_IS_RECENT_MESSAGES_DISABLED,!isRecentMessagesShown);
  String chatHistorySizeStringProperty="service.gui.MESSAGE_HISTORY_SIZE";
  String chatHistorySizeString=configService.getString(chatHistorySizeStringProperty);
  if (chatHistorySizeString == null)   chatHistorySizeString=UtilActivator.getResources().getSettingsString(chatHistorySizeStringProperty);
  if (chatHistorySizeString != null && chatHistorySizeString.length() > 0) {
    chatHistorySize=Integer.parseInt(chatHistorySizeString);
  }
  String chatWriteAreaSizeStringProperty="net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE";
  String chatWriteAreaSizeString=configService.getString(chatWriteAreaSizeStringProperty);
  if (chatWriteAreaSizeString == null)   chatWriteAreaSizeString=UtilActivator.getResources().getSettingsString(chatWriteAreaSizeStringProperty);
  if (chatWriteAreaSizeString != null && chatWriteAreaSizeString.length() > 0) {
    chatWriteAreaSize=Integer.parseInt(chatWriteAreaSizeString);
  }
  String isTransparentWindowEnabledProperty="impl.gui.IS_TRANSPARENT_WINDOW_ENABLED";
  String isTransparentWindowEnabledString=configService.getString(isTransparentWindowEnabledProperty);
  if (isTransparentWindowEnabledString == null)   isTransparentWindowEnabledString=UtilActivator.getResources().getSettingsString(isTransparentWindowEnabledProperty);
  if (isTransparentWindowEnabledString != null && isTransparentWindowEnabledString.length() > 0) {
    isTransparentWindowEnabled=Boolean.parseBoolean(isTransparentWindowEnabledString);
  }
  String windowTransparencyProperty="impl.gui.WINDOW_TRANSPARENCY";
  String windowTransparencyString=configService.getString(windowTransparencyProperty);
  if (windowTransparencyString == null)   windowTransparencyString=UtilActivator.getResources().getSettingsString(windowTransparencyProperty);
  if (windowTransparencyString != null && windowTransparencyString.length() > 0) {
    windowTransparency=Integer.parseInt(windowTransparencyString);
  }
  String isWindowDecoratedProperty="impl.gui.IS_WINDOW_DECORATED";
  String isWindowDecoratedString=configService.getString(isWindowDecoratedProperty);
  if (isWindowDecoratedString == null)   isWindowDecoratedString=UtilActivator.getResources().getSettingsString(isWindowDecoratedProperty);
  if (isWindowDecoratedString != null && isWindowDecoratedString.length() > 0) {
    isWindowDecorated=Boolean.parseBoolean(isWindowDecoratedString);
  }
  isChatToolbarVisible=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar",true);
  isChatStylebarVisible=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar",true);
  isShowSmileys=configService.getBoolean(SHOW_SMILEYS_PROPERTY,true);
  isChatSimpleThemeEnabled=configService.getBoolean(CHAT_SIMPLE_THEME_ENABLED_PROP,true);
  lastContactParent=configService.getString("net.java.sip.communicator.impl.gui.addcontact.lastContactParent");
  sendFileLastDir=configService.getString("net.java.sip.communicator.impl.gui.chat.filetransfer." + "SEND_FILE_LAST_DIR");
  isAddContactDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CONTACT_ADD_DISABLED",false);
  isMergeContactDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CONTACT_MERGE_DISABLED",false);
  isCreateGroupDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CREATE_GROUP_DISABLED",false);
  isFlattenGroupEnabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "FLATTEN_GROUP_ENABLED",false);
  isGoToChatroomDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.chatroomslist." + "GO_TO_CHATROOM_DISABLED",false);
  isRemoveContactDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CONTACT_REMOVE_DISABLED",false);
  isContactMoveDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CONTACT_MOVE_DISABLED",false);
  isContactRenameDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "CONTACT_RENAME_DISABLED",false);
  isGroupRemoveDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "GROUP_REMOVE_DISABLED",false);
  isGroupRenameDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.contactlist." + "GROUP_RENAME_DISABLED",false);
  isPresetStatusMessagesEnabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.presence." + "PRESET_STATUS_MESSAGES",true);
  String advancedConfigDisabledDefaultProp=UtilActivator.getResources().getSettingsString("impl.gui.main.account.ADVANCED_CONFIG_DISABLED");
  boolean isAdvancedConfigDisabled=false;
  if (advancedConfigDisabledDefaultProp != null)   isAdvancedConfigDisabled=Boolean.parseBoolean(advancedConfigDisabledDefaultProp);
  isAdvancedAccountConfigDisabled=configService.getBoolean("net.java.sip.communicator.impl.gui.main.account." + "ADVANCED_CONFIG_DISABLED",isAdvancedConfigDisabled);
  String singleInterfaceEnabledProp=UtilActivator.getResources().getSettingsString(SINGLE_WINDOW_INTERFACE_ENABLED);
  boolean isEnabled=false;
  if (singleInterfaceEnabledProp != null)   isEnabled=Boolean.parseBoolean(singleInterfaceEnabledProp);
 else   isEnabled=Boolean.parseBoolean(UtilActivator.getResources().getSettingsString("impl.gui.SINGLE_WINDOW_INTERFACE"));
  isSingleWindowInterfaceEnabled=configService.getBoolean(SINGLE_WINDOW_INTERFACE_ENABLED,isEnabled);
  if (isFontSupportEnabled()) {
    defaultFontFamily=configService.getString("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_FAMILY");
    defaultFontSize=configService.getString("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_SIZE");
    isDefaultFontBold=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_BOLD",isDefaultFontBold);
    isDefaultFontItalic=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_ITALIC",isDefaultFontItalic);
    isDefaultFontUnderline=configService.getBoolean("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_UNDERLINE",isDefaultFontUnderline);
    int colorSetting=configService.getInt("net.java.sip.communicator.impl.gui.chat.DEFAULT_FONT_COLOR",-1);
    if (colorSetting != -1)     defaultFontColor=colorSetting;
  }
  String showStatusChangedInChatProperty="impl.gui.SHOW_STATUS_CHANGED_IN_CHAT";
  String showStatusChangedInChatDefault=UtilActivator.getResources().getSettingsString(showStatusChangedInChatProperty);
  if (showStatusChangedInChatDefault != null)   showStatusChangedInChat=Boolean.parseBoolean(showStatusChangedInChatDefault);
  showStatusChangedInChat=configService.getBoolean(showStatusChangedInChatProperty,showStatusChangedInChat);
  String routeVideoAndDesktopUsingPhoneNumberProperty="impl.gui.ROUTE_VIDEO_AND_DESKTOP_TO_PNONENUMBER";
  String routeVideoAndDesktopUsingPhoneNumberDefault=UtilActivator.getResources().getSettingsString(routeVideoAndDesktopUsingPhoneNumberProperty);
  if (routeVideoAndDesktopUsingPhoneNumberDefault != null)   routeVideoAndDesktopUsingPhoneNumber=Boolean.parseBoolean(routeVideoAndDesktopUsingPhoneNumberDefault);
  routeVideoAndDesktopUsingPhoneNumber=configService.getBoolean(routeVideoAndDesktopUsingPhoneNumberProperty,routeVideoAndDesktopUsingPhoneNumber);
  String hideAccountMenuProperty="impl.gui.HIDE_SELECTION_ON_SINGLE_ACCOUNT";
  String hideAccountMenuDefaultValue=UtilActivator.getResources().getSettingsString(hideAccountMenuProperty);
  if (hideAccountMenuDefaultValue != null)   hideAccountSelectionWhenPossible=Boolean.parseBoolean(hideAccountMenuDefaultValue);
  hideAccountSelectionWhenPossible=configService.getBoolean(hideAccountMenuProperty,hideAccountSelectionWhenPossible);
  String hideAccountStatusSelectorsProperty="impl.gui.HIDE_ACCOUNT_STATUS_SELECTORS";
  String hideAccountsStatusDefaultValue=UtilActivator.getResources().getSettingsString(hideAccountStatusSelectorsProperty);
  if (hideAccountsStatusDefaultValue != null)   hideAccountStatusSelectors=Boolean.parseBoolean(hideAccountsStatusDefaultValue);
  hideAccountStatusSelectors=configService.getBoolean(hideAccountStatusSelectorsProperty,hideAccountStatusSelectors);
  String autoAnswerDisableSubmenuProperty="impl.gui.AUTO_ANSWER_DISABLE_SUBMENU";
  String autoAnswerDisableSubmenuDefaultValue=UtilActivator.getResources().getSettingsString(autoAnswerDisableSubmenuProperty);
  if (autoAnswerDisableSubmenuDefaultValue != null)   autoAnswerDisableSubmenu=Boolean.parseBoolean(autoAnswerDisableSubmenuDefaultValue);
  autoAnswerDisableSubmenu=configService.getBoolean(autoAnswerDisableSubmenuProperty,autoAnswerDisableSubmenu);
  isChatRoomConfigDisabled=configService.getBoolean(CHAT_ROOM_CONFIG_DISABLED_PROP,isChatRoomConfigDisabled);
  isNormalizePhoneNumber=configService.getBoolean("impl.gui.NORMALIZE_PHONE_NUMBER",true);
  alerterEnabled=configService.getBoolean(ALERTER_ENABLED_PROP,true);
  acceptPhoneNumberWithAlphaChars=configService.getBoolean("impl.gui.ACCEPT_PHONE_NUMBER_WITH_ALPHA_CHARS",true);
  isHideAddressInCallHistoryTooltipEnabled=configService.getBoolean(HIDE_ADDR_IN_CALL_HISTORY_TOOLTIP_PROPERTY,isHideAddressInCallHistoryTooltipEnabled);
  isHideDomainInReceivedCallDialogEnabled=configService.getBoolean(HIDE_DOMAIN_IN_RECEIEVE_CALL_DIALOG_PROPERTY,isHideDomainInReceivedCallDialogEnabled);
  String hideExtendedAwayStatusProperty="net.java.sip.communicator.service.protocol" + ".globalstatus.HIDE_EXTENDED_AWAY_STATUS";
  String hideExtendedAwayStatusDefaultValue=UtilActivator.getResources().getSettingsString(hideExtendedAwayStatusProperty);
  if (hideExtendedAwayStatusDefaultValue != null)   hideExtendedAwayStatus=Boolean.parseBoolean(hideExtendedAwayStatusDefaultValue);
  hideExtendedAwayStatus=configService.getBoolean(hideExtendedAwayStatusProperty,hideExtendedAwayStatus);
  isSmsNotifyTextDisabled=configService.getBoolean(SMS_MSG_NOTIFY_TEXT_DISABLED_PROP,isSmsNotifyTextDisabled);
}
