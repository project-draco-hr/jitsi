{
  CoinIQ iq=new CoinIQ();
  CallJabberImpl call=callPeer.getCall();
  List<CallPeer> crossPeers=new ArrayList<CallPeer>();
  Iterator<CallPeer> crossProtocolCallPeerIter=call.getCrossProtocolCallPeers();
  while (crossProtocolCallPeerIter.hasNext()) {
    MediaAwareCallPeer<?,?,?> crossPeer=(MediaAwareCallPeer<?,?,?>)crossProtocolCallPeerIter.next();
    Iterator<CallPeerJabberImpl> it=call.getCallPeers();
    boolean found=false;
    while (it.hasNext()) {
      if (it.next().getAddress().equals(crossPeer.getAddress())) {
        found=true;
        break;
      }
    }
    if (found)     continue;
    if (!crossPeers.contains(crossPeer))     crossPeers.add(crossPeer);
  }
  iq.setFrom(call.getProtocolProvider().getOurJID());
  iq.setTo(callPeer.getAddress());
  iq.setType(Type.SET);
  iq.setEntity(getBasicTelephony().getProtocolProvider().getOurJID());
  iq.setVersion(version);
  iq.setState(StateType.full);
  if (callPeer.getSID() == null)   return null;
  iq.setSID(callPeer.getSID());
  iq.addExtension(new DescriptionPacketExtension());
  StatePacketExtension state=new StatePacketExtension();
  state.setUserCount(call.getCallPeerCount() + 1 + crossPeers.size());
  iq.addExtension(state);
  UsersPacketExtension users=new UsersPacketExtension();
  UserPacketExtension user=new UserPacketExtension("xmpp:" + parentProvider.getOurJID());
  EndpointPacketExtension endpoint=new EndpointPacketExtension("xmpp:" + parentProvider.getOurJID());
  endpoint.setStatus(EndpointStatusType.connected);
  List<MediaPacketExtension> medias=getMedia(callPeer,false);
  for (  MediaPacketExtension media : medias) {
    endpoint.addChildExtension(media);
  }
  user.addChildExtension(endpoint);
  users.addChildExtension(user);
  Iterator<CallPeerJabberImpl> callPeerIter=call.getCallPeers();
  while (callPeerIter.hasNext()) {
    UserPacketExtension ext=getUser(callPeerIter.next());
    users.addChildExtension(ext);
  }
  for (  CallPeer cp : crossPeers) {
    MediaAwareCallPeer<?,?,?> crossPeer=(MediaAwareCallPeer<?,?,?>)cp;
    UserPacketExtension ext=getUser(crossPeer);
    users.addChildExtension(ext);
  }
  iq.addExtension(users);
  return iq;
}
