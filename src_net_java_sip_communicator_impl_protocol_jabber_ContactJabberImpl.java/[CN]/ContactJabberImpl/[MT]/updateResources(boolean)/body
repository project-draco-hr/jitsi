{
  if (jid == null)   return;
  if (resources == null)   resources=new ConcurrentHashMap<String,ContactResourceJabberImpl>();
  Iterator<Presence> it=((ProtocolProviderServiceJabberImpl)getProtocolProvider()).getConnection().getRoster().getPresences(jid);
  while (it.hasNext()) {
    Presence presence=it.next();
    String resource=StringUtils.parseResource(presence.getFrom());
    if (resource != null && resource.length() > 0) {
      String fullJid=presence.getFrom();
      ContactResourceJabberImpl contactResource=resources.get(fullJid);
      PresenceStatus newPresenceStatus=OperationSetPersistentPresenceJabberImpl.jabberStatusToPresenceStatus(presence,(ProtocolProviderServiceJabberImpl)getProtocolProvider());
      if (contactResource == null) {
        contactResource=new ContactResourceJabberImpl(fullJid,this,resource,newPresenceStatus,presence.getPriority());
        resources.put(fullJid,contactResource);
        fireContactResourceEvent(new ContactResourceEvent(this,contactResource,ContactResourceEvent.RESOURCE_ADDED));
      }
 else {
        if (contactResource.getPresenceStatus().getStatus() != newPresenceStatus.getStatus()) {
          contactResource.setPresenceStatus(newPresenceStatus);
          fireContactResourceEvent(new ContactResourceEvent(this,contactResource,ContactResourceEvent.RESOURCE_MODIFIED));
        }
      }
    }
  }
  if (!removeUnavailable)   return;
  Iterator<String> resourceIter=resources.keySet().iterator();
  while (resourceIter.hasNext()) {
    String fullJid=resourceIter.next();
    if (!((ProtocolProviderServiceJabberImpl)getProtocolProvider()).getConnection().getRoster().getPresenceResource(fullJid).isAvailable()) {
      ContactResource removedResource=resources.get(fullJid);
      if (resources.containsKey(fullJid)) {
        resources.remove(fullJid);
        fireContactResourceEvent(new ContactResourceEvent(this,removedResource,ContactResourceEvent.RESOURCE_REMOVED));
      }
    }
  }
}
