{
  this.chatPanel=chatPanel;
  this.setModal(false);
  String title=Messages.getI18NString("inviteContactToChat").getText();
  this.setTitle(title);
  TransparentPanel mainPanel=new TransparentPanel(new BorderLayout(5,5));
  TransparentPanel northPanel=new TransparentPanel(new BorderLayout(10,10));
  mainPanel.setPreferredSize(new Dimension(450,350));
  mainPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  this.reasonArea.setBorder(BorderFactory.createTitledBorder(GuiActivator.getResources().getI18NString("inviteReason")));
  JTextArea infoTextArea=new JTextArea();
  infoTextArea.setText(Messages.getI18NString("inviteContactFormInfo").getText());
  infoTextArea.setFont(Constants.FONT.deriveFont(Font.BOLD,12f));
  infoTextArea.setLineWrap(true);
  infoTextArea.setOpaque(false);
  infoTextArea.setWrapStyleWord(true);
  infoTextArea.setEditable(false);
  JLabel iconLabel=new JLabel(new ImageIcon(ImageLoader.getImage(ImageLoader.INVITE_DIALOG_ICON)));
  northPanel.add(iconLabel,BorderLayout.WEST);
  northPanel.add(infoTextArea,BorderLayout.CENTER);
  TransparentPanel buttonsPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  inviteButton.addActionListener(this);
  cancelButton.addActionListener(this);
  buttonsPanel.add(inviteButton);
  buttonsPanel.add(cancelButton);
  this.getRootPane().setDefaultButton(inviteButton);
  inviteButton.setMnemonic(GuiActivator.getResources().getI18nMnemonic("invite"));
  cancelButton.setMnemonic(GuiActivator.getResources().getI18nMnemonic("cancel"));
  MainFrame mainFrame=GuiActivator.getUIService().getMainFrame();
  final ContactList contactList=new ContactList(mainFrame);
  final ContactList selectedContactList=new ContactList(mainFrame);
  contactList.setModel(contactListModel);
  selectedContactList.setModel(selectedContactListModel);
  contactList.setMouseMotionListener(null);
  contactList.setMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        MetaContact metaContact=(MetaContact)contactList.getSelectedValue();
        moveContactFromLeftToRight(metaContact);
      }
    }
  }
);
  selectedContactList.setMouseMotionListener(null);
  selectedContactList.setMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        MetaContact metaContact=(MetaContact)selectedContactList.getSelectedValue();
        moveContactFromRightToLeft(metaContact);
      }
    }
  }
);
  JScrollPane contactListScrollPane=new JScrollPane();
  contactListScrollPane.getViewport().add(contactList);
  contactListScrollPane.getViewport().setBorder(null);
  contactListScrollPane.setViewportBorder(null);
  contactListScrollPane.setBorder(SIPCommBorders.getRoundBorder());
  JScrollPane selectedListScrollPane=new JScrollPane();
  selectedListScrollPane.getViewport().add(selectedContactList);
  selectedListScrollPane.getViewport().setBorder(null);
  selectedListScrollPane.setViewportBorder(null);
  selectedListScrollPane.setBorder(SIPCommBorders.getRoundBorder());
  JPanel listPanel=new JPanel(new GridLayout(0,2,5,5));
  listPanel.setPreferredSize(new Dimension(400,200));
  listPanel.add(contactListScrollPane);
  listPanel.add(selectedListScrollPane);
  this.initContactListData();
  JPanel addRemoveButtonsPanel=new JPanel(new GridLayout(0,2,5,5));
  JButton addContactButton=new JButton(GuiActivator.getResources().getI18NString("add"));
  JButton removeContactButton=new JButton(GuiActivator.getResources().getI18NString("remove"));
  addRemoveButtonsPanel.add(addContactButton);
  addRemoveButtonsPanel.add(removeContactButton);
  addContactButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      MetaContact metaContact=(MetaContact)contactList.getSelectedValue();
      if (metaContact != null)       moveContactFromLeftToRight(metaContact);
    }
  }
);
  removeContactButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      MetaContact metaContact=(MetaContact)selectedContactList.getSelectedValue();
      if (metaContact != null)       moveContactFromRightToLeft(metaContact);
    }
  }
);
  TransparentPanel centerPanel=new TransparentPanel(new BorderLayout());
  centerPanel.add(listPanel,BorderLayout.CENTER);
  centerPanel.add(addRemoveButtonsPanel,BorderLayout.SOUTH);
  TransparentPanel southPanel=new TransparentPanel(new BorderLayout());
  southPanel.add(reasonArea,BorderLayout.CENTER);
  southPanel.add(buttonsPanel,BorderLayout.SOUTH);
  mainPanel.add(northPanel,BorderLayout.NORTH);
  mainPanel.add(centerPanel,BorderLayout.CENTER);
  mainPanel.add(southPanel,BorderLayout.SOUTH);
  this.getContentPane().add(mainPanel);
}
