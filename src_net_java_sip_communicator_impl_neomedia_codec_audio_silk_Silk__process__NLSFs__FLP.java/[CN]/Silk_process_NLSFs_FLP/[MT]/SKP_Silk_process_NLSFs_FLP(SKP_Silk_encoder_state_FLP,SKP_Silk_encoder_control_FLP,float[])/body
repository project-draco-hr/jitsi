{
  boolean doInterpolate;
  float pNLSFW[]=new float[Silk_define.MAX_LPC_ORDER];
  float NLSF_mu, NLSF_mu_fluc_red, i_sqr, NLSF_interpolation_factor=0.0f;
  final SKP_Silk_NLSF_CB_FLP psNLSF_CB_FLP;
  float pNLSF0_temp[]=new float[Silk_define.MAX_LPC_ORDER];
  float pNLSFW0_temp[]=new float[Silk_define.MAX_LPC_ORDER];
  int i;
  assert(psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED || psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_UNVOICED);
  if (psEncCtrl.sCmn.sigtype == Silk_define.SIG_TYPE_VOICED) {
    NLSF_mu=0.002f - 0.001f * psEnc.speech_activity;
    NLSF_mu_fluc_red=0.1f - 0.05f * psEnc.speech_activity;
  }
 else {
    NLSF_mu=0.005f - 0.004f * psEnc.speech_activity;
    NLSF_mu_fluc_red=0.2f - 0.1f * (psEnc.speech_activity + psEncCtrl.sparseness);
  }
  Silk_NLSF_VQ_weights_laroia_FLP.SKP_Silk_NLSF_VQ_weights_laroia_FLP(pNLSFW,pNLSF,psEnc.sCmn.predictLPCOrder);
  doInterpolate=(psEnc.sCmn.useInterpolatedNLSFs == 1) && (psEncCtrl.sCmn.NLSFInterpCoef_Q2 < (1 << 2));
  if (doInterpolate) {
    NLSF_interpolation_factor=0.25f * psEncCtrl.sCmn.NLSFInterpCoef_Q2;
    Silk_wrappers_FLP.SKP_Silk_interpolate_wrapper_FLP(pNLSF0_temp,psEnc.sPred.prev_NLSFq,pNLSF,NLSF_interpolation_factor,psEnc.sCmn.predictLPCOrder);
    Silk_NLSF_VQ_weights_laroia_FLP.SKP_Silk_NLSF_VQ_weights_laroia_FLP(pNLSFW0_temp,pNLSF0_temp,psEnc.sCmn.predictLPCOrder);
    i_sqr=NLSF_interpolation_factor * NLSF_interpolation_factor;
    for (i=0; i < psEnc.sCmn.predictLPCOrder; i++) {
      pNLSFW[i]=0.5f * (pNLSFW[i] + i_sqr * pNLSFW0_temp[i]);
    }
  }
  psNLSF_CB_FLP=psEnc.psNLSF_CB_FLP[psEncCtrl.sCmn.sigtype];
  Silk_NLSF_MSVQ_encode_FLP.SKP_Silk_NLSF_MSVQ_encode_FLP(psEncCtrl.sCmn.NLSFIndices,pNLSF,psNLSF_CB_FLP,psEnc.sPred.prev_NLSFq,pNLSFW,NLSF_mu,NLSF_mu_fluc_red,psEnc.sCmn.NLSF_MSVQ_Survivors,psEnc.sCmn.predictLPCOrder,psEnc.sCmn.first_frame_after_reset);
  Silk_wrappers_FLP.SKP_Silk_NLSF2A_stable_FLP(psEncCtrl.PredCoef[1],pNLSF,psEnc.sCmn.predictLPCOrder);
  if (doInterpolate) {
    Silk_wrappers_FLP.SKP_Silk_interpolate_wrapper_FLP(pNLSF0_temp,psEnc.sPred.prev_NLSFq,pNLSF,NLSF_interpolation_factor,psEnc.sCmn.predictLPCOrder);
    Silk_wrappers_FLP.SKP_Silk_NLSF2A_stable_FLP(psEncCtrl.PredCoef[0],pNLSF0_temp,psEnc.sCmn.predictLPCOrder);
  }
 else {
    System.arraycopy(psEncCtrl.PredCoef[1],0,psEncCtrl.PredCoef[0],0,psEnc.sCmn.predictLPCOrder);
  }
}
