{
  long begin=System.currentTimeMillis();
  long maxTime=1000 / 10;
  int wait=0;
  if (buffer.getFormat() instanceof AVFrameFormat) {
    Object dataAv=buffer.getData();
    AVFrame bufferFrame=null;
    long bufferFramePtr=0;
    if (dataAv instanceof AVFrame) {
      bufferFrame=(AVFrame)dataAv;
      bufferFramePtr=bufferFrame.getPtr();
    }
 else {
      bufferFrame=new FinalizableAVFrame();
      bufferFramePtr=bufferFrame.getPtr();
    }
    AVFrameFormat bufferFrameFormat=(AVFrameFormat)buffer.getFormat();
    Dimension bufferFrameSize=bufferFrameFormat.getSize();
    if (readScreenNative(bufferFrameSize)) {
      FFmpeg.avpicture_fill(bufferFramePtr,data.ptr,bufferFrameFormat.getPixFmt(),bufferFrameSize.width,bufferFrameSize.height);
    }
    buffer.setData(bufferFrame);
  }
 else {
    byte dataByte[]=(byte[])buffer.getData();
    int dataLength=(dataByte != null) ? dataByte.length : 0;
    if ((dataByte != null) || (dataLength != 0)) {
      byte buf[]=readScreen(dataByte);
      if (buf != dataByte) {
        buffer.setData(buf);
      }
      buffer.setOffset(0);
      buffer.setLength(buf.length);
    }
  }
  buffer.setFormat(buffer.getFormat());
  buffer.setHeader(null);
  buffer.setTimeStamp(System.nanoTime());
  buffer.setSequenceNumber(seqNo);
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  seqNo++;
  wait=(int)(maxTime - (System.currentTimeMillis() - begin));
  try {
    if (wait > 0) {
      Thread.sleep(wait);
    }
 else {
      Thread.yield();
    }
  }
 catch (  Exception e) {
  }
}
