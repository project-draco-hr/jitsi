{
  Format bufferFormat=buffer.getFormat();
  if (bufferFormat == null) {
    bufferFormat=getFormat();
    if (bufferFormat != null)     buffer.setFormat(bufferFormat);
  }
  if (bufferFormat instanceof AVFrameFormat) {
    Object dataAv=buffer.getData();
    AVFrame bufferFrame=null;
    long bufferFramePtr=0;
    if (dataAv instanceof AVFrame) {
      bufferFrame=(AVFrame)dataAv;
      bufferFramePtr=bufferFrame.getPtr();
    }
 else {
      bufferFrame=new FinalizableAVFrame();
      bufferFramePtr=bufferFrame.getPtr();
    }
    AVFrameFormat bufferFrameFormat=(AVFrameFormat)bufferFormat;
    Dimension bufferFrameSize=bufferFrameFormat.getSize();
    if (readScreenNative(bufferFrameSize)) {
      FFmpeg.avpicture_fill(bufferFramePtr,data.ptr,bufferFrameFormat.getPixFmt(),bufferFrameSize.width,bufferFrameSize.height);
      buffer.setData(bufferFrame);
    }
 else {
      throw new IOException("Failed to grab screen");
    }
  }
 else {
    byte dataByte[]=(byte[])buffer.getData();
    int dataLength=(dataByte != null) ? dataByte.length : 0;
    if ((dataByte != null) || (dataLength != 0)) {
      Dimension bufferFrameSize=((VideoFormat)bufferFormat).getSize();
      byte buf[]=readScreen(dataByte,bufferFrameSize);
      if (buf != dataByte) {
        buffer.setData(buf);
      }
      buffer.setOffset(0);
      buffer.setLength(buf.length);
    }
  }
  buffer.setHeader(null);
  buffer.setTimeStamp(System.nanoTime());
  buffer.setSequenceNumber(seqNo);
  buffer.setFlags(Buffer.FLAG_SYSTEM_TIME | Buffer.FLAG_LIVE_DATA);
  seqNo++;
}
