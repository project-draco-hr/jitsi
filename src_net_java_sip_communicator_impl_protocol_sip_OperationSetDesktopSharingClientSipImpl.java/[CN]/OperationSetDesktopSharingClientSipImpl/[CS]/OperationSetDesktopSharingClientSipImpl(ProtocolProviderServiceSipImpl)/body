{
  super(parentProvider);
  final boolean desktopControlOutOfDialogEnabled=SipActivator.getConfigurationService().getBoolean(DesktopSharingCallSipImpl.ENABLE_OUTOFDIALOG_DESKTOP_CONTROL_PROP,false);
  notifier=new EventPackageNotifier(this.parentProvider,DesktopSharingProtocolSipImpl.EVENT_PACKAGE,DesktopSharingProtocolSipImpl.SUBSCRIPTION_DURATION,DesktopSharingProtocolSipImpl.CONTENT_SUB_TYPE,this.timer){
    private String dssid=null;
    @Override protected Subscription createSubscription(    Address fromAddress,    String eventId){
      return new RemoteControlNotifierSubscription(fromAddress,eventId);
    }
    /** 
 * {@inheritedDocs}.
 */
    @Override public boolean processRequest(    RequestEvent requestEvent){
      if (desktopControlOutOfDialogEnabled) {
        Header dssidHeader=requestEvent.getRequest().getHeader(DesktopSharingCallSipImpl.DSSID_HEADER);
        if (dssidHeader != null) {
          dssid=dssidHeader.toString().replaceAll(dssidHeader.getName() + ":","").trim();
        }
      }
      boolean ret=super.processRequest(requestEvent);
      if (requestEvent == null || requestEvent.getDialog() == null || requestEvent.getDialog().getCallId() == null)       return ret;
      String callId=requestEvent.getDialog().getCallId().getCallId();
      Subscription subs=this.getSubscription(callId);
      if (subs instanceof RemoteControlNotifierSubscription) {
        fireRemoteControlGranted(((RemoteControlNotifierSubscription)subs).getCallPeer());
      }
      return ret;
    }
    @Override protected void removeSubscription(    Response response,    String eventId,    ClientTransaction clientTransaction){
      CallIdHeader callIdHeader=(CallIdHeader)response.getHeader(CallIdHeader.NAME);
      String callId=callIdHeader.getCallId();
      Subscription ret=this.getSubscription(callId);
      if (ret instanceof RemoteControlNotifierSubscription) {
        fireRemoteControlRevoked(((RemoteControlNotifierSubscription)ret).getCallPeer());
      }
      super.removeSubscription(response,eventId,clientTransaction);
    }
    /** 
 * Creates a NOTIFY request which is to notify about a
 * specific subscription state and carry a specific content.
 * This request MUST be sent using <tt>Dialog#sendRequest()</tt>
 * @param dialog the <tt>Dialog</tt> to create the NOTIFY
 * request in
 * @param content the content to be carried by the NOTIFY
 * request to be created
 * @param subscriptionState the subscription state
 * @param reason the reason for the specified subscription state
 * <tt>null</tt> for no reason
 * @return a valid <tt>ClientTransaction</tt> ready to send the
 * request
 * @throws OperationFailedException if something goes wrong
 * during the creation of the request
 */
    @Override protected ClientTransaction createNotify(    Dialog dialog,    byte[] content,    String subscriptionState,    String reason) throws OperationFailedException {
      ClientTransaction res=super.createNotify(dialog,content,subscriptionState,reason);
      if (desktopControlOutOfDialogEnabled) {
        try {
          Header dssidHeader=OperationSetDesktopSharingClientSipImpl.this.parentProvider.getHeaderFactory().createHeader(DesktopSharingCallSipImpl.DSSID_HEADER,dssid);
          res.getRequest().setHeader(dssidHeader);
        }
 catch (        ParseException ex) {
          logger.error("error ",ex);
        }
      }
      return res;
    }
  }
;
}
