{
  int ret=0, used_bytes, prev_fs_kHz;
  SKP_Silk_decoder_state psDec;
  psDec=(SKP_Silk_decoder_state)decState;
  if (psDec.moreInternalDecoderFrames == 0) {
    psDec.nFramesDecoded=0;
  }
  if (psDec.moreInternalDecoderFrames == 0 && lostFlag == 0 && nBytesIn > Silk_define.MAX_ARITHM_BYTES) {
    lostFlag=1;
    ret=Silk_errors.SKP_SILK_DEC_PAYLOAD_TOO_LARGE;
  }
  prev_fs_kHz=psDec.fs_kHz;
  int[] used_bytes_ptr=new int[1];
  ret+=Silk_decode_frame.SKP_Silk_decode_frame(psDec,samplesOut,samplesOut_offset,nSamplesOut,inData,inData_offset,nBytesIn,lostFlag,used_bytes_ptr);
  used_bytes=used_bytes_ptr[0];
  if (used_bytes != 0) {
    if (psDec.nBytesLeft > 0 && psDec.FrameTermination == Silk_define.SKP_SILK_MORE_FRAMES && psDec.nFramesDecoded < 5) {
      psDec.moreInternalDecoderFrames=1;
    }
 else {
      psDec.moreInternalDecoderFrames=0;
      psDec.nFramesInPacket=psDec.nFramesDecoded;
      if (psDec.vadFlag == Silk_define.VOICE_ACTIVITY) {
        if (psDec.FrameTermination == Silk_define.SKP_SILK_LAST_FRAME) {
          psDec.no_FEC_counter++;
          if (psDec.no_FEC_counter > Silk_define.NO_LBRR_THRES) {
            psDec.inband_FEC_offset=0;
          }
        }
 else         if (psDec.FrameTermination == Silk_define.SKP_SILK_LBRR_VER1) {
          psDec.inband_FEC_offset=1;
          psDec.no_FEC_counter=0;
        }
 else         if (psDec.FrameTermination == Silk_define.SKP_SILK_LBRR_VER2) {
          psDec.inband_FEC_offset=2;
          psDec.no_FEC_counter=0;
        }
      }
    }
  }
  if (Silk_define.MAX_API_FS_KHZ * 1000 < decControl.API_sampleRate || 8000 > decControl.API_sampleRate) {
    ret=Silk_errors.SKP_SILK_DEC_INVALID_SAMPLING_FREQUENCY;
    return (ret);
  }
  if (psDec.fs_kHz * 1000 != decControl.API_sampleRate) {
    short[] samplesOut_tmp=new short[Silk_define.MAX_API_FS_KHZ * Silk_define.FRAME_LENGTH_MS];
    Silk_typedef.SKP_assert(psDec.fs_kHz <= Silk_define.MAX_API_FS_KHZ);
    System.arraycopy(samplesOut,samplesOut_offset + 0,samplesOut_tmp,0,nSamplesOut[0]);
    if (prev_fs_kHz != psDec.fs_kHz || psDec.prev_API_sampleRate != decControl.API_sampleRate) {
      ret=Silk_resampler.SKP_Silk_resampler_init(psDec.resampler_state,psDec.fs_kHz * 1000,decControl.API_sampleRate);
    }
    ret+=Silk_resampler.SKP_Silk_resampler(psDec.resampler_state,samplesOut,samplesOut_offset,samplesOut_tmp,0,nSamplesOut[0]);
    nSamplesOut[0]=(short)((int)(nSamplesOut[0] * decControl.API_sampleRate) / (psDec.fs_kHz * 1000));
  }
  psDec.prev_API_sampleRate=decControl.API_sampleRate;
  decControl.frameSize=(int)psDec.frame_length;
  decControl.framesPerPacket=(int)psDec.nFramesInPacket;
  decControl.inBandFECOffset=(int)psDec.inband_FEC_offset;
  decControl.moreInternalDecoderFrames=(int)psDec.moreInternalDecoderFrames;
  return ret;
}
