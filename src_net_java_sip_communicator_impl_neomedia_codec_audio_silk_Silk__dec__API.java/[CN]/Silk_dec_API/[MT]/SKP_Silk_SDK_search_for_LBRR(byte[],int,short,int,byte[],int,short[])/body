{
  SKP_Silk_decoder_state sDec=new SKP_Silk_decoder_state();
  SKP_Silk_decoder_control sDecCtrl=new SKP_Silk_decoder_control();
  int[] TempQ=new int[Silk_define.MAX_FRAME_LENGTH];
  if (lost_offset < 1 || lost_offset > Silk_define.MAX_LBRR_DELAY) {
    nLBRRBytes[0]=0;
    return;
  }
  sDec.nFramesDecoded=0;
  sDec.fs_kHz=0;
  Arrays.fill(sDec.prevNLSF_Q15,0,Silk_define.MAX_LPC_ORDER,0);
  for (int i=0; i < Silk_define.MAX_LPC_ORDER; i++)   sDec.prevNLSF_Q15[i]=0;
  Silk_range_coder.SKP_Silk_range_dec_init(sDec.sRC,inData,inData_offset,(int)nBytesIn);
  while (true) {
    Silk_decode_parameters.SKP_Silk_decode_parameters(sDec,sDecCtrl,TempQ,0);
    if (sDec.sRC.error != 0) {
      nLBRRBytes[0]=0;
      return;
    }
    if (((sDec.FrameTermination - 1) & lost_offset) != 0 && sDec.FrameTermination > 0 && sDec.nBytesLeft >= 0) {
      nLBRRBytes[0]=(short)sDec.nBytesLeft;
      System.arraycopy(inData,inData_offset + nBytesIn - sDec.nBytesLeft,LBRRData,LBRRData_offset + 0,sDec.nBytesLeft);
      break;
    }
    if (sDec.nBytesLeft > 0 && sDec.FrameTermination == Silk_define.SKP_SILK_MORE_FRAMES) {
      sDec.nFramesDecoded++;
    }
 else {
      LBRRData=null;
      nLBRRBytes[0]=0;
      break;
    }
  }
}
