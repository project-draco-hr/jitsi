{
  if (!getConference().isJitsiVideobridge())   return null;
  CallPeerMediaHandlerJabberImpl peerMediaHandler=peer.getMediaHandler();
  if (peerMediaHandler.getMediaHandler() != colibriMediaHandler) {
    for (    MediaType mediaType : MediaType.values()) {
      if (peerMediaHandler.getStream(mediaType) != null)       return null;
    }
  }
  ProtocolProviderServiceJabberImpl protocolProvider=getProtocolProvider();
  String jitsiVideobridge=(colibri == null) ? protocolProvider.getJitsiVideobridge() : colibri.getFrom();
  if ((jitsiVideobridge == null) || (jitsiVideobridge.length() == 0)) {
    logger.error("Failed to allocate colibri channels: no videobridge" + " found.");
    return null;
  }
  if (colibriMediaHandler == null)   colibriMediaHandler=new MediaHandler();
  peerMediaHandler.setMediaHandler(colibriMediaHandler);
  ColibriConferenceIQ conferenceRequest=new ColibriConferenceIQ();
  if (colibri != null)   conferenceRequest.setID(colibri.getID());
  for (  Map.Entry<ContentPacketExtension,ContentPacketExtension> e : contentMap.entrySet()) {
    ContentPacketExtension localContent=e.getKey();
    ContentPacketExtension remoteContent=e.getValue();
    ContentPacketExtension cpe=(remoteContent == null) ? localContent : remoteContent;
    RtpDescriptionPacketExtension rdpe=cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class);
    String media=rdpe.getMedia();
    MediaType mediaType=MediaType.parseString(media);
    String contentName=mediaType.toString();
    ColibriConferenceIQ.Content contentRequest=new ColibriConferenceIQ.Content(contentName);
    conferenceRequest.addContent(contentRequest);
    boolean requestLocalChannel=true;
    if (colibri != null) {
      ColibriConferenceIQ.Content content=colibri.getContent(contentName);
      if ((content != null) && (content.getChannelCount() > 0))       requestLocalChannel=false;
    }
    boolean peerIsInitiator=peer.isInitiator();
    if (requestLocalChannel) {
      ColibriConferenceIQ.Channel localChannelRequest=new ColibriConferenceIQ.Channel();
      localChannelRequest.setInitiator(peerIsInitiator);
      for (      PayloadTypePacketExtension ptpe : rdpe.getPayloadTypes())       localChannelRequest.addPayloadType(ptpe);
      setTransportOnChannel(peer,media,localChannelRequest);
      setDtlsEncryptionOnChannel(jitsiVideobridge,peer,mediaType,localChannelRequest);
      ensureTransportOnChannel(localChannelRequest,peer);
      contentRequest.addChannel(localChannelRequest);
    }
    ColibriConferenceIQ.Channel remoteChannelRequest=new ColibriConferenceIQ.Channel();
    remoteChannelRequest.setInitiator(!peerIsInitiator);
    for (    PayloadTypePacketExtension ptpe : rdpe.getPayloadTypes())     remoteChannelRequest.addPayloadType(ptpe);
    setTransportOnChannel(media,localContent,remoteContent,peer,remoteChannelRequest);
    setDtlsEncryptionOnChannel(mediaType,localContent,remoteContent,peer,remoteChannelRequest);
    ensureTransportOnChannel(remoteChannelRequest,peer);
    contentRequest.addChannel(remoteChannelRequest);
  }
  XMPPConnection connection=protocolProvider.getConnection();
  PacketCollector packetCollector=connection.createPacketCollector(new PacketIDFilter(conferenceRequest.getPacketID()));
  conferenceRequest.setTo(jitsiVideobridge);
  conferenceRequest.setType(IQ.Type.GET);
  connection.sendPacket(conferenceRequest);
  Packet response=packetCollector.nextResult(SmackConfiguration.getPacketReplyTimeout());
  packetCollector.cancel();
  if (response == null) {
    logger.error("Failed to allocate colibri channels: response is null." + " Maybe the response timed out.");
    return null;
  }
 else   if (response.getError() != null) {
    logger.error("Failed to allocate colibri channels: " + response.getError());
    return null;
  }
 else   if (!(response instanceof ColibriConferenceIQ)) {
    logger.error("Failed to allocate colibri channels: response is not a" + " colibri conference");
    return null;
  }
  ColibriConferenceIQ conferenceResponse=(ColibriConferenceIQ)response;
  String conferenceResponseID=conferenceResponse.getID();
{
    if (colibri == null) {
      colibri=new ColibriConferenceIQ();
      colibri.setFrom(conferenceResponse.getFrom());
    }
    String colibriID=colibri.getID();
    if (colibriID == null)     colibri.setID(conferenceResponseID);
 else     if (!colibriID.equals(conferenceResponseID))     throw new IllegalStateException("conference.id");
    for (    ColibriConferenceIQ.Content contentResponse : conferenceResponse.getContents()) {
      String contentName=contentResponse.getName();
      ColibriConferenceIQ.Content content=colibri.getOrCreateContent(contentName);
      for (      ColibriConferenceIQ.Channel channelResponse : contentResponse.getChannels()) {
        int channelIndex=content.getChannelCount();
        content.addChannel(channelResponse);
        if (channelIndex == 0) {
          TransportManagerJabberImpl transportManager=peerMediaHandler.getTransportManager();
          transportManager.isEstablishingConnectivityWithJitsiVideobridge=true;
          transportManager.startConnectivityEstablishmentWithJitsiVideobridge=true;
          MediaType mediaType=MediaType.parseString(contentName);
          addDtlsAdvertisedEncryptions(peer,channelResponse,mediaType);
        }
      }
    }
  }
  ColibriConferenceIQ conferenceResult=new ColibriConferenceIQ();
  conferenceResult.setFrom(colibri.getFrom());
  conferenceResult.setID(conferenceResponseID);
  for (  Map.Entry<ContentPacketExtension,ContentPacketExtension> e : contentMap.entrySet()) {
    ContentPacketExtension localContent=e.getKey();
    ContentPacketExtension remoteContent=e.getValue();
    ContentPacketExtension cpe=(remoteContent == null) ? localContent : remoteContent;
    RtpDescriptionPacketExtension rdpe=cpe.getFirstChildOfType(RtpDescriptionPacketExtension.class);
    MediaType mediaType=MediaType.parseString(rdpe.getMedia());
    ColibriConferenceIQ.Content contentResponse=conferenceResponse.getContent(mediaType.toString());
    if (contentResponse != null) {
      String contentName=contentResponse.getName();
      ColibriConferenceIQ.Content contentResult=new ColibriConferenceIQ.Content(contentName);
      conferenceResult.addContent(contentResult);
      ColibriConferenceIQ.Content content=colibri.getContent(contentName);
      ColibriConferenceIQ.Channel localChannel=null;
      if ((content != null) && (content.getChannelCount() > 0)) {
        localChannel=content.getChannel(0);
        contentResult.addChannel(localChannel);
      }
      String localChannelID=(localChannel == null) ? null : localChannel.getID();
      for (      ColibriConferenceIQ.Channel channelResponse : contentResponse.getChannels()) {
        if ((localChannelID == null) || !localChannelID.equals(channelResponse.getID()))         contentResult.addChannel(channelResponse);
      }
    }
  }
  return conferenceResult;
}
