{
  String remoteParty=jingleIQ.getInitiator();
  boolean autoAnswer=false;
  CallPeerJabberImpl attendant=null;
  OperationSetBasicTelephonyJabberImpl basicTelephony=null;
  if (remoteParty == null)   remoteParty=jingleIQ.getFrom();
  CallPeerJabberImpl callPeer=new CallPeerJabberImpl(remoteParty,this,jingleIQ);
  addCallPeer(callPeer);
  try {
    TransferPacketExtension transfer=(TransferPacketExtension)jingleIQ.getExtension(TransferPacketExtension.ELEMENT_NAME,TransferPacketExtension.NAMESPACE);
    if (transfer != null) {
      String sid=transfer.getSID();
      if (sid != null) {
        ProtocolProviderServiceJabberImpl protocolProvider=getProtocolProvider();
        basicTelephony=(OperationSetBasicTelephonyJabberImpl)protocolProvider.getOperationSet(OperationSetBasicTelephony.class);
        CallJabberImpl attendantCall=basicTelephony.getActiveCallsRepository().findJingleSID(sid);
        if (attendantCall != null) {
          attendant=attendantCall.getPeer(sid);
          if ((attendant != null) && basicTelephony.getFullCalleeURI(attendant.getAddress()).equals(transfer.getFrom()) && protocolProvider.getOurJID().equals(transfer.getTo())) {
            autoAnswer=true;
          }
        }
      }
    }
  }
 catch (  Throwable t) {
    logger.error("Failed to hang up on attendant" + " as part of session transfer",t);
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
  }
  CoinPacketExtension coin=(CoinPacketExtension)jingleIQ.getExtension(CoinPacketExtension.ELEMENT_NAME,CoinPacketExtension.NAMESPACE);
  if (coin != null) {
    boolean b=(Boolean.parseBoolean((String)coin.getAttribute(CoinPacketExtension.ISFOCUS_ATTR_NAME)));
    callPeer.setConferenceFocus(b);
  }
  callPeer.processSessionInitiate(jingleIQ);
  if (callPeer.getState() == CallPeerState.FAILED)   return null;
  callPeer.setState(CallPeerState.INCOMING_CALL);
  if (autoAnswer) {
    try {
      callPeer.answer();
    }
 catch (    Exception e) {
      logger.info("Exception occurred while answer transferred call",e);
      callPeer=null;
    }
    try {
      basicTelephony.hangupCallPeer(attendant);
    }
 catch (    OperationFailedException e) {
      logger.error("Failed to hang up on attendant as part of " + "session transfer",e);
    }
    return callPeer;
  }
  List<ContentPacketExtension> offer=callPeer.getSessionIQ().getContentList();
  Map<MediaType,MediaDirection> directions=new HashMap<MediaType,MediaDirection>();
  directions.put(MediaType.AUDIO,MediaDirection.INACTIVE);
  directions.put(MediaType.VIDEO,MediaDirection.INACTIVE);
  for (  ContentPacketExtension c : offer) {
    MediaDirection remoteDirection=JingleUtils.getDirection(c,callPeer.isInitiator());
    if (c.getName().equals(MediaType.AUDIO.toString())) {
      directions.put(MediaType.AUDIO,remoteDirection);
    }
 else     if (c.getName().equals(MediaType.VIDEO.toString())) {
      directions.put(MediaType.VIDEO,remoteDirection);
    }
  }
  if (this.getCallPeerCount() == 1 && getCallGroup() == null)   parentOpSet.fireCallEvent(CallEvent.CALL_RECEIVED,this,directions);
  return callPeer;
}
