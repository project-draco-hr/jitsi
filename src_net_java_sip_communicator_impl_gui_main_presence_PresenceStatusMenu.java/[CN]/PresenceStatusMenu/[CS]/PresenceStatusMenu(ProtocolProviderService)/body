{
  super(protocolProvider.getAccountID().getDisplayName(),ImageLoader.getAccountStatusImage(protocolProvider),protocolProvider);
  this.presence=protocolProvider.getOperationSet(OperationSetPresence.class);
  this.statusIterator=this.presence.getSupportedStatusSet();
  String tooltip="<html><b>" + protocolProvider.getAccountID().getDisplayName() + "</b><br>Connecting</html>";
  this.setToolTipText(tooltip);
  titleArea=new JEditorPane();
  titleArea.setContentType("text/html");
  Constants.loadSimpleStyle(((HTMLDocument)titleArea.getDocument()).getStyleSheet(),titleArea.getFont());
  titleArea.setBorder(BorderFactory.createEmptyBorder(0,5,0,0));
  titleArea.setOpaque(false);
  titleArea.setEditable(false);
  titleArea.setAlignmentX(Component.RIGHT_ALIGNMENT);
  statusMessageMenu=new StatusMessageMenu(protocolProvider,true);
  statusMessageMenu.addPropertyChangeListener(this);
  updateTitleArea();
  this.add(titleArea);
  this.addSeparator();
  while (statusIterator.hasNext()) {
    PresenceStatus status=statusIterator.next();
    int connectivity=status.getStatus();
    if (connectivity < 1) {
      this.offlineStatus=status;
    }
 else     if ((onlineStatus != null && (onlineStatus.getStatus() < connectivity)) || (onlineStatus == null && (connectivity > 50 && connectivity < 80))) {
      this.onlineStatus=status;
    }
    this.addItem(status.getStatusName(),new ImageIcon(status.getStatusIcon()),this);
  }
  this.addSeparator();
  this.add((JMenu)statusMessageMenu.getMenu());
  this.setSelectedStatus(offlineStatus);
  updateStatus(offlineStatus);
}
