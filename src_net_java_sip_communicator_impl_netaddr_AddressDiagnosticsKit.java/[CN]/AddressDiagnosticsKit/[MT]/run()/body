{
  logger.debug("Started a diag kit for entry: " + addressEntry);
  setDiagnosticsStatus(DIAGNOSTICS_STATUS_DISOVERING_CONFIG);
  InetAddress address=addressEntry.getInetAddress();
  if (addressEntry.isIPv6()) {
    if (addressEntry.isLinkLocal()) {
      addressEntry.setAddressPreference(ADDR_PREF_LOCAL_IPV6);
      setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
      return;
    }
    if (addressEntry.is6to4()) {
      addressEntry.setAddressPreference(AddressPreference.MIN);
      setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
      return;
    }
    addressEntry.setAddressPreference(ADDR_PREF_GLOBAL_IPV6);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_COMPLETED);
    return;
  }
  if (addressEntry.isIPv4LinkLocalAutoconf()) {
    addressEntry.setAddressPreference(AddressPreference.MIN);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    return;
  }
  if (addressEntry.isLinkLocalIPv4Address()) {
    addressEntry.setAddressPreference(ADDR_PREF_PRIVATE_IPV4);
  }
 else {
    addressEntry.setAddressPreference(ADDR_PREF_GLOBAL_IPV4);
  }
  if (!useStun) {
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    return;
  }
  for (int i=0; i < bindRetries; i++) {
    StunAddress localStunAddress=new StunAddress(address,1024 + (int)(Math.random() * 64512));
    try {
      stunClient=new StunClient(localStunAddress);
      stunClient.start();
      logger.debug("Successfully started StunClient for  " + localStunAddress + ".");
      break;
    }
 catch (    StunException ex) {
      if (ex.getCause() instanceof SocketException && i < bindRetries) {
        logger.debug("Failed to bind to " + localStunAddress + ". Retrying ...");
        logger.debug("Exception was ",ex);
        continue;
      }
      logger.error("Failed to start a stun client for address entry [" + addressEntry.toString() + "]:"+ localStunAddress.getPort()+ ". Ceasing attempts",ex);
      setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
      return;
    }
  }
  StunMessageEvent event=null;
  try {
    event=stunClient.doStunTestI(primaryStunServerAddress);
  }
 catch (  StunException ex) {
    logger.error("Failed to perform STUN Test I for address entry" + addressEntry.toString(),ex);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  if (event == null) {
    logger.debug("There seems to be no inet connectivity for " + addressEntry);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    logger.debug("stun test 1 failed");
    return;
  }
  boolean isPublic;
  Message stunResponse=event.getMessage();
  Attribute mappedAttr=stunResponse.getAttribute(Attribute.MAPPED_ADDRESS);
  StunAddress mappedAddrFromTestI=((MappedAddressAttribute)mappedAttr).getAddress();
  Attribute changedAddressAttributeFromTestI=stunResponse.getAttribute(Attribute.CHANGED_ADDRESS);
  StunAddress secondaryStunServerAddress=((ChangedAddressAttribute)changedAddressAttributeFromTestI).getAddress();
  if (mappedAddrFromTestI == null) {
    logger.error("Stun Server did not return a mapped address for entry " + addressEntry.toString());
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    return;
  }
  if (mappedAddrFromTestI.equals(event.getSourceAccessPoint().getAddress())) {
    isPublic=true;
  }
 else {
    isPublic=false;
  }
  try {
    event=stunClient.doStunTestII(primaryStunServerAddress);
  }
 catch (  StunException ex) {
    logger.error("Failed to perform STUN Test II for address entry" + addressEntry.toString(),ex);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    logger.debug("stun test 2 failed");
    return;
  }
  if (event != null) {
    logger.error("Secondary STUN server is down" + addressEntry.toString());
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  try {
    event=stunClient.doStunTestI(secondaryStunServerAddress);
    logger.debug("stun test 1 succeeded with s server 2");
  }
 catch (  StunException ex) {
    logger.error("Failed to perform STUN Test I for address entry" + addressEntry.toString(),ex);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  if (event == null) {
    logger.error("Secondary STUN server is down" + addressEntry.toString());
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  stunResponse=event.getMessage();
  mappedAttr=stunResponse.getAttribute(Attribute.MAPPED_ADDRESS);
  StunAddress mappedAddrFromSecServer=((MappedAddressAttribute)mappedAttr).getAddress();
  if (!mappedAddrFromTestI.equals(mappedAddrFromSecServer)) {
    logger.debug("We are behind a symmetric nat" + addressEntry.toString());
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  try {
    event=stunClient.doStunTestIII(primaryStunServerAddress);
    logger.debug("stun test 3 succeeded with s server 1");
  }
 catch (  StunException ex) {
    logger.error("Failed to perform STUN Test III for address entry" + addressEntry.toString(),ex);
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  if (event == null) {
    logger.debug("We are behind a port restricted NAT or fw" + addressEntry.toString());
    setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
    stunClient.shutDown();
    return;
  }
  logger.debug("We are behind a restricted NAT or fw" + addressEntry.toString());
  setDiagnosticsStatus(DIAGNOSTICS_STATUS_TERMINATED);
  stunClient.shutDown();
}
