{
  logger.trace("Receive event for adding a friend : " + ev);
  ContactGroupYahooImpl group=findContactGroup(ev.getGroup());
  if (group == null) {
    logger.trace("Group not found!" + ev.getGroup());
    return;
  }
  String contactID=ev.getFriend().getId();
  ContactYahooImpl contactToAdd=findContactById(contactID);
  if (!group.isResolved()) {
    if (contactToAdd != null && contactToAdd.isVolatile()) {
      ContactGroupYahooImpl parent=(ContactGroupYahooImpl)contactToAdd.getParentContactGroup();
      parent.removeContact(contactToAdd);
      fireContactRemoved(parent,contactToAdd);
    }
    YahooGroup gr=findGroup(ev.getGroup());
    if (gr != null)     group.setResolved(gr);
    return;
  }
  boolean isVolatile=false;
  if (contactToAdd == null) {
    if (addedCustomYahooIds.containsKey(contactID)) {
      String expectedContactID=(String)addedCustomYahooIds.remove(contactID);
      contactToAdd=new ContactYahooImpl(expectedContactID,ev.getFriend(),ServerStoredContactListYahooImpl.this,true,true);
    }
 else {
      contactToAdd=new ContactYahooImpl(ev.getFriend(),ServerStoredContactListYahooImpl.this,true,true);
    }
  }
 else {
    isVolatile=contactToAdd.isVolatile();
  }
  Object isWaitingForMove=waitMove.get(contactID);
  if (isWaitingForMove != null && isWaitingForMove instanceof String) {
    String oldParent=(String)isWaitingForMove;
    group.addContact(contactToAdd);
    waitMove.put(contactID,group.getSourceGroup());
    try {
      yahooSession.removeFriend(contactID,oldParent);
    }
 catch (    IOException ex) {
      logger.info("Cannot Remove(till moving) contact :" + contactToAdd + " from group "+ oldParent);
    }
    return;
  }
  if (isVolatile) {
    ContactGroupYahooImpl parent=(ContactGroupYahooImpl)contactToAdd.getParentContactGroup();
    parent.removeContact(contactToAdd);
    fireContactRemoved(parent,contactToAdd);
    contactToAdd.setPersistent(true);
    contactToAdd.setResolved(ev.getFriend());
    group.addContact(contactToAdd);
    fireContactAdded(group,contactToAdd);
    waitMove.remove(contactID);
    return;
  }
  group.addContact(contactToAdd);
  fireContactAdded(group,contactToAdd);
}
