{
  try {
    String transport=inputAddress.getTransport();
    String hostAddress=inputAddress.getHost();
    if (transport == null)     transport=ListeningPoint.UDP;
    String host=null;
    int port=0;
    if (NetworkUtils.isValidIPAddress(hostAddress)) {
      byte[] addr=null;
      addr=NetworkUtils.strToIPv4(hostAddress);
      if (addr == null) {
        addr=NetworkUtils.strToIPv6(hostAddress);
      }
      InetSocketAddress hostSocketAddress=new InetSocketAddress(InetAddress.getByAddress(hostAddress,addr),inputAddress.getPort());
      return new HopImpl(hostSocketAddress.getHostName(),inputAddress.getPort(),transport);
    }
 else     if (transport.equalsIgnoreCase(ListeningPoint.TLS)) {
      SRVRecord srvRecord=NetworkUtils.getSRVRecord("sips",ListeningPoint.TCP,hostAddress);
      if (srvRecord != null) {
        host=srvRecord.getTarget();
        port=srvRecord.getPort();
      }
    }
 else {
      SRVRecord srvRecord=NetworkUtils.getSRVRecord("sip",transport,hostAddress);
      if (srvRecord != null) {
        host=srvRecord.getTarget();
        port=srvRecord.getPort();
      }
    }
    if (host != null) {
      if (logger.isTraceEnabled())       logger.trace("Returning hop as follows" + " host= " + host + " port= "+ port+ " transport= "+ transport);
      return new HopImpl(host,port,transport);
    }
  }
 catch (  Exception ex) {
    if (logger.isDebugEnabled())     logger.debug("Domain " + inputAddress + " could not be resolved "+ ex.getMessage());
    if (logger.isTraceEnabled())     logger.trace("Printing SRV resolution stack trace",ex);
  }
  Hop returnHop;
  if (inputAddress.getPort() != -1) {
    returnHop=inputAddress;
  }
 else {
    String transport=inputAddress.getTransport();
    returnHop=new HopImpl(inputAddress.getHost(),MessageProcessor.getDefaultPort(transport),transport);
  }
  if (logger.isDebugEnabled())   logger.debug("Returning hop: " + returnHop);
  return returnHop;
}
