{
  try {
    if (!objReceived.getString("function").equals("sendlist") || !objReceived.has("payload"))     return;
    JSONObject payload=objReceived.getJSONObject("payload");
    Iterator iter=payload.keys();
    List<JSONObject> phoneList=new ArrayList<JSONObject>();
    while (iter.hasNext()) {
      JSONObject obj=(JSONObject)payload.get((String)iter.next());
      Iterator phonesIter=obj.keys();
      while (phonesIter.hasNext())       phoneList.add((JSONObject)obj.get((String)phonesIter.next()));
    }
    for (    JSONObject phone : phoneList) {
      try {
        if (!phone.getString("tech").equalsIgnoreCase("sip"))         continue;
        String groupName=phone.getString("context");
        ContactGroupSipImpl parentGroup=findGroupByName(groupName);
        if (parentGroup == null) {
          parentGroup=new ContactGroupSipImpl(groupName,sipProvider);
          parentGroup.setPersistent(true);
          getRootGroup().addSubgroup(parentGroup);
          fireGroupEvent(parentGroup,ServerStoredGroupEvent.GROUP_CREATED_EVENT);
        }
        String number=phone.getString("number");
        Address address=sipProvider.parseAddressString(number);
        ContactSipImpl contact=parentOperationSet.resolveContactID(address.toString());
        if (contact == null) {
          contact=new ContactSipImpl(address,sipProvider);
          contact.setDisplayName(phone.getString("firstname") + " " + phone.getString("lastname"));
          contact.setResolved(true);
          parentGroup.addContact(contact);
          fireContactAdded(parentGroup,contact);
        }
 else {
          contact.setDisplayName(phone.getString("firstname") + " " + phone.getString("lastname"));
          contact.setResolved(true);
          fireContactResolved(parentGroup,contact);
        }
      }
 catch (      Throwable t) {
        logger.error("Error parsing " + phone);
      }
    }
  }
 catch (  Throwable t) {
    logger.error("Error init list from server",t);
  }
}
