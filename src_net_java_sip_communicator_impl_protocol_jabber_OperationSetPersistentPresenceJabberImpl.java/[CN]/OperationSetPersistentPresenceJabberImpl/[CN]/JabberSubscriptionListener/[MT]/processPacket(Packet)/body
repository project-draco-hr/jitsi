{
  Presence presence=(Presence)packet;
  if (presence == null)   return;
  Presence.Type presenceType=presence.getType();
  final String fromID=presence.getFrom();
  if (presenceType == Presence.Type.subscribe) {
synchronized (this) {
      if (handler == null) {
        earlySubscriptions.add(fromID);
        return;
      }
    }
    handleSubscribeReceived(fromID);
  }
 else   if (presenceType == Presence.Type.unsubscribed) {
    if (logger.isTraceEnabled())     logger.trace(fromID + " does not allow your subscription");
    if (handler == null) {
      logger.warn("No to handle unsubscribed AuthorizationHandler for " + fromID);
      return;
    }
    ContactJabberImpl contact=ssContactList.findContactById(fromID);
    if (contact != null) {
      AuthorizationResponse response=new AuthorizationResponse(AuthorizationResponse.REJECT,"");
      handler.processAuthorizationResponse(response,contact);
      try {
        ssContactList.removeContact(contact);
      }
 catch (      OperationFailedException e) {
        logger.error("Cannot remove contact that unsubscribed.");
      }
    }
  }
 else   if (presenceType == Presence.Type.subscribed) {
    if (handler == null) {
      logger.warn("No AuthorizationHandler to handle subscribed for " + fromID);
      return;
    }
    ContactJabberImpl contact=ssContactList.findContactById(fromID);
    AuthorizationResponse response=new AuthorizationResponse(AuthorizationResponse.ACCEPT,"");
    handler.processAuthorizationResponse(response,contact);
  }
}
