{
  float[] signal_8kHz=new float[Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 8];
  float[] signal_4kHz=new float[Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 4];
  float[] scratch_mem=new float[Silk_common_pitch_est_defines.PITCH_EST_MAX_FRAME_LENGTH * 3];
  float[] filt_state=new float[Silk_common_pitch_est_defines.PITCH_EST_MAX_DECIMATE_STATE_LENGTH];
  int i, k, d, j;
  float threshold, contour_bias;
  float[][] C=new float[Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR][(Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG >> 1) + 5];
  float[] CC=new float[Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE2_EXT];
  float[] target_ptr, basis_ptr;
  int target_ptr_offset, basis_ptr_offset;
  double cross_corr, normalizer, energy, energy_tmp;
  int[] d_srch=new int[Silk_common_pitch_est_defines.PITCH_EST_D_SRCH_LENGTH];
  short[] d_comp=new short[(Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG >> 1) + 5];
  int length_d_srch, length_d_comp;
  float Cmax, CCmax, CCmax_b, CCmax_new_b, CCmax_new;
  int CBimax, CBimax_new, lag, start_lag, end_lag, lag_new;
  int cbk_offset, cbk_size;
  float lag_log2, prevLag_log2, delta_lag_log2_sqr;
  float[][][] energies_st3=new float[Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR][Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE3_MAX][Silk_common_pitch_est_defines.PITCH_EST_NB_STAGE3_LAGS];
  float[][][] cross_corr_st3=new float[Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR][Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE3_MAX][Silk_common_pitch_est_defines.PITCH_EST_NB_STAGE3_LAGS];
  int diff, lag_counter;
  int frame_length, frame_length_8kHz, frame_length_4kHz;
  int sf_length, sf_length_8kHz, sf_length_4kHz;
  int min_lag, min_lag_8kHz, min_lag_4kHz;
  int max_lag, max_lag_8kHz, max_lag_4kHz;
  int nb_cbks_stage2;
  assert(Fs_kHz == 8 || Fs_kHz == 12 || Fs_kHz == 16 || Fs_kHz == 24);
  assert(complexity >= Silk_SigProc_FIX.SKP_Silk_PITCH_EST_MIN_COMPLEX);
  assert(complexity <= Silk_SigProc_FIX.SKP_Silk_PITCH_EST_MAX_COMPLEX);
  assert(search_thres1 >= 0.0f && search_thres1 <= 1.0f);
  assert(search_thres2 >= 0.0f && search_thres2 <= 1.0f);
  frame_length=Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * Fs_kHz;
  frame_length_4kHz=Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 4;
  frame_length_8kHz=Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 8;
  sf_length=frame_length >> 3;
  sf_length_4kHz=frame_length_4kHz >> 3;
  sf_length_8kHz=frame_length_8kHz >> 3;
  min_lag=Silk_common_pitch_est_defines.PITCH_EST_MIN_LAG_MS * Fs_kHz;
  min_lag_4kHz=Silk_common_pitch_est_defines.PITCH_EST_MIN_LAG_MS * 4;
  min_lag_8kHz=Silk_common_pitch_est_defines.PITCH_EST_MIN_LAG_MS * 8;
  max_lag=Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG_MS * Fs_kHz;
  max_lag_4kHz=Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG_MS * 4;
  max_lag_8kHz=Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG_MS * 8;
  for (int i_djinn=0; i_djinn < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; i_djinn++)   for (int j_djinn=0; j_djinn < (Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG >> 1) + 5; j_djinn++)   C[i_djinn][j_djinn]=0;
  if (Fs_kHz == 12) {
    short[] signal_12=new short[12 * Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS];
    short[] signal_8=new short[8 * Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS];
    int[] R23=new int[6];
    for (int i_djinn=0; i_djinn < 6; i_djinn++)     R23[i_djinn]=0;
    Silk_SigProc_FLP.SKP_float2short_array(signal_12,0,signal,0,Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 12);
    Silk_resampler_down2_3.SKP_Silk_resampler_down2_3(R23,0,signal_8,0,signal_12,0,Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS * 12);
    Silk_SigProc_FLP.SKP_short2float_array(signal_8kHz,0,signal_8,0,frame_length_8kHz);
  }
 else   if (Fs_kHz == 16) {
    if (complexity == Silk_SigProc_FIX.SKP_Silk_PITCH_EST_MAX_COMPLEX) {
      assert(4 <= Silk_common_pitch_est_defines.PITCH_EST_MAX_DECIMATE_STATE_LENGTH);
      for (int i_djinn=0; i_djinn < 4; i_djinn++)       filt_state[i_djinn]=0;
      Silk_decimate2_coarse_FLP.SKP_Silk_decimate2_coarse_FLP(signal,0,filt_state,0,signal_8kHz,0,scratch_mem,0,frame_length_8kHz);
    }
 else {
      assert(2 <= Silk_common_pitch_est_defines.PITCH_EST_MAX_DECIMATE_STATE_LENGTH);
      for (int i_djinn=0; i_djinn < 2; i_djinn++)       filt_state[i_djinn]=0;
      Silk_decimate2_coarsest_FLP.SKP_Silk_decimate2_coarsest_FLP(signal,0,filt_state,0,signal_8kHz,0,scratch_mem,0,frame_length_8kHz);
    }
  }
 else   if (Fs_kHz == 24) {
    short[] signal_24=new short[Silk_common_pitch_est_defines.PITCH_EST_MAX_FRAME_LENGTH];
    short[] signal_8=new short[8 * Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS];
    int[] filt_state_fix=new int[8];
    Silk_SigProc_FLP.SKP_float2short_array(signal_24,0,signal,0,24 * Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS);
    for (int i_djinn=0; i_djinn < 8; i_djinn++)     filt_state_fix[i_djinn]=0;
    Silk_resampler_down3.SKP_Silk_resampler_down3(filt_state_fix,0,signal_8,0,signal_24,0,24 * Silk_common_pitch_est_defines.PITCH_EST_FRAME_LENGTH_MS);
    Silk_SigProc_FLP.SKP_short2float_array(signal_8kHz,0,signal_8,0,frame_length_8kHz);
  }
 else {
    assert(Fs_kHz == 8);
    for (int i_djinn=0; i_djinn < frame_length_8kHz; i_djinn++)     signal_8kHz[i_djinn]=signal[i_djinn];
  }
  if (complexity == Silk_SigProc_FIX.SKP_Silk_PITCH_EST_MAX_COMPLEX) {
    assert(4 <= Silk_common_pitch_est_defines.PITCH_EST_MAX_DECIMATE_STATE_LENGTH);
    for (int i_djinn=0; i_djinn < 4; i_djinn++)     filt_state[i_djinn]=0;
    Silk_decimate2_coarse_FLP.SKP_Silk_decimate2_coarse_FLP(signal_8kHz,0,filt_state,0,signal_4kHz,0,scratch_mem,0,frame_length_4kHz);
  }
 else {
    assert(2 <= Silk_common_pitch_est_defines.PITCH_EST_MAX_DECIMATE_STATE_LENGTH);
    for (int i_djinn=0; i_djinn < 4; i_djinn++)     filt_state[i_djinn]=0;
    Silk_decimate2_coarsest_FLP.SKP_Silk_decimate2_coarsest_FLP(signal_8kHz,0,filt_state,0,signal_4kHz,0,scratch_mem,0,frame_length_4kHz);
  }
  for (i=frame_length_4kHz - 1; i > 0; i--) {
    signal_4kHz[i]+=signal_4kHz[i - 1];
  }
  target_ptr=signal_4kHz;
  target_ptr_offset=frame_length_4kHz >> 1;
  for (k=0; k < 2; k++) {
    assert(target_ptr_offset >= 0);
    assert(target_ptr_offset + sf_length_8kHz <= frame_length_4kHz);
    basis_ptr=target_ptr;
    basis_ptr_offset=target_ptr_offset - min_lag_4kHz;
    assert(basis_ptr_offset >= 0);
    assert(basis_ptr_offset + sf_length_8kHz <= frame_length_4kHz);
    cross_corr=Silk_inner_product_FLP.SKP_Silk_inner_product_FLP(target_ptr,target_ptr_offset,basis_ptr,basis_ptr_offset,sf_length_8kHz);
    normalizer=Silk_energy_FLP.SKP_Silk_energy_FLP(basis_ptr,basis_ptr_offset,sf_length_8kHz) + 1000.0f;
    C[0][min_lag_4kHz]+=(float)(cross_corr / Math.sqrt(normalizer));
    for (d=min_lag_4kHz + 1; d <= max_lag_4kHz; d++) {
      basis_ptr_offset--;
      assert(basis_ptr_offset >= 0);
      assert(basis_ptr_offset + sf_length_8kHz <= frame_length_4kHz);
      cross_corr=Silk_inner_product_FLP.SKP_Silk_inner_product_FLP(target_ptr,target_ptr_offset,basis_ptr,basis_ptr_offset,sf_length_8kHz);
      normalizer+=basis_ptr[basis_ptr_offset + 0] * basis_ptr[basis_ptr_offset + 0] - basis_ptr[basis_ptr_offset + sf_length_8kHz] * basis_ptr[basis_ptr_offset + sf_length_8kHz];
      C[0][d]+=(float)(cross_corr / Math.sqrt(normalizer));
    }
    target_ptr_offset+=sf_length_8kHz;
  }
  for (i=max_lag_4kHz; i >= min_lag_4kHz; i--) {
    C[0][i]-=C[0][i] * i / 4096.0f;
  }
  length_d_srch=5 + complexity;
  assert(length_d_srch <= Silk_common_pitch_est_defines.PITCH_EST_D_SRCH_LENGTH);
  Silk_sort_FLP.SKP_Silk_insertion_sort_decreasing_FLP(C[0],min_lag_4kHz,d_srch,max_lag_4kHz - min_lag_4kHz + 1,length_d_srch);
  Cmax=C[0][min_lag_4kHz];
  target_ptr=signal_4kHz;
  target_ptr_offset=frame_length_4kHz >> 1;
  energy=1000.0f;
  for (i=0; i < frame_length_4kHz >> 1; i++) {
    energy+=target_ptr[target_ptr_offset + i] * target_ptr[target_ptr_offset + i];
  }
  threshold=Cmax * Cmax;
  if (energy / 16.0f > threshold) {
    for (int i_djinn=0; i_djinn < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; i_djinn++)     pitch_out[i_djinn]=0;
    LTPCorr[0]=0.0f;
    lagIndex[0]=0;
    contourIndex[0]=0;
    return 1;
  }
  threshold=search_thres1 * Cmax;
  for (i=0; i < length_d_srch; i++) {
    if (C[0][min_lag_4kHz + i] > threshold) {
      d_srch[i]=(d_srch[i] + min_lag_4kHz) << 1;
    }
 else {
      length_d_srch=i;
      break;
    }
  }
  assert(length_d_srch > 0);
  for (i=min_lag_8kHz - 5; i < max_lag_8kHz + 5; i++) {
    d_comp[i]=0;
  }
  for (i=0; i < length_d_srch; i++) {
    d_comp[d_srch[i]]=1;
  }
  for (i=max_lag_8kHz + 3; i >= min_lag_8kHz; i--) {
    d_comp[i]+=d_comp[i - 1] + d_comp[i - 2];
  }
  length_d_srch=0;
  for (i=min_lag_8kHz; i < max_lag_8kHz + 1; i++) {
    if (d_comp[i + 1] > 0) {
      d_srch[length_d_srch]=i;
      length_d_srch++;
    }
  }
  for (i=max_lag_8kHz + 3; i >= min_lag_8kHz; i--) {
    d_comp[i]+=d_comp[i - 1] + d_comp[i - 2] + d_comp[i - 3];
  }
  length_d_comp=0;
  for (i=min_lag_8kHz; i < max_lag_8kHz + 4; i++) {
    if (d_comp[i] > 0) {
      d_comp[length_d_comp]=(short)(i - 2);
      length_d_comp++;
    }
  }
  for (int i_djinn=0; i_djinn < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; i_djinn++)   for (int j_djinn=0; j_djinn < ((Silk_common_pitch_est_defines.PITCH_EST_MAX_LAG >> 1) + 5); j_djinn++)   C[i_djinn][j_djinn]=0;
  target_ptr=signal_8kHz;
  target_ptr_offset=frame_length_4kHz;
  for (k=0; k < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; k++) {
    assert(target_ptr_offset >= 0);
    assert(target_ptr_offset + sf_length_8kHz <= frame_length_8kHz);
    energy_tmp=Silk_energy_FLP.SKP_Silk_energy_FLP(target_ptr,target_ptr_offset,sf_length_8kHz);
    for (j=0; j < length_d_comp; j++) {
      d=d_comp[j];
      basis_ptr=target_ptr;
      basis_ptr_offset=target_ptr_offset - d;
      assert(basis_ptr_offset >= 0);
      assert(basis_ptr_offset + sf_length_8kHz <= frame_length_8kHz);
      cross_corr=Silk_inner_product_FLP.SKP_Silk_inner_product_FLP(basis_ptr,basis_ptr_offset,target_ptr,target_ptr_offset,sf_length_8kHz);
      energy=Silk_energy_FLP.SKP_Silk_energy_FLP(basis_ptr,basis_ptr_offset,sf_length_8kHz);
      if (cross_corr > 0.0f) {
        C[k][d]=(float)(cross_corr * cross_corr / (energy * energy_tmp + eps));
      }
 else {
        C[k][d]=0.0f;
      }
    }
    target_ptr_offset+=sf_length_8kHz;
  }
  CCmax=0.0f;
  CCmax_b=-1000.0f;
  CBimax=0;
  lag=-1;
  if (prevLag > 0) {
    if (Fs_kHz == 12) {
      prevLag=(prevLag << 1) / 3;
    }
 else     if (Fs_kHz == 16) {
      prevLag=prevLag >> 1;
    }
 else     if (Fs_kHz == 24) {
      prevLag=prevLag / 3;
    }
    prevLag_log2=SKP_P_log2(prevLag);
  }
 else {
    prevLag_log2=0;
  }
  if (Fs_kHz == 8 && complexity > Silk_SigProc_FIX.SKP_Silk_PITCH_EST_MIN_COMPLEX) {
    nb_cbks_stage2=Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE2_EXT;
  }
 else {
    nb_cbks_stage2=Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE2;
  }
  for (k=0; k < length_d_srch; k++) {
    d=d_srch[k];
    for (j=0; j < nb_cbks_stage2; j++) {
      CC[j]=0.0f;
      for (i=0; i < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; i++) {
        CC[j]+=C[i][d + Silk_pitch_est_tables.SKP_Silk_CB_lags_stage2[i][j]];
      }
    }
    CCmax_new=-1000.0f;
    CBimax_new=0;
    for (i=0; i < nb_cbks_stage2; i++) {
      if (CC[i] > CCmax_new) {
        CCmax_new=CC[i];
        CBimax_new=i;
      }
    }
    CCmax_new=Math.max(CCmax_new,0.0f);
    CCmax_new_b=CCmax_new;
    lag_log2=SKP_P_log2(d);
    CCmax_new_b-=Silk_pitch_est_defines_FLP.PITCH_EST_FLP_SHORTLAG_BIAS * Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR * lag_log2;
    if (prevLag > 0) {
      delta_lag_log2_sqr=lag_log2 - prevLag_log2;
      delta_lag_log2_sqr*=delta_lag_log2_sqr;
      CCmax_new_b-=Silk_pitch_est_defines_FLP.PITCH_EST_FLP_PREVLAG_BIAS * Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR * LTPCorr[0]* delta_lag_log2_sqr / (delta_lag_log2_sqr + 0.5f);
    }
    if (CCmax_new_b > CCmax_b && CCmax_new > Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR * search_thres2 * search_thres2) {
      CCmax_b=CCmax_new_b;
      CCmax=CCmax_new;
      lag=d;
      CBimax=CBimax_new;
    }
  }
  if (lag == -1) {
    for (int i_djinn=0; i_djinn < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; i_djinn++)     pitch_out[i_djinn]=0;
    LTPCorr[0]=0.0f;
    lagIndex[0]=0;
    contourIndex[0]=0;
    return 1;
  }
  if (Fs_kHz > 8) {
    assert(lag == Silk_SigProc_FIX.SKP_SAT16(lag));
    if (Fs_kHz == 12) {
      lag=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULBB(lag,3),1);
    }
 else     if (Fs_kHz == 16) {
      lag=lag << 1;
    }
 else {
      lag=Silk_macros.SKP_SMULBB(lag,3);
    }
    lag=Silk_SigProc_FIX.SKP_LIMIT_int(lag,min_lag,max_lag);
    start_lag=Math.max(lag - 2,min_lag);
    end_lag=Math.min(lag + 2,max_lag);
    lag_new=lag;
    CBimax=0;
    assert(CCmax >= 0.0f);
    LTPCorr[0]=(float)Math.sqrt(CCmax / Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR);
    CCmax=-1000.0f;
    SKP_P_Ana_calc_corr_st3(cross_corr_st3,signal,0,start_lag,sf_length,complexity);
    SKP_P_Ana_calc_energy_st3(energies_st3,signal,0,start_lag,sf_length,complexity);
    lag_counter=0;
    assert(lag == Silk_SigProc_FIX.SKP_SAT16(lag));
    contour_bias=Silk_pitch_est_defines_FLP.PITCH_EST_FLP_FLATCONTOUR_BIAS / lag;
    cbk_size=Silk_pitch_est_tables.SKP_Silk_cbk_sizes_stage3[complexity];
    cbk_offset=Silk_pitch_est_tables.SKP_Silk_cbk_offsets_stage3[complexity];
    for (d=start_lag; d <= end_lag; d++) {
      for (j=cbk_offset; j < (cbk_offset + cbk_size); j++) {
        cross_corr=0.0;
        energy=eps;
        for (k=0; k < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; k++) {
          energy+=energies_st3[k][j][lag_counter];
          cross_corr+=cross_corr_st3[k][j][lag_counter];
        }
        if (cross_corr > 0.0) {
          CCmax_new=(float)(cross_corr * cross_corr / energy);
          diff=j - (Silk_common_pitch_est_defines.PITCH_EST_NB_CBKS_STAGE3_MAX >> 1);
          CCmax_new*=(1.0f - contour_bias * diff * diff);
        }
 else {
          CCmax_new=0.0f;
        }
        if (CCmax_new > CCmax) {
          CCmax=CCmax_new;
          lag_new=d;
          CBimax=j;
        }
      }
      lag_counter++;
    }
    for (k=0; k < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; k++) {
      pitch_out[k]=lag_new + Silk_pitch_est_tables.SKP_Silk_CB_lags_stage3[k][CBimax];
    }
    lagIndex[0]=lag_new - min_lag;
    contourIndex[0]=CBimax;
  }
 else {
    assert(CCmax >= 0.0f);
    LTPCorr[0]=(float)Math.sqrt(CCmax / Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR);
    for (k=0; k < Silk_common_pitch_est_defines.PITCH_EST_NB_SUBFR; k++) {
      pitch_out[k]=lag + Silk_pitch_est_tables.SKP_Silk_CB_lags_stage2[k][CBimax];
    }
    lagIndex[0]=lag - min_lag;
    contourIndex[0]=CBimax;
  }
  assert(lagIndex[0] >= 0);
  return 0;
}
