{
  int deviceCount=PortAudio.Pa_GetDeviceCount();
  int channels=1;
  int sampleSizeInBits=16;
  long sampleFormat=PortAudio.getPaSampleFormat(sampleSizeInBits);
  int defaultInputDeviceIndex=PortAudio.Pa_GetDefaultInputDevice();
  int defaultOutputDeviceIndex=PortAudio.Pa_GetDefaultOutputDevice();
  List<CaptureDeviceInfo> captureDevices=new LinkedList<CaptureDeviceInfo>();
  List<CaptureDeviceInfo> playbackDevices=new LinkedList<CaptureDeviceInfo>();
  for (int deviceIndex=0; deviceIndex < deviceCount; deviceIndex++) {
    long deviceInfo=PortAudio.Pa_GetDeviceInfo(deviceIndex);
    String name=PortAudio.PaDeviceInfo_getName(deviceInfo);
    if (name != null)     name=name.trim();
    int maxInputChannels=PortAudio.PaDeviceInfo_getMaxInputChannels(deviceInfo);
    int maxOutputChannels=PortAudio.PaDeviceInfo_getMaxOutputChannels(deviceInfo);
    CaptureDeviceInfo cdi=new CaptureDeviceInfo(name,new MediaLocator(LOCATOR_PROTOCOL + ":#" + deviceIndex),new Format[]{new AudioFormat(AudioFormat.LINEAR,(maxInputChannels > 0) ? getSupportedSampleRate(true,deviceIndex,channels,sampleFormat) : PortAudio.DEFAULT_SAMPLE_RATE,sampleSizeInBits,channels,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray)});
    if (maxInputChannels > 0) {
      if (deviceIndex == defaultInputDeviceIndex) {
        captureDevices.add(0,cdi);
        if (logger.isDebugEnabled())         logger.debug("Added default capture device: " + name);
      }
 else {
        captureDevices.add(cdi);
        if (logger.isDebugEnabled())         logger.debug("Added capture device: " + name);
      }
    }
    if (maxOutputChannels > 0) {
      if (deviceIndex == defaultOutputDeviceIndex) {
        playbackDevices.add(0,cdi);
        if (logger.isDebugEnabled())         logger.debug("Added default playback device: " + name);
      }
 else {
        playbackDevices.add(cdi);
        if (logger.isDebugEnabled())         logger.debug("Added playback device: " + name);
      }
    }
  }
  setCaptureDevices(captureDevices);
  setPlaybackDevices(playbackDevices);
  if (devicesChangedCallback == null) {
    devicesChangedCallback=new Runnable(){
      public void run(){
        try {
          PortAudio.Pa_UpdateAvailableDeviceList();
          initialize();
        }
 catch (        Throwable t) {
          if (t instanceof ThreadDeath)           throw (ThreadDeath)t;
          logger.warn("Failed to reinitialize PortAudio devices",t);
        }
      }
    }
;
    PortAudio.setDevicesChangedCallback(devicesChangedCallback);
  }
}
