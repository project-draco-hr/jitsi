{
  Boolean showOptionsProp=GuiActivator.getConfigurationService().getBoolean(ConfigurationFrame.SHOW_OPTIONS_WINDOW_PROPERTY,true);
  if (showOptionsProp.booleanValue()) {
    UIService uiService=GuiActivator.getUIService();
    if ((uiService == null) || !uiService.useMacOSXScreenMenuBar() || !registerConfigMenuItemMacOSX()) {
      registerConfigMenuItemNonMacOSX();
    }
  }
  conferenceMenuItem=new JMenuItem(GuiActivator.getResources().getI18NString("service.gui.CREATE_CONFERENCE_CALL"));
  conferenceMenuItem.setMnemonic(GuiActivator.getResources().getI18nMnemonic("service.gui.CREATE_CONFERENCE_CALL"));
  conferenceMenuItem.setName("conference");
  conferenceMenuItem.addActionListener(this);
  this.add(conferenceMenuItem);
  if (!GuiActivator.getConfigurationService().getBoolean(AUTO_ANSWER_MENU_DISABLED_PROP,false)) {
    AutoAnswerMenu autoAnswerMenu=new AutoAnswerMenu();
    this.add(autoAnswerMenu);
  }
  this.addSeparator();
  String offlineTextKey=ConfigurationManager.isShowOffline() ? "service.gui.HIDE_OFFLINE_CONTACTS" : "service.gui.SHOW_OFFLINE_CONTACTS";
  hideOfflineMenuItem=new JMenuItem(GuiActivator.getResources().getI18NString(offlineTextKey));
  hideOfflineMenuItem.setMnemonic(GuiActivator.getResources().getI18nMnemonic(offlineTextKey));
  hideOfflineMenuItem.setName("showHideOffline");
  hideOfflineMenuItem.addActionListener(this);
  this.add(hideOfflineMenuItem);
  String soundTextKey=GuiActivator.getAudioNotifier().isMute() ? "service.gui.SOUND_ON" : "service.gui.SOUND_OFF";
  soundMenuItem=new JMenuItem(GuiActivator.getResources().getI18NString(soundTextKey));
  soundMenuItem.setMnemonic(GuiActivator.getResources().getI18nMnemonic(soundTextKey));
  soundMenuItem.setName("sound");
  soundMenuItem.addActionListener(this);
  this.add(soundMenuItem);
  loadSkin();
}
