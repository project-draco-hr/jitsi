{
  UIService uiService=OsDependentActivator.getUIService();
  if (uiService == null) {
    try {
      OsDependentActivator.bundleContext.addServiceListener(new DelayedInitSystrayServiceListener(),'(' + Constants.OBJECTCLASS + '='+ UIService.class.getName()+ ')');
    }
 catch (    InvalidSyntaxException ise) {
    }
    return;
  }
  menu=TrayMenuFactory.createTrayMenu(this,systray.isSwing());
  boolean isMac=OSUtils.IS_MAC;
  if (OSUtils.IS_WINDOWS) {
    logoIcon=Resources.getImage("service.systray.TRAY_ICON_WINDOWS");
    logoIconOffline=Resources.getImage("service.systray.TRAY_ICON_WINDOWS_OFFLINE");
    logoIconAway=Resources.getImage("service.systray.TRAY_ICON_WINDOWS_AWAY");
    logoIconFFC=Resources.getImage("service.systray.TRAY_ICON_WINDOWS_FFC");
    logoIconDND=Resources.getImage("service.systray.TRAY_ICON_WINDOWS_DND");
    envelopeIcon=Resources.getImage("service.systray.MESSAGE_ICON_WINDOWS");
  }
 else   if (isMac) {
    logoIcon=Resources.getImage("service.systray.TRAY_ICON_MACOSX");
    logoIconWhite=Resources.getImage("service.systray.TRAY_ICON_MACOSX_WHITE");
    envelopeIcon=Resources.getImage("service.systray.MESSAGE_ICON_MACOSX");
    envelopeIconWhite=Resources.getImage("service.systray.MESSAGE_ICON_MACOSX_WHITE");
  }
 else {
    logoIcon=Resources.getImage("service.systray.TRAY_ICON");
    logoIconOffline=Resources.getImage("service.systray.TRAY_ICON_OFFLINE");
    logoIconAway=Resources.getImage("service.systray.TRAY_ICON_AWAY");
    logoIconFFC=Resources.getImage("service.systray.TRAY_ICON_FFC");
    logoIconDND=Resources.getImage("service.systray.TRAY_ICON_DND");
    envelopeIcon=Resources.getImage("service.systray.MESSAGE_ICON");
  }
  currentIcon=isMac ? logoIcon : logoIconOffline;
  trayIcon=new TrayIcon(currentIcon,Resources.getApplicationString("service.gui.APPLICATION_NAME"),menu);
  trayIcon.setIconAutoSize(true);
  if (isMac) {
    dockIconOnline=Resources.getImageURL("service.systray.DOCK_ICON_ONLINE");
    dockIconOffline=Resources.getImageURL("service.systray.DOCK_ICON_OFFLINE");
    dockIconAway=Resources.getImageURL("service.systray.DOCK_ICON_AWAY");
    dockIconFFC=Resources.getImageURL("service.systray.DOCK_ICON_FFC");
    dockIconDND=Resources.getImageURL("service.systray.DOCK_ICON_DND");
  }
  trayIcon.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      UIService uiService=OsDependentActivator.getUIService();
      ExportedWindow mainWindow=uiService.getExportedWindow(ExportedWindow.MAIN_WINDOW);
      boolean setIsVisible=!mainWindow.isVisible();
      uiService.setVisible(setIsVisible);
    }
  }
);
  if (isMac) {
    TrayMenuFactory.addPopupMenuListener(menu,new PopupMenuListener(){
      public void popupMenuWillBecomeVisible(      PopupMenuEvent e){
        ImageIcon newIcon=(currentIcon == envelopeIcon) ? envelopeIconWhite : logoIconWhite;
        trayIcon.setIcon(newIcon);
        currentIcon=newIcon;
      }
      public void popupMenuWillBecomeInvisible(      PopupMenuEvent e){
        ImageIcon newIcon=(currentIcon == envelopeIconWhite) ? envelopeIcon : logoIcon;
        getTrayIcon().setIcon(newIcon);
        currentIcon=newIcon;
      }
      public void popupMenuCanceled(      PopupMenuEvent e){
        popupMenuWillBecomeInvisible(e);
      }
    }
);
  }
  PopupMessageHandler pmh=null;
  if (!isMac) {
    pmh=new PopupMessageHandlerTrayIconImpl(trayIcon);
    popupHandlerSet.put(pmh.getClass().getName(),pmh);
    OsDependentActivator.bundleContext.registerService(PopupMessageHandler.class.getName(),pmh,null);
  }
  try {
    OsDependentActivator.bundleContext.addServiceListener(new ServiceListenerImpl(),"(objectclass=" + PopupMessageHandler.class.getName() + ")");
  }
 catch (  Exception e) {
    logger.warn(e);
  }
  ServiceReference[] handlerRefs=null;
  try {
    handlerRefs=OsDependentActivator.bundleContext.getServiceReferences(PopupMessageHandler.class.getName(),null);
  }
 catch (  InvalidSyntaxException ise) {
    logger.error("Error while retrieving service refs",ise);
  }
  if (handlerRefs != null) {
    String configuredHandler=(String)cfg.getProperty("systray.POPUP_HANDLER");
    for (    ServiceReference handlerRef : handlerRefs) {
      PopupMessageHandler handler=(PopupMessageHandler)OsDependentActivator.bundleContext.getService(handlerRef);
      String handlerName=handler.getClass().getName();
      if (!popupHandlerSet.containsKey(handlerName)) {
        popupHandlerSet.put(handlerName,handler);
        if (logger.isInfoEnabled()) {
          logger.info("added the following popup handler : " + handler);
        }
        if ((configuredHandler != null) && configuredHandler.equals(handler.getClass().getName())) {
          setActivePopupMessageHandler(handler);
        }
      }
    }
    if (configuredHandler == null)     selectBestPopupMessageHandler();
  }
  if ((activePopupHandler == null) && (pmh != null))   setActivePopupMessageHandler(pmh);
  SwingUtilities.invokeLater(new Runnable(){
    public void run(){
      systray.addTrayIcon(trayIcon);
    }
  }
);
  initialized=true;
  uiService.setExitOnMainWindowClose(false);
}
