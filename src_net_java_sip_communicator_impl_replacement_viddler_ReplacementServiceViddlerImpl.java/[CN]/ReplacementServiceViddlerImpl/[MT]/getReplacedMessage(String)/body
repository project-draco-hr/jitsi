{
  final Pattern p=Pattern.compile(VIDDLER_PATTERN,Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
  Matcher m=p.matcher(chatString);
  int count=0, startPos=0;
  StringBuffer msgBuff=new StringBuffer();
  while (m.find()) {
    count++;
    msgBuff.append(chatString.substring(startPos,m.start()));
    startPos=m.end();
    try {
      String url=sourceURL + "&url=" + m.group(1)+ "/";
      URL sourceURL=new URL(url);
      URLConnection conn=sourceURL.openConnection();
      BufferedReader in=new BufferedReader(new InputStreamReader(conn.getInputStream()));
      String inputLine;
      StringBuffer holder=new StringBuffer();
      while ((inputLine=in.readLine()) != null)       holder.append(inputLine);
      in.close();
      String startTag="<thumbnail_url>";
      String endTag="</thumbnail_url>";
      String response=holder.toString();
      int start=response.indexOf(startTag) + startTag.length();
      int end=response.toString().indexOf(endTag);
      String thumbUrl=response.substring(start,end);
      if (thumbUrl != null) {
        msgBuff.append("<IMG HEIGHT=\"90\" WIDTH=\"120\" SRC=\"");
        msgBuff.append(thumbUrl);
        msgBuff.append("\"></IMG>");
      }
 else {
        startPos=0;
        msgBuff=new StringBuffer();
      }
    }
 catch (    Exception e) {
      startPos=0;
      msgBuff=new StringBuffer();
      e.printStackTrace();
    }
  }
  msgBuff.append(chatString.substring(startPos));
  if (!msgBuff.toString().equals(chatString))   return msgBuff.toString();
  return chatString;
}
