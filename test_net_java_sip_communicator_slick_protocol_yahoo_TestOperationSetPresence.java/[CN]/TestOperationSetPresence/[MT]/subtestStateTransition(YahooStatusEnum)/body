{
  logger.trace(" --=== beginning state transition test ===--");
  PresenceStatus oldStatus=operationSetPresence2.getPresenceStatus();
  logger.debug("old status is=" + oldStatus.getStatusName() + " new status="+ newStatus.getStatusName()+ " for contact : "+ fixture.userID2);
  PresenceStatusEventCollector statusEventCollector2=new PresenceStatusEventCollector();
  ContactPresenceEventCollector statusEventCollector1=new ContactPresenceEventCollector(fixture.userID2,newStatus);
  operationSetPresence2.addProviderPresenceStatusListener(statusEventCollector2);
  operationSetPresence1.addContactPresenceStatusListener(statusEventCollector1);
  operationSetPresence2.publishPresenceStatus(newStatus,null);
  statusEventCollector2.waitForPresEvent(10000);
  statusEventCollector1.waitForEvent(10000);
  operationSetPresence2.removeProviderPresenceStatusListener(statusEventCollector2);
  operationSetPresence1.removeContactPresenceStatusListener(statusEventCollector1);
  assertEquals("Events dispatched during an event transition.",1,statusEventCollector2.collectedPresEvents.size());
  assertEquals("A status changed event contained wrong old status.",oldStatus,((ProviderPresenceStatusChangeEvent)statusEventCollector2.collectedPresEvents.get(0)).getOldStatus());
  assertEquals("A status changed event contained wrong new status.",newStatus,((ProviderPresenceStatusChangeEvent)statusEventCollector2.collectedPresEvents.get(0)).getNewStatus());
  assertEquals("opSet.getPresenceStatus() did not return properly.",newStatus,operationSetPresence2.getPresenceStatus());
  YahooStatusEnum actualStatus=(YahooStatusEnum)operationSetPresence1.queryContactStatus(fixture.userID2);
  assertEquals("The underlying implementation did not switch to the " + "requested presence status.",newStatus,actualStatus);
  logger.trace(" --=== finished test ===--");
}
