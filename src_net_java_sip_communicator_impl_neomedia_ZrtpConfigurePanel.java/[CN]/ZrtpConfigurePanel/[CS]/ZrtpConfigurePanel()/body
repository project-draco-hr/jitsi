{
  JPanel mainPanel=new TransparentPanel();
  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
  JPanel panel=new TransparentPanel();
  panel.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
  panel.setLayout(new GridLayout(5,1));
  final JButton stdButton=new JButton(NeomediaActivator.getResources().getI18NString("impl.media.security.zrtp.STANDARD"));
  stdButton.setOpaque(false);
  final JButton mandButton=new JButton(NeomediaActivator.getResources().getI18NString("impl.media.security.zrtp.MANDATORY"));
  mandButton.setOpaque(false);
  final JButton saveButton=new JButton(NeomediaActivator.getResources().getI18NString("service.gui.SAVE"));
  saveButton.setOpaque(false);
  JPanel buttonBar=new TransparentPanel(new GridLayout(1,7));
  buttonBar.add(stdButton);
  buttonBar.add(mandButton);
  buttonBar.add(Box.createHorizontalStrut(10));
  buttonBar.add(saveButton);
  mainPanel.add(buttonBar);
  mainPanel.add(Box.createVerticalStrut(7));
  boolean trusted=NeomediaActivator.getConfigurationService().getBoolean(TRUSTED_PROP,false);
  boolean sasSign=NeomediaActivator.getConfigurationService().getBoolean(SASSIGN_PROP,false);
  JPanel checkBar=new JPanel(new GridLayout(1,2));
  final JCheckBox trustedMitM=new JCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.security.zrtp.TRUSTED"),trusted);
  final JCheckBox sasSignature=new JCheckBox(NeomediaActivator.getResources().getI18NString("impl.media.security.zrtp.SASSIGNATURE"),sasSign);
  checkBar.add(trustedMitM);
  checkBar.add(sasSignature);
  mainPanel.add(checkBar);
  mainPanel.add(Box.createVerticalStrut(7));
  ActionListener buttonListener=new ActionListener(){
    public void actionPerformed(    ActionEvent event){
      Object source=event.getSource();
      if (source == stdButton) {
        inActive.clear();
        active.setStandardConfig();
        pkc.setStandard();
        hc.setStandard();
        sc.setStandard();
        cc.setStandard();
        lc.setStandard();
      }
 else       if (source == mandButton) {
        inActive.clear();
        active.setMandatoryOnly();
        pkc.setStandard();
        hc.setStandard();
        sc.setStandard();
        cc.setStandard();
        lc.setStandard();
      }
 else       if (source == saveButton) {
        Boolean t=new Boolean(active.isTrustedMitM());
        Boolean s=new Boolean(active.isSasSignature());
        NeomediaActivator.getConfigurationService().setProperty(TRUSTED_PROP,t);
        NeomediaActivator.getConfigurationService().setProperty(SASSIGN_PROP,s);
        pkc.saveConfig();
        hc.saveConfig();
        sc.saveConfig();
        cc.saveConfig();
        lc.saveConfig();
      }
 else       return;
    }
  }
;
  stdButton.addActionListener(buttonListener);
  mandButton.addActionListener(buttonListener);
  saveButton.addActionListener(buttonListener);
  ItemListener itemListener=new ItemListener(){
    public void itemStateChanged(    ItemEvent e){
      Object source=e.getItemSelectable();
      if (source == trustedMitM) {
        active.setTrustedMitM(trustedMitM.isSelected());
      }
 else       if (source == sasSignature) {
        active.setSasSignature(sasSignature.isSelected());
      }
    }
  }
;
  trustedMitM.addItemListener(itemListener);
  sasSignature.addItemListener(itemListener);
  panel.add(pkc);
  panel.add(hc);
  panel.add(cc);
  panel.add(sc);
  panel.add(lc);
  mainPanel.add(panel);
  add(mainPanel);
  setSize(panel.getPreferredSize());
  setVisible(true);
}
