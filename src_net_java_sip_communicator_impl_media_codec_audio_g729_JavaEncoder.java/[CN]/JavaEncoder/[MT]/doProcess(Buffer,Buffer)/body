{
  byte[] input=(byte[])inputBuffer.getData();
  int inputLength=inputBuffer.getLength();
  int inputOffset=inputBuffer.getOffset();
  if ((prevInputLength + inputLength) < INPUT_FRAME_SIZE_IN_BYTES) {
    System.arraycopy(input,inputOffset,prevInput,prevInputLength,inputLength);
    prevInputLength+=inputLength;
    return BUFFER_PROCESSED_OK | OUTPUT_BUFFER_NOT_FILLED;
  }
  int readShorts=0;
  if (prevInputLength > 0) {
    readShorts+=readShorts(prevInput,0,sp16,0,prevInputLength / 2);
    prevInputLength=0;
  }
  readShorts=readShorts(input,inputOffset,sp16,readShorts,sp16.length - readShorts);
  int readBytes=2 * readShorts;
  inputLength-=readBytes;
  inputBuffer.setLength(inputLength);
  inputOffset+=readBytes;
  inputBuffer.setOffset(inputOffset);
  coder.process(sp16,serial);
  int outputOffset=outputBuffer.getOffset();
  byte[] output=validateByteArraySize(outputBuffer,outputOffset + 2 * OUTPUT_FRAME_SIZE_IN_BYTES);
  packetize(serial,output,outputOffset + OUTPUT_FRAME_SIZE_IN_BYTES * outputFrameCount);
  outputBuffer.setLength(outputBuffer.getLength() + OUTPUT_FRAME_SIZE_IN_BYTES);
  outputBuffer.setFormat(outputFormat);
  int processResult=BUFFER_PROCESSED_OK;
  if (outputFrameCount == 1)   outputFrameCount=0;
 else {
    outputFrameCount=1;
    processResult|=OUTPUT_BUFFER_NOT_FILLED;
  }
  if (inputLength > 0)   processResult|=INPUT_BUFFER_NOT_CONSUMED;
  return processResult;
}
