{
  Object sService=bundleContext.getService(event.getServiceReference());
  if (logger.isTraceEnabled())   logger.trace("Received a service event for: " + sService.getClass().getName());
  if (!(sService instanceof ProtocolProviderService)) {
    return;
  }
  if (logger.isDebugEnabled())   logger.debug("Service is a protocol provider.");
  ProtocolProviderService provider=(ProtocolProviderService)sService;
  ProtocolProviderFactory sourceFactory=null;
  ServiceReference[] allBundleServices=event.getServiceReference().getBundle().getRegisteredServices();
  for (  ServiceReference bundleServiceRef : allBundleServices) {
    Object service=bundleContext.getService(bundleServiceRef);
    if (service instanceof ProtocolProviderFactory) {
      sourceFactory=(ProtocolProviderFactory)service;
      break;
    }
  }
  if (event.getType() == ServiceEvent.REGISTERED) {
    if (logger.isDebugEnabled())     logger.debug("Handling registration of a new Protocol Provider.");
    String providerMask=System.getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
    if (providerMask != null && providerMask.trim().length() > 0) {
      String servRefMask=(String)event.getServiceReference().getProperty(MetaContactListService.PROVIDER_MASK_PROPERTY);
      if (servRefMask == null || !servRefMask.equals(providerMask)) {
        if (logger.isDebugEnabled())         logger.debug("Ignoing masked provider: " + provider.getAccountID());
        return;
      }
    }
    if (sourceFactory != null && currentlyInstalledProviders.containsKey(provider.getAccountID().getAccountUniqueID())) {
      if (logger.isDebugEnabled())       logger.debug("Ignoing an already installed account: " + provider.getAccountID());
      return;
    }
    this.handleProviderAdded((ProtocolProviderService)sService);
  }
 else   if (event.getType() == ServiceEvent.UNREGISTERING) {
    if (sourceFactory == null) {
      return;
    }
    AccountID accountID=provider.getAccountID();
    if (sourceFactory.getRegisteredAccounts().contains(accountID)) {
      return;
    }
    if (logger.isDebugEnabled())     logger.debug("Account uninstalled. acc.id=" + provider.getAccountID() + ". Removing from meta "+ "contact list.");
    this.handleProviderRemoved((ProtocolProviderService)sService);
  }
}
