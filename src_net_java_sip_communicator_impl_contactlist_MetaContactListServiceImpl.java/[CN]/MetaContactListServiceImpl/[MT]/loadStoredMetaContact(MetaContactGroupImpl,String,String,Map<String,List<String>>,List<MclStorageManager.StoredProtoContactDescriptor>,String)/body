{
  MetaContactImpl newMetaContact=(MetaContactImpl)findMetaContactByMetaUID(metaUID);
  if (newMetaContact == null) {
    newMetaContact=new MetaContactImpl(metaUID,details);
    newMetaContact.setDisplayName(displayName);
  }
  ProtocolProviderService sourceProvider=currentlyInstalledProviders.get(accountID);
  OperationSetPersistentPresence presenceOpSet=sourceProvider.getOperationSet(OperationSetPersistentPresence.class);
  for (  MclStorageManager.StoredProtoContactDescriptor contactDescriptor : protoContacts) {
    MetaContact mc=findMetaContactByContact(contactDescriptor.contactAddress,accountID);
    if (mc != null) {
      logger.warn("Ignoring duplicate proto contact " + contactDescriptor + " accountID="+ accountID+ ". The contact was also present in the "+ "folloing meta contact:"+ mc);
      continue;
    }
    Contact protoContact=presenceOpSet.createUnresolvedContact(contactDescriptor.contactAddress,contactDescriptor.persistentData,(contactDescriptor.parentProtoGroup == null) ? presenceOpSet.getServerStoredContactListRoot() : contactDescriptor.parentProtoGroup);
    newMetaContact.addProtoContact(protoContact);
  }
  if (newMetaContact.getContactCount() == 0) {
    logger.error("Found an empty meta contact. Throwing an exception " + "so that the storage manager would remove it.");
    throw new IllegalArgumentException("MetaContact[" + newMetaContact + "] contains no non-duplicating child contacts.");
  }
  parentGroup.addMetaContact(newMetaContact);
  logger.trace("Created meta contact: " + newMetaContact);
}
