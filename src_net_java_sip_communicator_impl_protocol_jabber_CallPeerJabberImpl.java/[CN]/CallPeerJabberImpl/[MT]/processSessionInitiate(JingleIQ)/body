{
  try {
    TransferPacketExtension transfer=(TransferPacketExtension)sessionInitIQ.getExtension(TransferPacketExtension.ELEMENT_NAME,TransferPacketExtension.NAMESPACE);
    if (transfer != null) {
      String sid=transfer.getSID();
      if (sid != null) {
        ProtocolProviderServiceJabberImpl protocolProvider=getProtocolProvider();
        OperationSetBasicTelephonyJabberImpl basicTelephony=(OperationSetBasicTelephonyJabberImpl)protocolProvider.getOperationSet(OperationSetBasicTelephony.class);
        CallJabberImpl attendantCall=basicTelephony.getActiveCallsRepository().findJingleSID(sid);
        if (attendantCall != null) {
          CallPeerJabberImpl attendant=attendantCall.getPeer(sid);
          if ((attendant != null) && basicTelephony.getFullCalleeURI(attendant.getAddress()).equals(transfer.getFrom()) && protocolProvider.getOurJID().equals(transfer.getTo())) {
            basicTelephony.hangupCallPeer(attendant);
          }
        }
      }
    }
  }
 catch (  Throwable t) {
    logger.error("Failed to hang up on attendant" + " as part of session transfer",t);
    if (t instanceof ThreadDeath)     throw (ThreadDeath)t;
  }
  this.sessionInitIQ=sessionInitIQ;
  this.isInitiator=true;
  List<ContentPacketExtension> offer=sessionInitIQ.getContentList();
  try {
    getMediaHandler().processOffer(offer);
  }
 catch (  Exception ex) {
    logger.info("Failed to process an incoming session initiate",ex);
    String reasonText="Error: " + ex.getMessage();
    JingleIQ errResp=JinglePacketFactory.createSessionTerminate(sessionInitIQ.getTo(),sessionInitIQ.getFrom(),sessionInitIQ.getSID(),Reason.INCOMPATIBLE_PARAMETERS,reasonText);
    setState(CallPeerState.FAILED,reasonText);
    getProtocolProvider().getConnection().sendPacket(errResp);
    return;
  }
  if (logger.isTraceEnabled())   logger.trace("will send ringing response: ");
  getProtocolProvider().getConnection().sendPacket(JinglePacketFactory.createRinging(sessionInitIQ));
}
