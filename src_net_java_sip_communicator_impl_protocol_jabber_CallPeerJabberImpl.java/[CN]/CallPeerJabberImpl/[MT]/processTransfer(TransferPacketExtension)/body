{
  String attendantAddress=transfer.getFrom();
  if (attendantAddress == null) {
    throw new OperationFailedException("Session transfer must contain a \'from\' attribute value.",OperationFailedException.ILLEGAL_ARGUMENT);
  }
  String calleeAddress=transfer.getTo();
  if (calleeAddress == null) {
    throw new OperationFailedException("Session transfer must contain a \'to\' attribute value.",OperationFailedException.ILLEGAL_ARGUMENT);
  }
  Roster roster=getProtocolProvider().getConnection().getRoster();
  if (!roster.contains(StringUtils.parseBareAddress(calleeAddress))) {
    String failedMessage="Tranfer impossible:\n" + "Account roster does not contain tansfer peer: " + StringUtils.parseBareAddress(calleeAddress);
    setState(CallPeerState.FAILED,failedMessage);
    logger.info(failedMessage);
  }
  OperationSetBasicTelephonyJabberImpl basicTelephony=(OperationSetBasicTelephonyJabberImpl)getProtocolProvider().getOperationSet(OperationSetBasicTelephony.class);
  CallJabberImpl calleeCall=new CallJabberImpl(basicTelephony);
  TransferPacketExtension calleeTransfer=new TransferPacketExtension();
  String sid=transfer.getSID();
  calleeTransfer.setFrom(attendantAddress);
  if (sid != null) {
    calleeTransfer.setSID(sid);
    calleeTransfer.setTo(calleeAddress);
  }
  basicTelephony.createOutgoingCall(calleeCall,calleeAddress,Arrays.asList(new PacketExtension[]{calleeTransfer}));
}
