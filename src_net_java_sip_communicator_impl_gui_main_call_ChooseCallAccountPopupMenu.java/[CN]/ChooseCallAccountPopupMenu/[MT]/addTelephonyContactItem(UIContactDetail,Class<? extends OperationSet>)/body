{
  final ContactMenuItem contactItem=new ContactMenuItem(telephonyContact);
  contactItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      List<ProtocolProviderService> providers=GuiActivator.getOpSetRegisteredProviders(opSetClass,telephonyContact.getPreferredProtocolProvider(opSetClass),telephonyContact.getPreferredProtocol(opSetClass));
      int providersCount=providers.size();
      if (providers == null || providersCount <= 0) {
        new ErrorDialog(null,GuiActivator.getResources().getI18NString("service.gui.CALL_FAILED"),GuiActivator.getResources().getI18NString("service.gui.NO_ONLINE_TELEPHONY_ACCOUNT")).showDialog();
        return;
      }
 else       if (providersCount > 1) {
        new ChooseCallAccountDialog(telephonyContact.getAddress(),opSetClass,providers).setVisible(true);
      }
 else {
        if (opSetClass.equals(OperationSetBasicTelephony.class)) {
          CallManager.createCall(providers.get(0),telephonyContact.getAddress());
        }
 else         if (opSetClass.equals(OperationSetVideoTelephony.class)) {
          CallManager.createVideoCall(providers.get(0),telephonyContact.getAddress());
        }
 else         if (opSetClass.equals(OperationSetDesktopSharingServer.class)) {
          CallManager.createDesktopSharing(providers.get(0),telephonyContact.getAddress());
        }
      }
      ChooseCallAccountPopupMenu.this.setVisible(false);
    }
  }
);
  String category=telephonyContact.getCategory();
  if (category != null && category.equals(ContactDetail.CATEGORY_PHONE)) {
    int index=findPhoneItemIndex();
    if (index < 0)     add(contactItem);
 else     insert(contactItem,findPhoneItemIndex());
  }
 else {
    Component lastComp=getComponent(getComponentCount() - 1);
    if (lastComp instanceof ContactMenuItem)     category=((ContactMenuItem)lastComp).getCategory();
    if (category != null && category.equals(ContactDetail.CATEGORY_PHONE))     addSeparator();
    add(contactItem);
  }
}
