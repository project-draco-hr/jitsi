{
  doParseHomePageIsSuccessful[0]=false;
  logger.trace("=========connectAndLogin begin===========");
  String httpResponseBody=facebookGetMethod(loginPageUrl);
  if (httpResponseBody == null) {
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException e) {
      logger.trace(e.getMessage());
    }
    httpResponseBody=facebookGetMethod(loginPageUrl);
  }
  logger.trace("========= get login page ResponseBody begin===========");
  logger.trace(httpResponseBody);
  logger.trace("+++++++++ get login page ResponseBody end+++++++++");
  logger.trace("Initial cookies: ");
  List<Cookie> cookies=((DefaultHttpClient)httpClient).getCookieStore().getCookies();
  if (cookies.isEmpty()) {
    logger.trace("None");
  }
 else {
    for (int i=0; i < cookies.size(); i++) {
      logger.trace("- " + cookies.get(i).toString());
    }
  }
  if (httpResponseBody == null) {
    logger.warn("Warning: Failed to get facebook login page.");
  }
  try {
    HttpPost httpost=new HttpPost(loginPageUrl);
    List<NameValuePair> nvps=new ArrayList<NameValuePair>();
    nvps.add(new BasicNameValuePair("email",email));
    nvps.add(new BasicNameValuePair("pass",pass));
    nvps.add(new BasicNameValuePair("login",""));
    httpost.setEntity(new UrlEncodedFormEntity(nvps,HTTP.UTF_8));
    logger.info("@executing post method to:" + loginPageUrl);
    HttpResponse loginPostResponse=httpClient.execute(httpost);
    HttpEntity entity=loginPostResponse.getEntity();
    logger.trace("Login form post: " + loginPostResponse.getStatusLine());
    if (entity != null) {
      httpResponseBody=EntityUtils.toString(entity);
      logger.trace(httpResponseBody);
      entity.consumeContent();
    }
 else {
      logger.error("Error: login post's response entity is null");
      return FacebookErrorCode.kError_Login_GenericError;
    }
    logger.trace("Post logon cookies:");
    cookies=((DefaultHttpClient)httpClient).getCookieStore().getCookies();
    if (cookies.isEmpty()) {
      logger.trace("None");
    }
 else {
      for (int i=0; i < cookies.size(); i++) {
        logger.trace("- " + cookies.get(i).toString());
      }
    }
    int statusCode=loginPostResponse.getStatusLine().getStatusCode();
    logger.info("Post Method done(" + statusCode + ")");
switch (statusCode) {
case 100:
      break;
case 200:
    if (FacebookErrorCode.Error_Global_NoError == doParseHomePage(httpResponseBody))     doParseHomePageIsSuccessful[0]=true;
  break;
case 301:
case 302:
case 303:
case 307:
{
  Header[] headers=loginPostResponse.getAllHeaders();
  for (int i=0; i < headers.length; i++) {
    logger.trace(headers[i]);
  }
  Header locationHeader=loginPostResponse.getFirstHeader("location");
  if (locationHeader != null) {
    homePageUrl=locationHeader.getValue();
    logger.info("Redirect Location: " + homePageUrl);
    if (homePageUrl == null || !homePageUrl.contains("facebook.com/home.php")) {
      logger.error("Login error! Redirect Location Url not contains \"facebook.com/home.php\"");
      return FacebookErrorCode.kError_Login_GenericError;
    }
  }
 else {
    logger.warn("Warning: Got no redirect location.");
  }
}
break;
default :
;
}
}
 catch (IOException ioe) {
logger.error("IOException\n" + ioe.getMessage());
return FacebookErrorCode.kError_Global_ValidationError;
}
logger.trace("=========connectAndLogin end==========");
return FacebookErrorCode.Error_Global_NoError;
}
