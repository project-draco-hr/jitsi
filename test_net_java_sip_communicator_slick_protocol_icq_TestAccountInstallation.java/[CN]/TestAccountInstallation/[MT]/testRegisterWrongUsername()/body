{
  ServiceReference[] serRefs=null;
  String osgiFilter="(" + AccountManager.PROTOCOL_PROPERTY_NAME + "="+ ProtocolNames.ICQ+ ")";
  try {
    serRefs=IcqSlickFixture.bc.getServiceReferences(AccountManager.class.getName(),osgiFilter);
  }
 catch (  InvalidSyntaxException ex) {
    fail(osgiFilter + " is not a valid osgi filter");
  }
  assertTrue("Failed to find an account manager service for protocol ICQ",serRefs != null || serRefs.length > 0);
  AccountManager icqAccountManager=(AccountManager)IcqSlickFixture.bc.getService(serRefs[0]);
  String passwd=System.getProperty(IcqProtocolProviderSlick.TESTED_IMPL_PWD_PROP_NAME,null);
  String uin=System.getProperty(IcqProtocolProviderSlick.TESTED_IMPL_ACCOUNT_ID_PROP_NAME,null);
  uin=uin + "1234";
  Hashtable icqAccountProperties=new Hashtable();
  icqAccountProperties.put(AccountProperties.PASSWORD,passwd);
  AccountID icqAccountID=icqAccountManager.installAccount(IcqSlickFixture.bc,uin,icqAccountProperties);
  ServiceReference[] icqProviderRefs=null;
  try {
    icqProviderRefs=IcqSlickFixture.bc.getServiceReferences(ProtocolProviderService.class.getName(),"(&" + "(" + AccountManager.PROTOCOL_PROPERTY_NAME + "="+ ProtocolNames.ICQ+ ")"+ "("+ AccountManager.ACCOUNT_ID_PROPERTY_NAME+ "="+ uin+ ")"+ ")");
  }
 catch (  InvalidSyntaxException ex1) {
  }
  assertNotNull("No Protocol Provider was found for ICQ UIN:" + icqAccountID,icqProviderRefs);
  assertTrue("No Protocol Provider was found for ICQ UIN:" + icqAccountID,icqProviderRefs.length > 0);
  ServiceReference icqServiceRef=icqProviderRefs[0];
  ProtocolProviderService provider=(ProtocolProviderService)IcqSlickFixture.bc.getService(icqServiceRef);
  RegistrationFailedEventCollector regFailedEvtCollector=new RegistrationFailedEventCollector();
  logger.debug("install " + regFailedEvtCollector);
  provider.addRegistrationStateChangeListener(regFailedEvtCollector);
  provider.register(null);
  try {
synchronized (registrationLock) {
      logger.debug("Waiting for registration to complete ...");
      registrationLock.wait(40000);
      logger.debug("Registration was completed or we lost patience.");
    }
  }
 catch (  InterruptedException ex) {
    logger.debug("Interrupted while waiting for registration",ex);
  }
catch (  Throwable t) {
    logger.debug("We got thrown out while waiting for registration",t);
  }
  assertTrue("No registration event notifying of registration has failed. " + "All events were: " + regFailedEvtCollector.collectedNewStates,regFailedEvtCollector.collectedNewStates.contains(RegistrationState.AUTHENTICATION_FAILED));
  assertEquals("Registration status must be auth failed as we are logging in with wrong uin",regFailedEvtCollector.failedCode,RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID);
  assertNotNull("We must have reason for auth failed",regFailedEvtCollector.failedReason);
  provider.removeRegistrationStateChangeListener(regFailedEvtCollector);
  icqAccountManager.uninstallAccount(icqAccountID);
}
