{
  int parm_offset=0;
  int t0_first=0;
  float[] Az;
  int Az_offset;
  float[] lsp_new=new float[M];
  float[] code=new float[L_SUBFR];
  int i, i_subfr;
  IntReference t0=new IntReference(), t0_frac=new IntReference();
  int index;
  int bfi;
  int bad_pitch;
  bfi=parm[parm_offset];
  parm_offset++;
  lspdec.d_lsp(parm,parm_offset,lsp_new,bfi);
  parm_offset+=2;
  Lpcfunc.int_qlpc(lsp_old,lsp_new,A_t);
  Util.copy(lsp_new,lsp_old,M);
  Az=A_t;
  Az_offset=0;
  for (i_subfr=0; i_subfr < L_FRAME; i_subfr+=L_SUBFR) {
    index=parm[parm_offset];
    parm_offset++;
    if (i_subfr == 0) {
      i=parm[parm_offset];
      parm_offset++;
      bad_pitch=bfi + i;
      if (bad_pitch == 0) {
        DecLag3.dec_lag3(index,PIT_MIN,PIT_MAX,i_subfr,t0,t0_frac);
        old_t0=t0.value;
      }
 else {
        t0.value=old_t0;
        t0_frac.value=0;
        old_t0++;
        if (old_t0 > PIT_MAX) {
          old_t0=PIT_MAX;
        }
      }
      t0_first=t0.value;
    }
 else {
      if (bfi == 0) {
        DecLag3.dec_lag3(index,PIT_MIN,PIT_MAX,i_subfr,t0,t0_frac);
        old_t0=t0.value;
      }
 else {
        t0.value=old_t0;
        t0_frac.value=0;
        old_t0++;
        if (old_t0 > PIT_MAX) {
          old_t0=PIT_MAX;
        }
      }
    }
    PredLt3.pred_lt_3(exc,exc_offset + i_subfr,t0.value,t0_frac.value,L_SUBFR);
    if (bfi != 0) {
      parm[parm_offset + 0]=(int)(Util.random_g729() & 0x1fff);
      parm[parm_offset + 1]=(int)(Util.random_g729() & 0x000f);
    }
    DeAcelp.decod_ACELP(parm[parm_offset + 1],parm[parm_offset + 0],code);
    parm_offset+=2;
    for (i=t0.value; i < L_SUBFR; i++)     code[i]+=sharp * code[i - t0.value];
    index=parm[parm_offset];
    parm_offset++;
    decGain.dec_gain(index,code,L_SUBFR,bfi,gain_pitch,gain_code);
    sharp=gain_pitch.value;
    if (sharp > SHARPMAX)     sharp=SHARPMAX;
    if (sharp < SHARPMIN)     sharp=SHARPMIN;
    if (bfi != 0) {
      if (voicing == 0) {
        for (i=0; i < L_SUBFR; i++) {
          exc[exc_offset + i + i_subfr]=gain_code.value * code[i];
        }
      }
 else {
        for (i=0; i < L_SUBFR; i++) {
          exc[exc_offset + i + i_subfr]=gain_pitch.value * exc[exc_offset + i + i_subfr];
        }
      }
    }
 else {
      for (i=0; i < L_SUBFR; i++) {
        exc[exc_offset + i + i_subfr]=gain_pitch.value * exc[exc_offset + i + i_subfr] + gain_code.value * code[i];
      }
    }
    Filter.syn_filt(Az,Az_offset,exc,exc_offset + i_subfr,synth,synth_offset + i_subfr,L_SUBFR,mem_syn,0,1);
    Az_offset+=MP1;
  }
  Util.copy(old_exc,L_FRAME,old_exc,PIT_MAX + L_INTERPOL);
  return t0_first;
}
