{
  Dialog dialog=clientTransaction.getDialog();
  CallParticipantSipImpl callParticipant=activeCallsRepository.findCallParticipant(dialog);
  if (callParticipant == null) {
    CallIdHeader call=(CallIdHeader)ok.getHeader(CallIdHeader.NAME);
    String callid=call.getCallId();
    Iterator<CallSipImpl> activeCallsIter=activeCallsRepository.getActiveCalls();
    while (activeCallsIter.hasNext()) {
      CallSipImpl activeCall=activeCallsIter.next();
      Iterator<CallParticipant> callParticipantsIter=activeCall.getCallParticipants();
      while (callParticipantsIter.hasNext()) {
        CallParticipantSipImpl cp=(CallParticipantSipImpl)callParticipantsIter.next();
        Dialog callPartDialog=cp.getDialog();
        if (callPartDialog != null && callPartDialog.getCallId() != null && cp.getFirstTransaction() != null && cp.getDialog().getCallId().getCallId().equals(callid) && clientTransaction.getBranchId().equals(cp.getFirstTransaction().getBranchId())) {
          callParticipant=cp;
          cp.setDialog(dialog);
        }
      }
    }
    if (callParticipant == null) {
      logger.debug("Received a stray ok response.");
      return;
    }
  }
  Request ack=null;
  ContentTypeHeader contentTypeHeader=null;
  try {
    CSeqHeader cseq=((CSeqHeader)ok.getHeader(CSeqHeader.NAME));
    ack=clientTransaction.getDialog().createAck(cseq.getSeqNumber());
    contentTypeHeader=protocolProvider.getHeaderFactory().createContentTypeHeader("application","sdp");
  }
 catch (  ParseException ex) {
    logErrorAndFailCallParticipant("Failed to create a content type header for the ACK request",ex,callParticipant);
  }
catch (  InvalidArgumentException ex) {
    logErrorAndFailCallParticipant("Failed ACK request, problem with the supplied cseq",ex,callParticipant);
  }
catch (  SipException ex) {
    logErrorAndFailCallParticipant("Failed to create ACK request!",ex,callParticipant);
    return;
  }
  if (!CallParticipantState.CONNECTING_WITH_EARLY_MEDIA.equals(callParticipant.getState()))   callParticipant.setSdpDescription(new String(ok.getRawContent()));
  CallSession callSession=((CallSipImpl)callParticipant.getCall()).getMediaCallSession();
  try {
    try {
      if (callSession == null) {
        callSession=SipActivator.getMediaService().createCallSession(callParticipant.getCall());
        String sdp=callSession.processSdpOffer(callParticipant,callParticipant.getSdpDescription());
        ack.setContent(sdp,contentTypeHeader);
        callParticipant.setCallInfoURL(callSession.getCallInfoURL());
      }
    }
  finally {
      try {
        clientTransaction.getDialog().sendAck(ack);
      }
 catch (      SipException ex) {
        logErrorAndFailCallParticipant("Failed to acknowledge call!",ex,callParticipant);
        return;
      }
    }
    CallParticipantState callParticipantState=callParticipant.getState();
    if ((callParticipantState != CallParticipantState.CONNECTED) && !CallParticipantState.isOnHold(callParticipantState) && !CallParticipantState.CONNECTING_WITH_EARLY_MEDIA.equals(callParticipantState)) {
      callSession.processSdpAnswer(callParticipant,callParticipant.getSdpDescription());
    }
    callParticipant.setCallInfoURL(callSession.getCallInfoURL());
  }
 catch (  ParseException exc) {
    logErrorAndFailCallParticipant("There was an error parsing the SDP description of " + callParticipant.getDisplayName() + "("+ callParticipant.getAddress()+ ")",exc,callParticipant);
  }
catch (  MediaException exc) {
    logErrorAndFailCallParticipant("We failed to process the SDP description of " + callParticipant.getDisplayName() + "("+ callParticipant.getAddress()+ ")"+ ". Error was: "+ exc.getMessage(),exc,callParticipant);
  }
  if (!CallParticipantState.isOnHold(callParticipant.getState()))   callParticipant.setState(CallParticipantState.CONNECTED);
}
