{
  ClientTransaction clientTransaction=responseEvent.getClientTransaction();
  Response response=responseEvent.getResponse();
  CSeqHeader cseq=((CSeqHeader)response.getHeader(CSeqHeader.NAME));
  if (cseq == null) {
    logger.error("An incoming response did not contain a CSeq header");
  }
  String method=cseq.getMethod();
  SipProvider sourceProvider=(SipProvider)responseEvent.getSource();
  int responseStatusCode=response.getStatusCode();
switch (responseStatusCode) {
case Response.OK:
    if (method.equals(Request.INVITE)) {
      processInviteOK(clientTransaction,response);
    }
 else     if (method.equals(Request.BYE)) {
    }
  break;
case Response.RINGING:
processRinging(clientTransaction,response);
break;
case Response.SESSION_PROGRESS:
processSessionProgress(clientTransaction,response);
break;
case Response.TRYING:
processTrying(clientTransaction,response);
break;
case Response.BUSY_HERE:
processBusyHere(clientTransaction,response);
break;
case Response.ACCEPTED:
if (Request.REFER.equals(method)) {
processReferAccepted(clientTransaction,response);
}
break;
case Response.UNAUTHORIZED:
case Response.PROXY_AUTHENTICATION_REQUIRED:
processAuthenticationChallenge(clientTransaction,response,sourceProvider);
break;
default :
if ((responseStatusCode / 100 == 4) || (responseStatusCode / 100 == 5)) {
CallParticipantSipImpl callParticipant=activeCallsRepository.findCallParticipant(clientTransaction.getDialog());
logger.error("Received error: " + response.getStatusCode() + " "+ response.getReasonPhrase());
if (callParticipant != null) callParticipant.setState(CallParticipantState.FAILED);
}
break;
}
}
