{
  ClientTransaction clientTransaction=responseEvent.getClientTransaction();
  Response response=responseEvent.getResponse();
  CSeqHeader cseq=((CSeqHeader)response.getHeader(CSeqHeader.NAME));
  if (cseq == null)   logger.error("An incoming response did not contain a CSeq header");
  String method=cseq.getMethod();
  SipProvider sourceProvider=(SipProvider)responseEvent.getSource();
  int responseStatusCode=response.getStatusCode();
  boolean processed=false;
switch (responseStatusCode) {
case Response.OK:
    if (method.equals(Request.INVITE)) {
      processInviteOK(clientTransaction,response);
      processed=true;
    }
  break;
case Response.RINGING:
processRinging(clientTransaction,response);
processed=true;
break;
case Response.SESSION_PROGRESS:
processSessionProgress(clientTransaction,response);
processed=true;
break;
case Response.TRYING:
processTrying(clientTransaction,response);
processed=true;
break;
case Response.BUSY_HERE:
case Response.BUSY_EVERYWHERE:
case Response.DECLINE:
processBusyHere(clientTransaction,response);
processed=true;
break;
case Response.ACCEPTED:
if (Request.REFER.equals(method)) {
processReferAccepted(clientTransaction,response);
processed=true;
}
break;
case Response.UNAUTHORIZED:
case Response.PROXY_AUTHENTICATION_REQUIRED:
processAuthenticationChallenge(clientTransaction,response,sourceProvider);
processed=true;
break;
case Response.REQUEST_TERMINATED:
{
CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(clientTransaction.getDialog());
if (callPeer != null) {
String reasonPhrase=response.getReasonPhrase();
if (reasonPhrase == null || reasonPhrase.trim().length() == 0) reasonPhrase="Request terminated by server!";
callPeer.setState(CallPeerState.FAILED,reasonPhrase);
}
processed=true;
}
break;
case Response.MOVED_TEMPORARILY:
case Response.MOVED_PERMANENTLY:
{
CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(clientTransaction.getDialog());
if (callPeer == null) {
logger.error("Failed to find a forwarded call peer.");
return true;
}
ContactHeader contactHeader=(ContactHeader)response.getHeader(ContactHeader.NAME);
if (contactHeader == null) {
logger.error("Received a forward with no Contact " + "destination: " + response.getStatusCode() + " "+ response.getReasonPhrase());
callPeer.setState(CallPeerState.FAILED,response.getReasonPhrase());
return true;
}
Address redirectAddress=contactHeader.getAddress();
if (callPeer.getPeerAddress().getURI().equals(redirectAddress.getURI())) {
logger.error("Redirect loop detected for: " + callPeer.getPeerAddress().getURI());
callPeer.setState(CallPeerState.FAILED,"Redirect loop detected for: " + callPeer.getPeerAddress().getURI());
return true;
}
CallSipImpl call=callPeer.getCall();
try {
call.invite(redirectAddress,null);
}
 catch (OperationFailedException exc) {
logger.error("Call forward failed for address " + contactHeader.getAddress(),exc);
callPeer.setState(CallPeerState.DISCONNECTED,"Call forwarded failed. " + exc.getMessage());
}
callPeer.setState(CallPeerState.DISCONNECTED,"Call forwarded. " + response.getReasonPhrase());
processed=true;
}
break;
default :
int responseStatusCodeRange=responseStatusCode / 100;
Request request=responseEvent.getClientTransaction().getRequest();
if (responseStatusCode == 500 && isRemoteControlNotification(request)) {
return true;
}
CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(clientTransaction.getDialog());
if ((responseStatusCodeRange == 4) || (responseStatusCodeRange == 5) || (responseStatusCodeRange == 6)) {
String reason=response.getReasonPhrase();
WarningHeader warningHeader=(WarningHeader)response.getHeader(WarningHeader.NAME);
if (warningHeader != null) {
reason=warningHeader.getText();
logger.error("Received error: " + response.getStatusCode() + " "+ response.getReasonPhrase()+ " "+ warningHeader.getText()+ "-"+ warningHeader.getAgent()+ "-"+ warningHeader.getName());
}
 else {
logger.error("Received error: " + response.getStatusCode() + " "+ response.getReasonPhrase());
}
if (callPeer != null) callPeer.setState(CallPeerState.FAILED,reason);
processed=true;
}
 else if ((responseStatusCodeRange == 2) || (responseStatusCodeRange == 3)) {
logger.error("Received an non-supported final response: " + response.getStatusCode() + " "+ response.getReasonPhrase());
if (callPeer != null) callPeer.setState(CallPeerState.FAILED,response.getReasonPhrase());
processed=true;
}
break;
}
return processed;
}
