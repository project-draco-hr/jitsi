{
  ClientTransaction clientTransaction=responseEvent.getClientTransaction();
  Response response=responseEvent.getResponse();
  CSeqHeader cseq=((CSeqHeader)response.getHeader(CSeqHeader.NAME));
  if (cseq == null) {
    logger.error("An incoming response did not contain a CSeq header");
  }
  String method=cseq.getMethod();
  SipProvider sourceProvider=(SipProvider)responseEvent.getSource();
  int responseStatusCode=response.getStatusCode();
  boolean processed=false;
switch (responseStatusCode) {
case Response.OK:
    if (method.equals(Request.INVITE)) {
      processInviteOK(clientTransaction,response);
      processed=true;
    }
  break;
case Response.RINGING:
processRinging(clientTransaction,response);
processed=true;
break;
case Response.SESSION_PROGRESS:
processSessionProgress(clientTransaction,response);
processed=true;
break;
case Response.TRYING:
processTrying(clientTransaction,response);
processed=true;
break;
case Response.BUSY_HERE:
case Response.BUSY_EVERYWHERE:
case Response.DECLINE:
processBusyHere(clientTransaction,response);
processed=true;
break;
case Response.ACCEPTED:
if (Request.REFER.equals(method)) {
processReferAccepted(clientTransaction,response);
processed=true;
}
break;
case Response.UNAUTHORIZED:
case Response.PROXY_AUTHENTICATION_REQUIRED:
processAuthenticationChallenge(clientTransaction,response,sourceProvider);
processed=true;
break;
case Response.REQUEST_TERMINATED:
{
CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(clientTransaction.getDialog());
if (callPeer != null) {
String reasonPhrase=response.getReasonPhrase();
if (reasonPhrase == null || reasonPhrase.trim().length() == 0) reasonPhrase="Request terminated by server!";
callPeer.setState(CallPeerState.FAILED,reasonPhrase);
}
processed=true;
}
break;
default :
int responseStatusCodeRange=responseStatusCode / 100;
Request request=responseEvent.getClientTransaction().getRequest();
if (responseStatusCode == 500 && request.getMethod().equals(Request.NOTIFY) && isDesktopSharing(request)) {
return true;
}
if ((responseStatusCodeRange == 4) || (responseStatusCodeRange == 5) || (responseStatusCodeRange == 6)) {
CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(clientTransaction.getDialog());
logger.error("Received error: " + response.getStatusCode() + " "+ response.getReasonPhrase());
if (callPeer != null) callPeer.setState(CallPeerState.FAILED,response.getReasonPhrase());
processed=true;
}
break;
}
return processed;
}
