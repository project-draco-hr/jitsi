{
  CallPeerSipImpl callPeer=(CallPeerSipImpl)peer;
  Transaction transaction=callPeer.getFirstTransaction();
  Dialog dialog=callPeer.getDialog();
  if (transaction == null || !dialog.isServer()) {
    callPeer.setState(CallPeerState.DISCONNECTED);
    throw new OperationFailedException("Failed to extract a ServerTransaction " + "from the call's associated dialog!",OperationFailedException.INTERNAL_ERROR);
  }
  CallPeerState peerState=peer.getState();
  if (peerState.equals(CallPeerState.CONNECTED) || CallPeerState.isOnHold(peerState)) {
    logger.info("Ignoring user request to answer a CallPeer " + "that is already connected. CP:" + peer);
    return;
  }
  ServerTransaction serverTransaction=(ServerTransaction)transaction;
  Response ok=null;
  try {
    ok=createOKResponse(callPeer.getFirstTransaction().getRequest(),dialog);
  }
 catch (  ParseException ex) {
    callPeer.setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to construct an OK response to an INVITE request",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  ContentTypeHeader contentTypeHeader=null;
  try {
    contentTypeHeader=protocolProvider.getHeaderFactory().createContentTypeHeader("application","sdp");
  }
 catch (  ParseException ex) {
    callPeer.setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to create a content type header for the OK response",OperationFailedException.INTERNAL_ERROR,ex,logger);
  }
  try {
    CallSession callSession=SipActivator.getMediaService().createCallSession(callPeer.getCall());
    ((CallSipImpl)callPeer.getCall()).setMediaCallSession(callSession);
    callSession.setSessionCreatorCallback(callPeer);
    String sdpOffer=callPeer.getSdpDescription();
    String sdp;
    if ((sdpOffer != null) && (sdpOffer.length() > 0)) {
      sdp=callSession.processSdpOffer(callPeer,sdpOffer);
      callPeer.setCallInfoURL(callSession.getCallInfoURL());
    }
 else {
      sdp=callSession.createSdpOffer();
    }
    ok.setContent(sdp,contentTypeHeader);
  }
 catch (  MediaException ex) {
    logger.error("Failed to create an SDP description for an OK response " + "to an INVITE request!",ex);
    this.sayError((CallPeerSipImpl)peer,Response.NOT_ACCEPTABLE_HERE);
  }
catch (  ParseException ex) {
    logger.error("Failed to parse sdp data while creating invite request!",ex);
    this.sayError((CallPeerSipImpl)peer,Response.NOT_ACCEPTABLE_HERE);
  }
  ContactHeader contactHeader=protocolProvider.getContactHeader(dialog.getRemoteTarget());
  ok.addHeader(contactHeader);
  try {
    serverTransaction.sendResponse(ok);
    if (logger.isDebugEnabled())     logger.debug("sent response\n" + ok);
  }
 catch (  Exception ex) {
    callPeer.setState(CallPeerState.DISCONNECTED);
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to send an OK response to an INVITE request",OperationFailedException.NETWORK_FAILURE,ex,logger);
  }
}
