{
  ServerTransaction serverTransaction=requestEvent.getServerTransaction();
  SipProvider jainSipProvider=(SipProvider)requestEvent.getSource();
  Request request=requestEvent.getRequest();
  String requestMethod=request.getMethod();
  if (serverTransaction == null) {
    try {
      serverTransaction=SipStackSharing.getOrCreateServerTransaction(requestEvent);
    }
 catch (    TransactionAlreadyExistsException ex) {
      logger.error("Failed to create a new server" + "transaction for an incoming request\n" + "(Next message contains the request)",ex);
      return false;
    }
catch (    TransactionUnavailableException ex) {
      logger.error("Failed to create a new server" + "transaction for an incoming request\n" + "(Next message contains the request)",ex);
      return false;
    }
  }
  boolean processed=false;
  if (requestMethod.equals(Request.INVITE)) {
    logger.debug("received INVITE");
    DialogState dialogState=serverTransaction.getDialog().getState();
    if ((dialogState == null) || dialogState.equals(DialogState.CONFIRMED)) {
      if (logger.isDebugEnabled())       logger.debug("request is an INVITE. Dialog state=" + dialogState);
      processInvite(jainSipProvider,serverTransaction);
      processed=true;
    }
 else {
      logger.error("reINVITEs while the dialog is not " + "confirmed are not currently supported.");
    }
  }
 else   if (requestMethod.equals(Request.ACK)) {
    processAck(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.BYE)) {
    processBye(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.CANCEL)) {
    processCancel(serverTransaction,request);
    processed=true;
  }
 else   if (requestMethod.equals(Request.REFER)) {
    logger.debug("received REFER");
    processRefer(serverTransaction,request,jainSipProvider);
    processed=true;
  }
 else   if (requestMethod.equals(Request.NOTIFY)) {
    logger.debug("received NOTIFY");
    processed=processNotify(serverTransaction,request);
  }
  return processed;
}
