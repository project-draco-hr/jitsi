{
  CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(serverTransaction.getDialog());
  if (callPeer == null) {
    logger.debug("received a stray CANCEL req. ignoring");
    return;
  }
  try {
    Response ok=createOKResponse(cancelRequest,serverTransaction.getDialog());
    serverTransaction.sendResponse(ok);
    logger.debug("sent an ok response to a CANCEL request:\n" + ok);
  }
 catch (  ParseException ex) {
    logErrorAndFailCallPeer("Failed to create an OK Response to an CANCEL request.",ex,callPeer);
    return;
  }
catch (  Exception ex) {
    logErrorAndFailCallPeer("Failed to send an OK Response to an CANCEL request.",ex,callPeer);
    return;
  }
  try {
    Transaction tran=callPeer.getFirstTransaction();
    if (!(tran instanceof ServerTransaction)) {
      logger.error("Received a misplaced CANCEL request!");
      return;
    }
    ServerTransaction inviteTran=(ServerTransaction)tran;
    Request invite=callPeer.getFirstTransaction().getRequest();
    Response requestTerminated=protocolProvider.getMessageFactory().createResponse(Response.REQUEST_TERMINATED,invite);
    inviteTran.sendResponse(requestTerminated);
    if (logger.isDebugEnabled())     logger.debug("sent request terminated response:\n" + requestTerminated);
  }
 catch (  ParseException ex) {
    logger.error("Failed to create a REQUEST_TERMINATED Response to " + "an INVITE request.",ex);
  }
catch (  Exception ex) {
    logger.error("Failed to send an REQUEST_TERMINATED Response to " + "an INVITE request.",ex);
  }
  callPeer.setState(CallPeerState.DISCONNECTED);
}
