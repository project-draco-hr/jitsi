{
  CallPeerSipImpl callParticipant=(CallPeerSipImpl)participant;
  Transaction transaction=callParticipant.getFirstTransaction();
  Dialog dialog=callParticipant.getDialog();
  if (transaction == null || !dialog.isServer()) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    throw new OperationFailedException("Failed to extract a ServerTransaction " + "from the call's associated dialog!",OperationFailedException.INTERNAL_ERROR);
  }
  CallParticipantState participantState=participant.getState();
  if (participantState.equals(CallParticipantState.CONNECTED) || CallParticipantState.isOnHold(participantState)) {
    logger.info("Ignoring user request to answer a CallParticipant " + "that is already connected. CP:" + participant);
    return;
  }
  ServerTransaction serverTransaction=(ServerTransaction)transaction;
  Response ok=null;
  try {
    ok=createOKResponse(callParticipant.getFirstTransaction().getRequest(),dialog);
  }
 catch (  ParseException ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    throwOperationFailedException("Failed to construct an OK response to an INVITE request",OperationFailedException.INTERNAL_ERROR,ex);
  }
  ContentTypeHeader contentTypeHeader=null;
  try {
    contentTypeHeader=protocolProvider.getHeaderFactory().createContentTypeHeader("application","sdp");
  }
 catch (  ParseException ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    throwOperationFailedException("Failed to create a content type header for the OK response",OperationFailedException.INTERNAL_ERROR,ex);
  }
  try {
    CallSession callSession=SipActivator.getMediaService().createCallSession(callParticipant.getCall());
    ((CallSipImpl)callParticipant.getCall()).setMediaCallSession(callSession);
    callSession.setSessionCreatorCallback(callParticipant);
    String sdpOffer=callParticipant.getSdpDescription();
    String sdp;
    if ((sdpOffer != null) && (sdpOffer.length() > 0)) {
      sdp=callSession.processSdpOffer(callParticipant,sdpOffer);
      callParticipant.setCallInfoURL(callSession.getCallInfoURL());
    }
 else {
      sdp=callSession.createSdpOffer();
    }
    ok.setContent(sdp,contentTypeHeader);
  }
 catch (  MediaException ex) {
    logger.error("Failed to create an SDP description for an OK response " + "to an INVITE request!",ex);
    this.sayError((CallPeerSipImpl)participant,Response.NOT_ACCEPTABLE_HERE);
  }
catch (  ParseException ex) {
    logger.error("Failed to parse sdp data while creating invite request!",ex);
    this.sayError((CallPeerSipImpl)participant,Response.NOT_ACCEPTABLE_HERE);
  }
  ContactHeader contactHeader=protocolProvider.getContactHeader(dialog.getRemoteTarget());
  ok.addHeader(contactHeader);
  try {
    serverTransaction.sendResponse(ok);
    if (logger.isDebugEnabled())     logger.debug("sent response\n" + ok);
  }
 catch (  Exception ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    throwOperationFailedException("Failed to send an OK response to an INVITE request",OperationFailedException.NETWORK_FAILURE,ex);
  }
}
