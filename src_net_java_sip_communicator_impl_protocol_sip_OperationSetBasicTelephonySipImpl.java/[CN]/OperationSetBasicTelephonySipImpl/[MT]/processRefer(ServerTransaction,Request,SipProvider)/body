{
  ReferToHeader referToHeader=(ReferToHeader)referRequest.getHeader(ReferToHeader.NAME);
  if (referToHeader == null) {
    logger.error("No Refer-To header in REFER request:\n" + referRequest);
    return;
  }
  Address referToAddress=referToHeader.getAddress();
  if (referToAddress == null) {
    logger.error("No address in REFER request Refer-To header:\n" + referRequest);
    return;
  }
  final Dialog dialog=serverTransaction.getDialog();
  Response accepted=null;
  try {
    accepted=protocolProvider.getMessageFactory().createResponse(Response.ACCEPTED,referRequest);
  }
 catch (  ParseException ex) {
    logger.error("Failed to create Accepted response to REFER request:\n" + referRequest,ex);
  }
  boolean removeSubscription=false;
  if (accepted != null) {
    Throwable failure=null;
    try {
      serverTransaction.sendResponse(accepted);
    }
 catch (    InvalidArgumentException ex) {
      failure=ex;
    }
catch (    SipException ex) {
      failure=ex;
    }
    if (failure != null) {
      accepted=null;
      logger.error("Failed to send Accepted response to REFER request:\n" + referRequest,failure);
    }
 else {
      try {
        removeSubscription=EventPackageUtils.addSubscription(dialog,referRequest);
      }
 catch (      SipException ex) {
        logger.error("Failed to make the REFER request" + "keep the dialog alive after BYE:\n" + referRequest,ex);
      }
      try {
        sendReferNotifyRequest(dialog,SubscriptionStateHeader.ACTIVE,null,"SIP/2.0 100 Trying",sipProvider);
      }
 catch (      OperationFailedException ex) {
      }
    }
  }
  Call referToCall;
  try {
    referToCall=createOutgoingCall(referToAddress,referRequest);
  }
 catch (  OperationFailedException ex) {
    referToCall=null;
    logger.error("Failed to create outgoing call to " + referToAddress,ex);
  }
  final Call referToCallListenerSource=referToCall;
  final boolean sendNotifyRequest=(accepted != null);
  final Object subscription=(removeSubscription ? referRequest : null);
  CallChangeListener referToCallListener=new CallChangeAdapter(){
    /** 
 * The indicator which determines whether the job of this listener
 * has been done i.e. whether a single subscription-terminating
 * NOTIFY with the final result of the REFER has been sent.
 */
    private boolean done;
    public synchronized void callStateChanged(    CallChangeEvent evt){
      if (!done && referToCallStateChanged(referToCallListenerSource,sendNotifyRequest,dialog,sipProvider,subscription)) {
        done=true;
        if (referToCallListenerSource != null) {
          referToCallListenerSource.removeCallChangeListener(this);
        }
      }
    }
  }
;
  if (referToCall != null) {
    referToCall.addCallChangeListener(referToCallListener);
  }
  referToCallListener.callStateChanged(null);
}
