{
  ReferToHeader referToHeader=(ReferToHeader)referRequest.getHeader(ReferToHeader.NAME);
  if (referToHeader == null) {
    logger.error("No Refer-To header in REFER request:\n" + referRequest);
    return;
  }
  Address referToAddress=referToHeader.getAddress();
  if (referToAddress == null) {
    logger.error("No address in REFER request Refer-To header:\n" + referRequest);
    return;
  }
  final Dialog dialog=serverTransaction.getDialog();
  CallPeerSipImpl callPeer=activeCallsRepository.findCallPeer(dialog);
  if (callPeer == null) {
    if (transferAuthority == null) {
      logger.warn("Ignoring REFER request without call for request:" + referRequest);
      try {
        serverTransaction.terminate();
      }
 catch (      Throwable e) {
        logger.warn("Failed to properly terminate transaction for " + "a rogue request. Well ... so be it " + "Request:"+ referRequest);
      }
      return;
    }
    FromHeader fromHeader=(FromHeader)referRequest.getHeader(FromHeader.NAME);
    OperationSetPresenceSipImpl opSetPersPresence=(OperationSetPresenceSipImpl)protocolProvider.getOperationSet(OperationSetPersistentPresence.class);
    Contact from=opSetPersPresence.resolveContactID(fromHeader.getAddress().getURI().toString());
    if (from == null) {
      if (logger.isDebugEnabled())       logger.debug("received a message from an unknown contact: " + fromHeader.getAddress().getURI().toString());
      from=opSetPersPresence.createVolatileContact(fromHeader.getAddress().getURI().toString());
    }
    if (!transferAuthority.processTransfer(from,referToAddress.getURI().toString())) {
      Response declineResponse;
      try {
        declineResponse=protocolProvider.getMessageFactory().createResponse(Response.DECLINE,referRequest);
      }
 catch (      ParseException e) {
        logger.error("Error while creating 603 response",e);
        return;
      }
      try {
        serverTransaction.sendResponse(declineResponse);
      }
 catch (      Exception e) {
        logger.error("Error while sending the response 603",e);
        return;
      }
      return;
    }
  }
  Response accepted=null;
  try {
    accepted=protocolProvider.getMessageFactory().createResponse(Response.ACCEPTED,referRequest);
  }
 catch (  ParseException ex) {
    logger.error("Failed to create Accepted response to REFER request:\n" + referRequest,ex);
  }
  boolean removeSubscription=false;
  if (accepted != null) {
    Throwable failure=null;
    try {
      serverTransaction.sendResponse(accepted);
    }
 catch (    InvalidArgumentException ex) {
      failure=ex;
    }
catch (    SipException ex) {
      failure=ex;
    }
    if (failure != null) {
      accepted=null;
      logger.error("Failed to send Accepted response to REFER request:\n" + referRequest,failure);
    }
 else {
      try {
        removeSubscription=EventPackageUtils.addSubscription(dialog,referRequest);
      }
 catch (      SipException ex) {
        logger.error("Failed to make the REFER request " + "keep the dialog alive after BYE:\n" + referRequest,ex);
      }
      try {
        sendReferNotifyRequest(dialog,SubscriptionStateHeader.ACTIVE,null,"SIP/2.0 100 Trying",sipProvider);
      }
 catch (      OperationFailedException ex) {
      }
    }
  }
  if (callPeer != null)   callPeer.setState(CallPeerState.REFERRED);
  CallSipImpl referToCall;
  try {
    referToCall=createOutgoingCall(referToAddress,referRequest);
  }
 catch (  OperationFailedException ex) {
    referToCall=null;
    logger.error("Failed to create outgoing call to " + referToAddress,ex);
  }
  final CallSipImpl referToCallListenerSource=referToCall;
  final boolean sendNotifyRequest=(accepted != null);
  final Object subscription=(removeSubscription ? referRequest : null);
  CallChangeListener referToCallListener=new CallChangeAdapter(){
    /** 
 * The indicator which determines whether the job of this listener
 * has been done i.e. whether a single subscription-terminating
 * NOTIFY with the final result of the REFER has been sent.
 */
    private boolean done;
    /** 
 * Notifies this <tt>CallChangeListener</tt> that a <tt>Call</tt>
 * which it has been registered with has changed it state.
 * @param evt a <tt>CallChangeEvent</tt> which specifies the
 * <tt>Call</tt> which has changed its state
 */
    @Override public synchronized void callStateChanged(    CallChangeEvent evt){
      if (evt != null && !evt.getEventType().equals(CallChangeEvent.CALL_STATE_CHANGE))       return;
      if (!done && referToCallStateChanged(referToCallListenerSource,sendNotifyRequest,dialog,sipProvider,subscription)) {
        done=true;
        if (referToCallListenerSource != null)         referToCallListenerSource.removeCallChangeListener(this);
      }
    }
  }
;
  if (referToCall != null)   referToCall.addCallChangeListener(referToCallListener);
  referToCallListener.callStateChanged(null);
}
