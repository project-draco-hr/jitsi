{
  CallParticipantSipImpl callParticipant=(CallParticipantSipImpl)participant;
  Transaction transaction=callParticipant.getFirstTransaction();
  Dialog dialog=callParticipant.getDialog();
  if (transaction == null || !dialog.isServer()) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    throw new OperationFailedException("Failed to extract a ServerTransaction " + "from the call's associated dialog!",OperationFailedException.INTERNAL_ERROR);
  }
  if (participant.getState().equals(CallParticipantState.CONNECTED)) {
    logger.info("Ignoring user request to answer a CallParticipant " + "that is already connected. CP:" + participant);
    return;
  }
  ServerTransaction serverTransaction=(ServerTransaction)transaction;
  Response ok=null;
  try {
    ok=protocolProvider.getMessageFactory().createResponse(Response.OK,callParticipant.getFirstTransaction().getRequest());
    ok.setHeader(protocolProvider.getSipCommUserAgentHeader());
    protocolProvider.attachToTag(ok,dialog);
  }
 catch (  ParseException ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    logger.error("Failed to construct an OK response to an INVITE request",ex);
    throw new OperationFailedException("Failed to construct an OK response to an INVITE request",OperationFailedException.INTERNAL_ERROR,ex);
  }
  ContentTypeHeader contentTypeHeader=null;
  try {
    contentTypeHeader=protocolProvider.getHeaderFactory().createContentTypeHeader("application","sdp");
  }
 catch (  ParseException ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    logger.error("Failed to create a content type header for the OK response",ex);
    throw new OperationFailedException("Failed to create a content type header for the OK response",OperationFailedException.INTERNAL_ERROR,ex);
  }
  try {
    CallSession callSession=SipActivator.getMediaService().createCallSession(callParticipant.getCall());
    ((CallSipImpl)callParticipant.getCall()).setMediaCallSession(callSession);
    String sdp=null;
    if (callParticipant.getSdpDescription() != null && callParticipant.getSdpDescription().length() > 0) {
      sdp=callSession.processSdpOffer(callParticipant,callParticipant.getSdpDescription());
    }
 else {
      sdp=callSession.createSdpOffer();
    }
    ok.setContent(sdp,contentTypeHeader);
  }
 catch (  MediaException ex) {
    this.sayError((CallParticipantSipImpl)participant,Response.NOT_ACCEPTABLE_HERE);
    logger.error("No sdp data was provided for the ok response to " + "an INVITE request!",ex);
    throw new OperationFailedException("Failed to created an SDP description for an ok response " + "to an INVITE request!",OperationFailedException.INTERNAL_ERROR,ex);
  }
catch (  ParseException ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    logger.error("Failed to parse sdp data while creating invite request!",ex);
    throw new OperationFailedException("Failed to parse sdp data while creating invite request!",OperationFailedException.INTERNAL_ERROR,ex);
  }
  ContactHeader contactHeader=protocolProvider.getContactHeader();
  ok.addHeader(contactHeader);
  try {
    serverTransaction.sendResponse(ok);
    if (logger.isDebugEnabled())     logger.debug("sent response\n" + ok);
  }
 catch (  Exception ex) {
    callParticipant.setState(CallParticipantState.DISCONNECTED);
    logger.error("Failed to send an OK response to an INVITE request",ex);
    throw new OperationFailedException("Failed to send an OK response to an INVITE request",OperationFailedException.NETWORK_FAILURE,ex);
  }
}
