{
  HashMap<String,String> accountProperties=new HashMap<String,String>();
  accountProperties.put(ProtocolProviderFactory.PROTOCOL,getProtocol());
  String protocolIconPath=getProtocolIconPath();
  if (protocolIconPath != null)   accountProperties.put(ProtocolProviderFactory.PROTOCOL_ICON_PATH,protocolIconPath);
  String accountIconPath=getAccountIconPath();
  if (accountIconPath != null)   accountProperties.put(ProtocolProviderFactory.ACCOUNT_ICON_PATH,accountIconPath);
  if (registration.isRememberPassword()) {
    accountProperties.put(ProtocolProviderFactory.PASSWORD,passwd);
  }
 else {
    registration.setPassword(null);
  }
  String serverAddress=null;
  String serverFromUsername=SIPAccountRegistrationForm.getServerFromUserName(userName);
  if (registration.getServerAddress() != null)   serverAddress=registration.getServerAddress();
  if (serverFromUsername == null && registration.getDefaultDomain() != null) {
    userName=userName + "@" + registration.getDefaultDomain();
    if (serverAddress == null)     serverAddress=registration.getDefaultDomain();
  }
 else   if (serverAddress == null && serverFromUsername != null) {
    serverAddress=serverFromUsername;
  }
  if (serverAddress != null) {
    accountProperties.put(ProtocolProviderFactory.SERVER_ADDRESS,serverAddress);
    if (userName.indexOf(serverAddress) < 0)     accountProperties.put(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,Boolean.toString(true));
  }
  accountProperties.put(ProtocolProviderFactory.DISPLAY_NAME,registration.getDisplayName());
  accountProperties.put(ProtocolProviderFactory.AUTHORIZATION_NAME,registration.getAuthorizationName());
  accountProperties.put(ProtocolProviderFactory.SERVER_PORT,registration.getServerPort());
  if (registration.isProxyAutoConfigure()) {
    accountProperties.put(ProtocolProviderFactory.PROXY_AUTO_CONFIG,Boolean.TRUE.toString());
  }
 else {
    accountProperties.put(ProtocolProviderFactory.PROXY_AUTO_CONFIG,Boolean.FALSE.toString());
    accountProperties.put(ProtocolProviderFactory.PROXY_ADDRESS,registration.getProxy());
    accountProperties.put(ProtocolProviderFactory.PROXY_PORT,registration.getProxyPort());
    accountProperties.put(ProtocolProviderFactory.PREFERRED_TRANSPORT,registration.getPreferredTransport());
  }
  accountProperties.put(ProtocolProviderFactory.IS_PRESENCE_ENABLED,Boolean.toString(registration.isEnablePresence()));
  if (serverAddress != null) {
    accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,Boolean.toString(registration.isForceP2PMode()));
  }
 else {
    accountProperties.put(ProtocolProviderFactory.FORCE_P2P_MODE,Boolean.TRUE.toString());
  }
  accountProperties.put(ProtocolProviderFactory.DEFAULT_ENCRYPTION,Boolean.toString(registration.isDefaultEncryption()));
  java.util.List<String> enabledEncryptionProtocols=registration.getEncryptionProtocols(true);
  String enabledEncryptionProtocolsString="";
  for (int i=0; i < enabledEncryptionProtocols.size(); ++i) {
    enabledEncryptionProtocolsString+=enabledEncryptionProtocols.get(i) + " ";
  }
  accountProperties.put(ProtocolProviderFactory.ENABLED_ENCRYPTION_PROTOCOLS,enabledEncryptionProtocolsString);
  java.util.List<String> disabledEncryptionProtocols=registration.getEncryptionProtocols(false);
  String disabledEncryptionProtocolsString="";
  for (int i=0; i < disabledEncryptionProtocols.size(); ++i) {
    disabledEncryptionProtocolsString+=disabledEncryptionProtocols.get(i) + " ";
  }
  accountProperties.put(ProtocolProviderFactory.DISABLED_ENCRYPTION_PROTOCOLS,disabledEncryptionProtocolsString);
  accountProperties.put(ProtocolProviderFactory.DEFAULT_SIPZRTP_ATTRIBUTE,Boolean.toString(registration.isSipZrtpAttribute()));
  accountProperties.put(ProtocolProviderFactory.SAVP_OPTION,Integer.toString(registration.getSavpOption()));
  accountProperties.put(ProtocolProviderFactory.SDES_CIPHER_SUITES,registration.getSDesCipherSuites());
  accountProperties.put(ProtocolProviderFactory.POLLING_PERIOD,registration.getPollingPeriod());
  accountProperties.put(ProtocolProviderFactory.SUBSCRIPTION_EXPIRATION,registration.getSubscriptionExpiration());
  accountProperties.put(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE,registration.getTlsClientCertificate());
  if (registration.getKeepAliveMethod() != null)   accountProperties.put(ProtocolProviderFactory.KEEP_ALIVE_METHOD,registration.getKeepAliveMethod());
 else   accountProperties.put(ProtocolProviderFactory.KEEP_ALIVE_METHOD,registration.getDefaultKeepAliveMethod());
  accountProperties.put(ProtocolProviderFactory.KEEP_ALIVE_INTERVAL,registration.getKeepAliveInterval());
  if (registration.getDTMFMethod() != null)   accountProperties.put("DTMF_METHOD",registration.getDTMFMethod());
 else   accountProperties.put("DTMF_METHOD",registration.getDefaultDTMFMethod());
  accountProperties.put("XIVO_ENABLE",Boolean.toString(registration.isXiVOEnable()));
  accountProperties.put("XCAP_ENABLE",Boolean.toString(registration.isXCapEnable()));
  if (registration.isXCapEnable()) {
    accountProperties.put("XCAP_USE_SIP_CREDETIALS",Boolean.toString(registration.isClistOptionUseSipCredentials()));
    if (registration.getClistOptionServerUri() != null) {
      accountProperties.put("XCAP_SERVER_URI",registration.getClistOptionServerUri());
    }
    if (registration.getClistOptionUser() != null) {
      accountProperties.put("XCAP_USER",registration.getClistOptionUser());
    }
    if (registration.getClistOptionPassword() != null) {
      accountProperties.put("XCAP_PASSWORD",registration.getClistOptionPassword());
    }
  }
 else   if (registration.isXiVOEnable()) {
    accountProperties.put("XIVO_USE_SIP_CREDETIALS",Boolean.toString(registration.isClistOptionUseSipCredentials()));
    if (registration.getClistOptionServerUri() != null) {
      accountProperties.put("XIVO_SERVER_URI",registration.getClistOptionServerUri());
    }
    if (registration.getClistOptionUser() != null) {
      accountProperties.put("XIVO_USER",registration.getClistOptionUser());
    }
    if (registration.getClistOptionPassword() != null) {
      accountProperties.put("XIVO_PASSWORD",registration.getClistOptionPassword());
    }
  }
  if (registration.isMessageWaitingIndicationsEnabled()) {
    if (!StringUtils.isNullOrEmpty(registration.getVoicemailURI(),true))     accountProperties.put(ProtocolProviderFactory.VOICEMAIL_URI,registration.getVoicemailURI());
 else     if (isModification())     accountProperties.put(ProtocolProviderFactory.VOICEMAIL_URI,"");
    if (!StringUtils.isNullOrEmpty(registration.getVoicemailCheckURI(),true))     accountProperties.put(ProtocolProviderFactory.VOICEMAIL_CHECK_URI,registration.getVoicemailCheckURI());
 else     if (isModification())     accountProperties.put(ProtocolProviderFactory.VOICEMAIL_CHECK_URI,"");
    if (isModification()) {
      accountProperties.put(ProtocolProviderFactory.VOICEMAIL_ENABLED,null);
    }
  }
 else   if (isModification()) {
    accountProperties.put(ProtocolProviderFactory.VOICEMAIL_ENABLED,Boolean.FALSE.toString());
  }
  if (isModification()) {
    accountProperties.put(ProtocolProviderFactory.USER_ID,userName);
    providerFactory.modifyAccount(protocolProvider,accountProperties);
    setModification(false);
    return protocolProvider;
  }
  try {
    AccountID accountID=providerFactory.installAccount(userName,accountProperties);
    ServiceReference serRef=providerFactory.getProviderForAccount(accountID);
    protocolProvider=(ProtocolProviderService)SIPAccRegWizzActivator.bundleContext.getService(serRef);
  }
 catch (  IllegalStateException exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Account already exists.",OperationFailedException.IDENTIFICATION_CONFLICT);
  }
catch (  Exception exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException(exc.getMessage(),OperationFailedException.GENERAL_ERROR);
  }
  return protocolProvider;
}
