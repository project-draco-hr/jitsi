{
  HashMap<String,String> accountProperties=new HashMap<String,String>();
  String protocolIconPath=getProtocolIconPath();
  String accountIconPath=getAccountIconPath();
  registration.storeProperties(userName,passwd,protocolIconPath,accountIconPath,isModification(),accountProperties);
  if (isModification()) {
    accountProperties.put(ProtocolProviderFactory.USER_ID,userName);
    providerFactory.modifyAccount(protocolProvider,accountProperties);
    setModification(false);
    return protocolProvider;
  }
  try {
    AccountID accountID=providerFactory.installAccount(userName,accountProperties);
    ServiceReference serRef=providerFactory.getProviderForAccount(accountID);
    protocolProvider=(ProtocolProviderService)SIPAccRegWizzActivator.bundleContext.getService(serRef);
  }
 catch (  IllegalStateException exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException("Account already exists.",OperationFailedException.IDENTIFICATION_CONFLICT);
  }
catch (  Exception exc) {
    logger.warn(exc.getMessage());
    throw new OperationFailedException(exc.getMessage(),OperationFailedException.GENERAL_ERROR);
  }
  return protocolProvider;
}
