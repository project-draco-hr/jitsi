{
  if (connector == null)   throw new NullPointerException("connector");
  AbstractRTPConnector oldValue=rtpConnector;
  if ((oldValue != null) && (oldValue.getConnector() == connector))   return;
switch (connector.getProtocol()) {
case UDP:
    rtpConnector=new RTPTransformUDPConnector(connector){
      @Override protected TransformUDPOutputStream createDataOutputStream() throws IOException {
        TransformUDPOutputStream dataOutputStream=super.createDataOutputStream();
        if (dataOutputStream != null)         configureDataOutputStream(dataOutputStream);
        return dataOutputStream;
      }
      @Override protected TransformUDPInputStream createDataInputStream() throws IOException {
        TransformUDPInputStream dataInputStream=super.createDataInputStream();
        if (dataInputStream != null)         configureDataInputStream(dataInputStream);
        return dataInputStream;
      }
    }
;
  break;
case TCP:
rtpConnector=new RTPTransformTCPConnector(connector){
  @Override protected TransformTCPOutputStream createDataOutputStream() throws IOException {
    TransformTCPOutputStream dataOutputStream=super.createDataOutputStream();
    if (dataOutputStream != null)     configureDataOutputStream(dataOutputStream);
    return dataOutputStream;
  }
  @Override protected TransformTCPInputStream createDataInputStream() throws IOException {
    TransformTCPInputStream dataInputStream=super.createDataInputStream();
    if (dataInputStream != null)     configureDataInputStream(dataInputStream);
    return dataInputStream;
  }
}
;
break;
default :
throw new IllegalArgumentException("connector");
}
rtpConnectorChanged(oldValue,rtpConnector);
}
