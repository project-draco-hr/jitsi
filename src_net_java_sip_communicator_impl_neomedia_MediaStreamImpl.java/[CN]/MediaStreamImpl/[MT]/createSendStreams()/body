{
  RTPManager rtpManager=getRTPManager();
  MediaDeviceSession deviceSession=getDeviceSession();
  DataSource dataSource=deviceSession.getOutputDataSource();
  int streamCount;
  if (dataSource instanceof PushBufferDataSource) {
    PushBufferStream[] streams=((PushBufferDataSource)dataSource).getStreams();
    streamCount=(streams == null) ? 0 : streams.length;
  }
 else   if (dataSource instanceof PushDataSource) {
    PushSourceStream[] streams=((PushDataSource)dataSource).getStreams();
    streamCount=(streams == null) ? 0 : streams.length;
  }
 else   if (dataSource instanceof PullBufferDataSource) {
    PullBufferStream[] streams=((PullBufferDataSource)dataSource).getStreams();
    streamCount=(streams == null) ? 0 : streams.length;
  }
 else   if (dataSource instanceof PullDataSource) {
    PullSourceStream[] streams=((PullDataSource)dataSource).getStreams();
    streamCount=(streams == null) ? 0 : streams.length;
  }
 else   streamCount=(dataSource == null) ? 0 : 1;
  for (int streamIndex=0; streamIndex < streamCount; streamIndex++) {
    Throwable exception=null;
    try {
      SendStream sendStream=rtpManager.createSendStream(dataSource,streamIndex);
      if (logger.isTraceEnabled())       logger.trace("Created SendStream" + " with hashCode " + sendStream.hashCode() + " for "+ toString(dataSource)+ " and streamIndex "+ streamIndex+ " in RTPManager with hashCode "+ rtpManager.hashCode());
    }
 catch (    IOException ioe) {
      exception=ioe;
    }
catch (    UnsupportedFormatException ufe) {
      exception=ufe;
    }
    if (exception != null) {
      logger.error("Failed to create send stream for data source " + dataSource + " and stream index "+ streamIndex,exception);
    }
  }
  sendStreamsAreCreated=true;
  if (logger.isTraceEnabled()) {
    @SuppressWarnings("unchecked") Vector<SendStream> sendStreams=rtpManager.getSendStreams();
    int sendStreamCount=(sendStreams == null) ? 0 : sendStreams.size();
    logger.trace("Total number of SendStreams in RTPManager with hashCode " + rtpManager.hashCode() + " is "+ sendStreamCount);
  }
  if (deviceSessionPropertyChangeListener == null)   deviceSessionPropertyChangeListener=new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (MediaDeviceSession.OUTPUT_DATA_SOURCE.equals(event.getPropertyName()))       deviceSessionOutputDataSourceChanged();
    }
  }
;
  deviceSession.addPropertyChangeListener(deviceSessionPropertyChangeListener);
}
