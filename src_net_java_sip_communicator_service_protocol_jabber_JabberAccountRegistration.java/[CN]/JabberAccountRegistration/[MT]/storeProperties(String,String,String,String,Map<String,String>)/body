{
  if (rememberPassword)   setPassword(passwd);
 else   setPassword(null);
  String serverName=null;
  if (getServerAddress() != null && getServerAddress().length() > 0) {
    serverName=getServerAddress();
  }
 else {
    serverName=getServerFromUserName(userName);
  }
  if (serverName == null || serverName.length() <= 0)   throw new OperationFailedException("Should specify a server for user name " + userName + ".",OperationFailedException.SERVER_NOT_SPECIFIED);
  BundleContext bContext=ProtocolProviderActivator.getBundleContext();
  ProtocolProviderFactory jbfFactory=ProtocolProviderFactory.getProtocolProviderFactory(bContext,ProtocolNames.JABBER);
  AccountManager accManager=ProtocolProviderActivator.getAccountManager();
  String accountNodeName=accManager.getAccountNodeName(jbfFactory,editedAccUID);
  if (accountNodeName != null) {
    ConfigurationService configSrvc=ProtocolProviderActivator.getConfigurationService();
    String factoryPackage=accManager.getFactoryImplPackageName(jbfFactory);
    String accountPrefix=factoryPackage + "." + accountNodeName;
    List<String> allProperties=configSrvc.getAllPropertyNames();
    String stunPrefix=accountPrefix + "." + ProtocolProviderFactory.STUN_PREFIX;
    String jinglePrefix=accountPrefix + "." + JingleNodeDescriptor.JN_PREFIX;
    for (    String property : allProperties) {
      if (property.startsWith(stunPrefix) || property.startsWith(jinglePrefix)) {
        configSrvc.removeProperty(property);
      }
    }
    String[] accKeys=this.accountProperties.keySet().toArray(new String[accountProperties.size()]);
    for (    String property : accKeys) {
      if (property.startsWith(ProtocolProviderFactory.STUN_PREFIX) || property.startsWith(JingleNodeDescriptor.JN_PREFIX)) {
        this.accountProperties.remove(property);
      }
    }
  }
  List<StunServerDescriptor> stunServers=getAdditionalStunServers();
  int serverIndex=-1;
  for (  StunServerDescriptor stunServer : stunServers) {
    serverIndex++;
    stunServer.storeDescriptor(this.accountProperties,ProtocolProviderFactory.STUN_PREFIX + serverIndex);
  }
  List<JingleNodeDescriptor> jnRelays=getAdditionalJingleNodes();
  serverIndex=-1;
  for (  JingleNodeDescriptor jnRelay : jnRelays) {
    serverIndex++;
    jnRelay.storeDescriptor(this.accountProperties,JingleNodeDescriptor.JN_PREFIX + serverIndex);
  }
  securityRegistration.storeProperties(this.accountProperties);
  encodingsRegistration.storeProperties(this.accountProperties);
  super.storeProperties(protocolIconPath,accountIconPath,accountProperties);
}
