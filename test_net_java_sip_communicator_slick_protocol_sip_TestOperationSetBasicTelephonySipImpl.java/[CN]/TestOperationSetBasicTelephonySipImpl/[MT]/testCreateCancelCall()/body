{
  OperationSetBasicTelephony basicTelephonyP1=(OperationSetBasicTelephony)fixture.provider1.getOperationSet(OperationSetBasicTelephony.class);
  OperationSetBasicTelephony basicTelephonyP2=(OperationSetBasicTelephony)fixture.provider2.getOperationSet(OperationSetBasicTelephony.class);
  CallEventCollector call1Listener=new CallEventCollector(basicTelephonyP1);
  CallEventCollector call2Listener=new CallEventCollector(basicTelephonyP2);
  String provider2Address=fixture.provider2.getAccountID().getAccountAddress();
  Call callAtP1=basicTelephonyP1.createCall(provider2Address);
  call1Listener.waitForEvent(10000);
  call2Listener.waitForEvent(10000);
  assertEquals("The provider that created the call did not dispatch " + "an event that it has done so.",1,call1Listener.collectedEvents.size());
  CallEvent callCreatedEvent=(CallEvent)call1Listener.collectedEvents.get(0);
  assertEquals("CallEvent.getEventID()",CallEvent.CALL_INITIATED,callCreatedEvent.getEventID());
  assertSame("CallEvent.getSource()",callAtP1,callCreatedEvent.getSource());
  assertTrue("The callee provider did not receive a call or did " + "not issue an event.",call2Listener.collectedEvents.size() > 0);
  CallEvent callReceivedEvent=(CallEvent)call2Listener.collectedEvents.get(0);
  Call callAtP2=callReceivedEvent.getSourceCall();
  assertEquals("CallEvent.getEventID()",CallEvent.CALL_RECEIVED,callReceivedEvent.getEventID());
  assertNotNull("CallEvent.getSource()",callAtP2);
  assertEquals("callAtP1.getCallParticipantsCount()",1,callAtP1.getCallParticipantsCount());
  assertEquals("callAtP2.getCallParticipantsCount()",1,callAtP2.getCallParticipantsCount());
  CallParticipant participantAtP1=(CallParticipant)callAtP1.getCallParticipants().next();
  CallParticipant participantAtP2=(CallParticipant)callAtP2.getCallParticipants().next();
  CallParticipantStateEventCollector stateCollectorForPp1=new CallParticipantStateEventCollector(participantAtP1,CallParticipantState.ALERTING_REMOTE_SIDE);
  CallParticipantStateEventCollector stateCollectorForPp2=new CallParticipantStateEventCollector(participantAtP2,CallParticipantState.INCOMING_CALL);
  participantAtP1.addCallParticipantListener(stateCollectorForPp1);
  participantAtP2.addCallParticipantListener(stateCollectorForPp2);
  stateCollectorForPp1.waitForEvent(10000);
  stateCollectorForPp2.waitForEvent(10000);
  String expectedParticipant1Address=fixture.provider2.getAccountID().getAccountAddress();
  String expectedParticipant1DisplayName=System.getProperty(SipProtocolProviderServiceLick.ACCOUNT_2_PREFIX + ProtocolProviderFactory.DISPLAY_NAME);
  assertTrue("Provider 2 did not advertise their " + "accountID.getAccoutAddress() address.",expectedParticipant1Address.indexOf(participantAtP1.getAddress()) != -1 || participantAtP1.getAddress().indexOf(expectedParticipant1Address) != -1);
  assertEquals("Provider 2 did not properly advertise their " + "display name.",expectedParticipant1DisplayName,participantAtP1.getDisplayName());
  assertSame("participantAtP1.getCall",participantAtP1.getCall(),callAtP1);
  String expectedParticipant2Address=fixture.provider1.getAccountID().getAccountAddress();
  String expectedParticipant2DisplayName=System.getProperty(SipProtocolProviderServiceLick.ACCOUNT_1_PREFIX + ProtocolProviderFactory.DISPLAY_NAME);
  assertTrue("Provider 1 did not advertise their " + "accountID.getAccoutAddress() address.",expectedParticipant2Address.indexOf(participantAtP2.getAddress()) != -1 || participantAtP2.getAddress().indexOf(expectedParticipant2Address) != -1);
  assertEquals("Provider 1 did not properly advertise their " + "display name.",expectedParticipant2DisplayName,participantAtP2.getDisplayName());
  assertSame("participantAtP2.getCall",participantAtP2.getCall(),callAtP2);
  assertEquals("The participant at provider one was not in the " + "right state.",CallParticipantState.ALERTING_REMOTE_SIDE,participantAtP1.getState());
  assertEquals("The participant at provider two was not in the " + "right state.",CallParticipantState.INCOMING_CALL,participantAtP2.getState());
}
