{
  OperationSetBasicTelephony basicTelephonyP1=(OperationSetBasicTelephony)fixture.provider1.getOperationSet(OperationSetBasicTelephony.class);
  OperationSetBasicTelephony basicTelephonyP2=(OperationSetBasicTelephony)fixture.provider2.getOperationSet(OperationSetBasicTelephony.class);
  CallEventCollector call1Listener=new CallEventCollector(basicTelephonyP1);
  CallEventCollector call2Listener=new CallEventCollector(basicTelephonyP2);
  String provider2Address=fixture.provider2.getAccountID().getAccountAddress();
  Call callAtP1=basicTelephonyP1.createCall(provider2Address);
  call1Listener.waitForEvent(10000);
  call2Listener.waitForEvent(10000);
  assertEquals("The provider that created the call did not dispatch " + "an event that it has done so.",1,call1Listener.collectedEvents.size());
  CallEvent callCreatedEvent=(CallEvent)call1Listener.collectedEvents.get(0);
  assertEquals("CallEvent.getEventID()",CallEvent.CALL_INITIATED,callCreatedEvent.getEventID());
  assertSame("CallEvent.getSource()",callAtP1,callCreatedEvent.getSource());
  assertTrue("The callee provider did not receive a call or did " + "not issue an event.",call2Listener.collectedEvents.size() > 0);
  CallEvent callReceivedEvent=(CallEvent)call2Listener.collectedEvents.get(0);
  Call callAtP2=callReceivedEvent.getSourceCall();
  assertEquals("CallEvent.getEventID()",CallEvent.CALL_RECEIVED,callReceivedEvent.getEventID());
  assertNotNull("CallEvent.getSource()",callAtP2);
  assertEquals("callAtP1.getCallPeerCount()",1,callAtP1.getCallPeerCount());
  assertEquals("callAtP2.getCallPeerCount()",1,callAtP2.getCallPeerCount());
  CallPeer peerAtP1=callAtP1.getCallPeers().next();
  CallPeer peerAtP2=callAtP2.getCallPeers().next();
  CallPeerStateEventCollector stateCollectorForPp1=new CallPeerStateEventCollector(peerAtP1,CallPeerState.ALERTING_REMOTE_SIDE);
  CallPeerStateEventCollector stateCollectorForPp2=new CallPeerStateEventCollector(peerAtP2,CallPeerState.INCOMING_CALL);
  stateCollectorForPp1.waitForEvent(10000,true);
  stateCollectorForPp2.waitForEvent(10000,true);
  assertSame("peerAtP1.getCall",peerAtP1.getCall(),callAtP1);
  assertSame("peerAtP2.getCall",peerAtP2.getCall(),callAtP2);
  assertEquals("The peer at provider one was not in the " + "right state.",CallPeerState.ALERTING_REMOTE_SIDE,peerAtP1.getState());
  assertEquals("The peer at provider two was not in the " + "right state.",CallPeerState.INCOMING_CALL,peerAtP2.getState());
  if (Boolean.getBoolean("accounts.sip.PRESERVE_PEER_INFO")) {
    String expectedPeer1Address=fixture.provider2.getAccountID().getAccountAddress();
    String expectedPeer1DisplayName=System.getProperty(SipProtocolProviderServiceLick.ACCOUNT_2_PREFIX + ProtocolProviderFactory.DISPLAY_NAME);
    assertTrue("Provider 2 did not advertise their " + "accountID.getAccoutAddress() address.",expectedPeer1Address.indexOf(peerAtP1.getAddress()) != -1 || peerAtP1.getAddress().indexOf(expectedPeer1Address) != -1);
    assertEquals("Provider 2 did not properly advertise their " + "display name.",expectedPeer1DisplayName,peerAtP1.getDisplayName());
    String expectedPeer2Address=fixture.provider1.getAccountID().getAccountAddress();
    String expectedPeer2DisplayName=System.getProperty(SipProtocolProviderServiceLick.ACCOUNT_1_PREFIX + ProtocolProviderFactory.DISPLAY_NAME);
    assertTrue("Provider 1 did not advertise their " + "accountID.getAccoutAddress() address.",expectedPeer2Address.indexOf(peerAtP2.getAddress()) != -1 || peerAtP2.getAddress().indexOf(expectedPeer2Address) != -1);
    assertEquals("Provider 1 did not properly advertise their " + "display name.",expectedPeer2DisplayName,peerAtP2.getDisplayName());
  }
  stateCollectorForPp1=new CallPeerStateEventCollector(peerAtP1,CallPeerState.DISCONNECTED);
  stateCollectorForPp2=new CallPeerStateEventCollector(peerAtP2,CallPeerState.DISCONNECTED);
  call1Listener=new CallEventCollector(basicTelephonyP1);
  call2Listener=new CallEventCollector(basicTelephonyP2);
  CallStateEventCollector call1StateCollector=new CallStateEventCollector(callAtP1,CallState.CALL_ENDED);
  CallStateEventCollector call2StateCollector=new CallStateEventCollector(callAtP2,CallState.CALL_ENDED);
  basicTelephonyP1.hangupCallPeer(peerAtP1);
  call1Listener.waitForEvent(10000);
  call2Listener.waitForEvent(10000);
  stateCollectorForPp1.waitForEvent(10000);
  stateCollectorForPp2.waitForEvent(10000);
  call1StateCollector.waitForEvent(10000);
  call2StateCollector.waitForEvent(10000);
  assertEquals("The peer at provider one was not in the " + "right state.",CallPeerState.DISCONNECTED,peerAtP1.getState());
  assertEquals("The basic telephony operation set did not distribute " + "an event to notify us that a call has been ended.",1,call1Listener.collectedEvents.size());
  CallEvent collectedEvent=(CallEvent)call1Listener.collectedEvents.get(0);
  assertEquals("The basic telephony operation set did not distribute " + "an event to notify us that a call has been ended.",CallEvent.CALL_ENDED,collectedEvent.getEventID());
  assertEquals("The peer at provider one was not in the " + "right state.",CallPeerState.DISCONNECTED,peerAtP2.getState());
  assertEquals("The basic telephony operation set did not distribute " + "an event to notify us that a call has been ended.",1,call2Listener.collectedEvents.size());
  collectedEvent=(CallEvent)call2Listener.collectedEvents.get(0);
  assertEquals("The basic telephony operation set did not distribute " + "an event to notify us that a call has been ended.",CallEvent.CALL_ENDED,collectedEvent.getEventID());
  assertEquals("A call did not change its state to CallState.CALL_ENDED " + "when it ended.",CallState.CALL_ENDED,callAtP1.getCallState());
  assertEquals("A call did not change its state to CallState.CALL_ENDED " + "when it ended.",CallState.CALL_ENDED,callAtP2.getCallState());
}
