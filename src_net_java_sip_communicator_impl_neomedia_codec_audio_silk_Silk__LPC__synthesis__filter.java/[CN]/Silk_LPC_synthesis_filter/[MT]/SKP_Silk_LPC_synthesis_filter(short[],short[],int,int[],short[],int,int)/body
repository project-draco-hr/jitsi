{
  int k, j, idx;
  int Order_half=(Order >> 1);
  int SA, SB, out32_Q10, out32;
  Silk_typedef.SKP_assert(2 * Order_half == Order);
  for (k=0; k < len; k++) {
    SA=S[Order - 1];
    out32_Q10=0;
    for (j=0; j < (Order_half - 1); j++) {
      idx=Silk_macros.SKP_SMULBB(2,j) + 1;
      SB=S[Order - 1 - idx];
      S[Order - 1 - idx]=SA;
      out32_Q10=Silk_macros.SKP_SMLAWB(out32_Q10,SA,A_Q12[(j << 1)]);
      out32_Q10=Silk_macros.SKP_SMLAWB(out32_Q10,SB,A_Q12[(j << 1) + 1]);
      SA=S[Order - 2 - idx];
      S[Order - 2 - idx]=SB;
    }
    SB=S[0];
    S[0]=SA;
    out32_Q10=Silk_macros.SKP_SMLAWB(out32_Q10,SA,A_Q12[Order - 2]);
    out32_Q10=Silk_macros.SKP_SMLAWB(out32_Q10,SB,A_Q12[Order - 1]);
    out32_Q10=Silk_macros.SKP_ADD_SAT32(out32_Q10,Silk_macros.SKP_SMULWB(Gain_Q26,in[k]));
    out32=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(out32_Q10,10);
    out[k]=(short)Silk_SigProc_FIX.SKP_SAT16(out32);
    S[Order - 1]=Silk_SigProc_FIX.SKP_LSHIFT_SAT32(out32_Q10,4);
  }
}
