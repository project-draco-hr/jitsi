{
synchronized (initializationLock) {
    this.accountID=accountID;
    supportedFeatures.clear();
    this.clearRegistrationStateChangeListener();
    this.clearSupportedOperationSet();
    String protocolIconPath=accountID.getAccountPropertyString(ProtocolProviderFactory.PROTOCOL_ICON_PATH);
    if (protocolIconPath == null)     protocolIconPath="resources/images/protocol/jabber";
    jabberIcon=new ProtocolIconJabberImpl(protocolIconPath);
    jabberStatusEnum=JabberStatusEnum.getJabberStatusEnum(protocolIconPath);
    supportedFeatures.add("http://jabber.org/protocol/disco#info");
    String keepAliveStrValue=accountID.getAccountPropertyString(ProtocolProviderFactory.KEEP_ALIVE_METHOD);
    InfoRetreiver infoRetreiver=new InfoRetreiver(this,screenname);
    OperationSetPersistentPresenceJabberImpl persistentPresence=new OperationSetPersistentPresenceJabberImpl(this,infoRetreiver);
    addSupportedOperationSet(OperationSetPersistentPresence.class,persistentPresence);
    addSupportedOperationSet(OperationSetPresence.class,persistentPresence);
    if (accountID.getAccountPropertyString(ProtocolProviderFactory.ACCOUNT_READ_ONLY_GROUPS) != null) {
      addSupportedOperationSet(OperationSetPersistentPresencePermissions.class,new OperationSetPersistentPresencePermissionsJabberImpl(this));
    }
    OperationSetBasicInstantMessagingJabberImpl basicInstantMessaging=new OperationSetBasicInstantMessagingJabberImpl(this);
    if (keepAliveStrValue == null || keepAliveStrValue.equalsIgnoreCase("XEP-0199")) {
      if (keepAliveManager == null)       keepAliveManager=new KeepAliveManager(this);
    }
    addSupportedOperationSet(OperationSetBasicInstantMessaging.class,basicInstantMessaging);
    addSupportedOperationSet(OperationSetExtendedAuthorizations.class,new OperationSetExtendedAuthorizationsJabberImpl(this,persistentPresence));
    addSupportedOperationSet(OperationSetWhiteboarding.class,new OperationSetWhiteboardingJabberImpl(this));
    addSupportedOperationSet(OperationSetTypingNotifications.class,new OperationSetTypingNotificationsJabberImpl(this));
    addSupportedOperationSet(OperationSetMultiUserChat.class,new OperationSetMultiUserChatJabberImpl(this));
    addSupportedOperationSet(OperationSetJitsiMeetTools.class,new OperationSetJitsiMeetToolsJabberImpl(this));
    addSupportedOperationSet(OperationSetServerStoredContactInfo.class,new OperationSetServerStoredContactInfoJabberImpl(infoRetreiver));
    OperationSetServerStoredAccountInfo accountInfo=new OperationSetServerStoredAccountInfoJabberImpl(this,infoRetreiver,screenname);
    addSupportedOperationSet(OperationSetServerStoredAccountInfo.class,accountInfo);
    addSupportedOperationSet(OperationSetAvatar.class,new OperationSetAvatarJabberImpl(this,accountInfo));
    addSupportedOperationSet(OperationSetFileTransfer.class,new OperationSetFileTransferJabberImpl(this));
    addSupportedOperationSet(OperationSetInstantMessageTransform.class,new OperationSetInstantMessageTransformImpl());
    supportedFeatures.add("urn:xmpp:thumbs:0");
    supportedFeatures.add("urn:xmpp:bob");
    addSupportedOperationSet(OperationSetThumbnailedFileFactory.class,new OperationSetThumbnailedFileFactoryImpl());
    supportedFeatures.add("http://jabber.org/protocol/muc#rooms");
    supportedFeatures.add("http://jabber.org/protocol/muc#traffic");
    supportedFeatures.add(URN_XMPP_JINGLE_RTP_HDREXT);
    ProviderManager providerManager=ProtocolProviderFactoryJabberImpl.providerManager;
    providerManager.addIQProvider(JingleIQ.ELEMENT_NAME,JingleIQ.NAMESPACE,new JingleIQProvider());
    providerManager.addIQProvider(InputEvtIQ.ELEMENT_NAME,InputEvtIQ.NAMESPACE,new InputEvtIQProvider());
    providerManager.addIQProvider(CoinIQ.ELEMENT_NAME,CoinIQ.NAMESPACE,new CoinIQProvider());
    supportedFeatures.add(URN_XMPP_JINGLE_COIN);
    providerManager.addIQProvider(JingleInfoQueryIQ.ELEMENT_NAME,JingleInfoQueryIQ.NAMESPACE,new JingleInfoQueryIQProvider());
    providerManager.addIQProvider(ColibriConferenceIQ.ELEMENT_NAME,ColibriConferenceIQ.NAMESPACE,new ColibriIQProvider());
    providerManager.addExtensionProvider(ConferenceDescriptionPacketExtension.ELEMENT_NAME,ConferenceDescriptionPacketExtension.NAMESPACE,new ConferenceDescriptionPacketExtension.Provider());
    providerManager.addExtensionProvider(CarbonPacketExtension.RECEIVED_ELEMENT_NAME,CarbonPacketExtension.NAMESPACE,new CarbonPacketExtension.Provider(CarbonPacketExtension.RECEIVED_ELEMENT_NAME));
    providerManager.addExtensionProvider(CarbonPacketExtension.SENT_ELEMENT_NAME,CarbonPacketExtension.NAMESPACE,new CarbonPacketExtension.Provider(CarbonPacketExtension.SENT_ELEMENT_NAME));
    providerManager.addExtensionProvider(Nick.ELEMENT_NAME,Nick.NAMESPACE,new Nick.Provider());
    boolean isCallingDisabled=JabberActivator.getConfigurationService().getBoolean(IS_CALLING_DISABLED,false);
    boolean isCallingDisabledForAccount=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT,false);
    if (!isCallingDisabled && !isCallingDisabledForAccount) {
      OperationSetBasicTelephonyJabberImpl basicTelephony=new OperationSetBasicTelephonyJabberImpl(this);
      addSupportedOperationSet(OperationSetAdvancedTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetBasicTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetSecureZrtpTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetSecureSDesTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetVideoTelephony.class,new OperationSetVideoTelephonyJabberImpl(basicTelephony));
      addSupportedOperationSet(OperationSetTelephonyConferencing.class,new OperationSetTelephonyConferencingJabberImpl(this));
      addSupportedOperationSet(OperationSetBasicAutoAnswer.class,new OperationSetAutoAnswerJabberImpl(this));
      addSupportedOperationSet(OperationSetResourceAwareTelephony.class,new OperationSetResAwareTelephonyJabberImpl(basicTelephony));
      boolean isVideobridgeDisabled=JabberActivator.getConfigurationService().getBoolean(OperationSetVideoBridge.IS_VIDEO_BRIDGE_DISABLED,false);
      if (!isVideobridgeDisabled) {
        addSupportedOperationSet(OperationSetVideoBridge.class,new OperationSetVideoBridgeImpl(this));
      }
      OperationSetDTMFJabberImpl operationSetDTMF=new OperationSetDTMFJabberImpl(this);
      addSupportedOperationSet(OperationSetDTMF.class,operationSetDTMF);
      addSupportedOperationSet(OperationSetIncomingDTMF.class,new OperationSetIncomingDTMFJabberImpl());
      addJingleFeatures();
      boolean isDesktopStreamingDisabled=JabberActivator.getConfigurationService().getBoolean(IS_DESKTOP_STREAMING_DISABLED,false);
      boolean isAccountDesktopStreamingDisabled=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_DESKTOP_STREAMING_DISABLED,false);
      if (!isDesktopStreamingDisabled && !isAccountDesktopStreamingDisabled) {
        addSupportedOperationSet(OperationSetDesktopStreaming.class,new OperationSetDesktopStreamingJabberImpl(basicTelephony));
        if (!accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_DESKTOP_REMOTE_CONTROL_DISABLED,false)) {
          addSupportedOperationSet(OperationSetDesktopSharingServer.class,new OperationSetDesktopSharingServerJabberImpl(basicTelephony));
          supportedFeatures.add(InputEvtIQ.NAMESPACE_SERVER);
          addSupportedOperationSet(OperationSetDesktopSharingClient.class,new OperationSetDesktopSharingClientJabberImpl(this));
          supportedFeatures.add(InputEvtIQ.NAMESPACE_CLIENT);
        }
      }
    }
    opsetContactCapabilities=new OperationSetContactCapabilitiesJabberImpl(this);
    if (discoveryManager != null)     opsetContactCapabilities.setDiscoveryManager(discoveryManager);
    addSupportedOperationSet(OperationSetContactCapabilities.class,opsetContactCapabilities);
    addSupportedOperationSet(OperationSetGenericNotifications.class,new OperationSetGenericNotificationsJabberImpl(this));
    supportedFeatures.add("jabber:iq:version");
    if (versionManager == null)     versionManager=new VersionManager(this);
    supportedFeatures.add(MessageCorrectionExtension.NAMESPACE);
    addSupportedOperationSet(OperationSetMessageCorrection.class,basicInstantMessaging);
    OperationSetChangePassword opsetChangePassword=new OperationSetChangePasswordJabberImpl(this);
    addSupportedOperationSet(OperationSetChangePassword.class,opsetChangePassword);
    OperationSetCusaxUtils opsetCusaxCusaxUtils=new OperationSetCusaxUtilsJabberImpl(this);
    addSupportedOperationSet(OperationSetCusaxUtils.class,opsetCusaxCusaxUtils);
    boolean isUserSearchEnabled=accountID.getAccountPropertyBoolean(IS_USER_SEARCH_ENABLED_PROPERTY,false);
    if (isUserSearchEnabled) {
      addSupportedOperationSet(OperationSetUserSearch.class,new OperationSetUserSearchJabberImpl(this));
    }
    OperationSetTLS opsetTLS=new OperationSetTLSJabberImpl(this);
    addSupportedOperationSet(OperationSetTLS.class,opsetTLS);
    OperationSetConnectionInfo opsetConnectionInfo=new OperationSetConnectionInfoJabberImpl();
    addSupportedOperationSet(OperationSetConnectionInfo.class,opsetConnectionInfo);
    isInitialized=true;
  }
}
