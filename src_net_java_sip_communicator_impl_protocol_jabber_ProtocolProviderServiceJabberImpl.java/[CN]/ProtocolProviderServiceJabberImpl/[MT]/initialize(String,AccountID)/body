{
synchronized (initializationLock) {
    this.accountID=accountID;
    supportedFeatures.clear();
    this.clearRegistrationStateChangeListener();
    String protocolIconPath=accountID.getAccountPropertyString(ProtocolProviderFactory.PROTOCOL_ICON_PATH);
    if (protocolIconPath == null)     protocolIconPath="resources/images/protocol/jabber";
    jabberIcon=new ProtocolIconJabberImpl(protocolIconPath);
    jabberStatusEnum=JabberStatusEnum.getJabberStatusEnum(protocolIconPath);
    supportedFeatures.add("http://jabber.org/protocol/disco#info");
    String keepAliveStrValue=accountID.getAccountPropertyString("SEND_KEEP_ALIVE");
    String resourcePriority=accountID.getAccountPropertyString(ProtocolProviderFactory.RESOURCE_PRIORITY);
    OperationSetPersistentPresenceJabberImpl persistentPresence=new OperationSetPersistentPresenceJabberImpl(this);
    if (resourcePriority != null) {
      persistentPresence.setResourcePriority(Integer.parseInt(resourcePriority));
      supportedFeatures.add("http://www.xmpp.org/extensions/xep-0168.html#ns");
    }
    addSupportedOperationSet(OperationSetPersistentPresence.class,persistentPresence);
    addSupportedOperationSet(OperationSetPresence.class,persistentPresence);
    OperationSetBasicInstantMessagingJabberImpl basicInstantMessaging=new OperationSetBasicInstantMessagingJabberImpl(this);
    if (keepAliveStrValue != null)     basicInstantMessaging.setKeepAliveEnabled(Boolean.parseBoolean(keepAliveStrValue));
    addSupportedOperationSet(OperationSetBasicInstantMessaging.class,basicInstantMessaging);
    addSupportedOperationSet(OperationSetWhiteboarding.class,new OperationSetWhiteboardingJabberImpl(this));
    addSupportedOperationSet(OperationSetTypingNotifications.class,new OperationSetTypingNotificationsJabberImpl(this));
    addSupportedOperationSet(OperationSetMultiUserChat.class,new OperationSetMultiUserChatJabberImpl(this));
    InfoRetreiver infoRetreiver=new InfoRetreiver(this,screenname);
    addSupportedOperationSet(OperationSetServerStoredContactInfo.class,new OperationSetServerStoredContactInfoJabberImpl(infoRetreiver));
    OperationSetServerStoredAccountInfo accountInfo=new OperationSetServerStoredAccountInfoJabberImpl(this,infoRetreiver,screenname);
    addSupportedOperationSet(OperationSetServerStoredAccountInfo.class,accountInfo);
    addSupportedOperationSet(OperationSetAvatar.class,new OperationSetAvatarJabberImpl(this,accountInfo));
    addSupportedOperationSet(OperationSetFileTransfer.class,new OperationSetFileTransferJabberImpl(this));
    addSupportedOperationSet(OperationSetInstantMessageTransform.class,new OperationSetInstantMessageTransformImpl());
    supportedFeatures.add("urn:xmpp:thumbs:0");
    supportedFeatures.add("urn:xmpp:bob");
    addSupportedOperationSet(OperationSetThumbnailedFileFactory.class,new OperationSetThumbnailedFileFactoryImpl());
    supportedFeatures.add("http://jabber.org/protocol/muc#rooms");
    supportedFeatures.add("http://jabber.org/protocol/muc#traffic");
    supportedFeatures.add(URN_XMPP_JINGLE_RTP_HDREXT);
    ProviderManager providerManager=ProviderManager.getInstance();
    providerManager.addIQProvider(JingleIQ.ELEMENT_NAME,JingleIQ.NAMESPACE,new JingleIQProvider());
    providerManager.addIQProvider(InputEvtIQ.ELEMENT_NAME,InputEvtIQ.NAMESPACE,new InputEvtIQProvider());
    providerManager.addIQProvider(CoinIQ.ELEMENT_NAME,CoinIQ.NAMESPACE,new CoinIQProvider());
    supportedFeatures.add(URN_XMPP_JINGLE_COIN);
    providerManager.addIQProvider(SessionIQ.ELEMENT_NAME,SessionIQ.NAMESPACE,new SessionIQProvider());
    providerManager.addIQProvider(JingleInfoQueryIQ.ELEMENT_NAME,JingleInfoQueryIQ.NAMESPACE,new JingleInfoQueryIQProvider());
    boolean isCallingDisabled=JabberActivator.getConfigurationService().getBoolean(IS_CALLING_DISABLED,false);
    boolean isCallingDisabledForAccount=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT,false);
    if (!isCallingDisabled && !isCallingDisabledForAccount) {
      OperationSetBasicTelephonyJabberImpl basicTelephony=new OperationSetBasicTelephonyJabberImpl(this);
      addSupportedOperationSet(OperationSetAdvancedTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetBasicTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetSecureZrtpTelephony.class,basicTelephony);
      addSupportedOperationSet(OperationSetVideoTelephony.class,new OperationSetVideoTelephonyJabberImpl(basicTelephony));
      addSupportedOperationSet(OperationSetTelephonyConferencing.class,new OperationSetTelephonyConferencingJabberImpl(this));
      addJingleFeatures();
      boolean isDesktopStreamingDisabled=JabberActivator.getConfigurationService().getBoolean(IS_DESKTOP_STREAMING_DISABLED,false);
      boolean isAccountDesktopStreamingDisabled=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_DESKTOP_STREAMING_DISABLED,false);
      if (!isDesktopStreamingDisabled && !isAccountDesktopStreamingDisabled) {
        addSupportedOperationSet(OperationSetDesktopStreaming.class,new OperationSetDesktopStreamingJabberImpl(basicTelephony));
        addSupportedOperationSet(OperationSetDesktopSharingServer.class,new OperationSetDesktopSharingServerJabberImpl(basicTelephony));
        addSupportedOperationSet(OperationSetDesktopSharingClient.class,new OperationSetDesktopSharingClientJabberImpl(this));
        supportedFeatures.add(InputEvtIQ.NAMESPACE);
      }
    }
    opsetContactCapabilities=new OperationSetContactCapabilitiesJabberImpl(this);
    if (discoveryManager != null)     opsetContactCapabilities.setDiscoveryManager(discoveryManager);
    addSupportedOperationSet(OperationSetContactCapabilities.class,opsetContactCapabilities);
    addSupportedOperationSet(OperationSetGenericNotifications.class,new OperationSetGenericNotificationsJabberImpl(this));
    SmackConfiguration.setPacketReplyTimeout(45000);
    isInitialized=true;
  }
}
