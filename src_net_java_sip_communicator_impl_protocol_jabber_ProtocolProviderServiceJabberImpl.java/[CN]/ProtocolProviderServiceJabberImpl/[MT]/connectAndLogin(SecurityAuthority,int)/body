{
synchronized (connectAndLoginLock) {
    inConnectAndLogin=true;
  }
synchronized (initializationLock) {
    String password=JabberActivator.getProtocolProviderFactory().loadPassword(getAccountID());
    if (password == null) {
      UserCredentials credentials=new UserCredentials();
      credentials.setUserName(getAccountID().getUserID());
      credentials=authority.obtainCredentials(ProtocolNames.JABBER,credentials,reasonCode);
      if (credentials == null) {
        fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST,"");
        return;
      }
      char[] pass=credentials.getPassword();
      if (pass == null) {
        fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST,"");
        return;
      }
      password=new String(pass);
      if (credentials.isPasswordPersistent()) {
        JabberActivator.getProtocolProviderFactory().storePassword(getAccountID(),password);
      }
    }
    try {
      String userID=null;
      if (getAccountID().getProtocolDisplayName().equals("Google Talk")) {
        userID=getAccountID().getUserID();
      }
 else {
        userID=StringUtils.parseName(getAccountID().getUserID());
      }
      String serviceName=StringUtils.parseServer(getAccountID().getUserID());
      List<String> serverAddresses=new ArrayList<String>();
      String serverAddressUserSetting=getAccountID().getAccountPropertyString(ProtocolProviderFactory.SERVER_ADDRESS);
      int serverPort=getAccountID().getAccountPropertyInt(ProtocolProviderFactory.SERVER_PORT,5222);
      if (resource == null) {
        String defaultResource="jitsi";
        String autoGenenerateResource=getAccountID().getAccountPropertyString(ProtocolProviderFactory.AUTO_GENERATE_RESOURCE);
        if (autoGenenerateResource == null || Boolean.parseBoolean(autoGenenerateResource)) {
          SecureRandom random=new SecureRandom();
          resource=defaultResource + "-" + new BigInteger(32,random).toString(32);
        }
 else {
          resource=getAccountID().getAccountPropertyString(ProtocolProviderFactory.RESOURCE);
          if (resource == null || resource.length() == 0)           resource=defaultResource;
        }
      }
      try {
        SRVRecord srvRecords[]=NetworkUtils.getSRVRecords("xmpp-client","tcp",serviceName);
        if (srvRecords != null) {
          for (int i=0; i < srvRecords.length; i++) {
            serverAddresses.add(srvRecords[i].getTarget());
          }
        }
        InetSocketAddress addressObj4=null;
        InetSocketAddress addressObj6=null;
        try {
          addressObj4=NetworkUtils.getARecord(serverAddressUserSetting,serverPort);
        }
 catch (        ParseException ex) {
          logger.error("Cannot obtain A record for " + serverAddressUserSetting,ex);
        }
        try {
          addressObj6=NetworkUtils.getAAAARecord(serverAddressUserSetting,serverPort);
        }
 catch (        ParseException ex) {
          logger.error("Cannot obtain AAAA record for " + serverAddressUserSetting,ex);
        }
        if (Boolean.getBoolean("java.net.preferIPv6Addresses")) {
          if (addressObj6 != null) {
            serverAddresses.add(addressObj6.getAddress().getHostAddress());
          }
          if (addressObj4 != null) {
            serverAddresses.add(addressObj4.getAddress().getHostAddress());
          }
        }
 else {
          if (addressObj4 != null) {
            serverAddresses.add(addressObj4.getAddress().getHostAddress());
          }
          if (addressObj6 != null) {
            serverAddresses.add(addressObj6.getAddress().getHostAddress());
          }
        }
        serverAddresses.add(serverAddressUserSetting);
      }
 catch (      ParseException ex1) {
        logger.error("Domain not resolved " + ex1.getMessage());
      }
      Roster.setDefaultSubscriptionMode(Roster.SubscriptionMode.manual);
      proxy=null;
      String globalProxyType=JabberActivator.getConfigurationService().getString(ProxyInfo.CONNECTON_PROXY_TYPE_PROPERTY_NAME);
      if (globalProxyType == null || globalProxyType.equals(ProxyInfo.ProxyType.NONE.name())) {
        proxy=org.jivesoftware.smack.proxy.ProxyInfo.forNoProxy();
      }
 else {
        String globalProxyAddress=JabberActivator.getConfigurationService().getString(ProxyInfo.CONNECTON_PROXY_ADDRESS_PROPERTY_NAME);
        String globalProxyPortStr=JabberActivator.getConfigurationService().getString(ProxyInfo.CONNECTON_PROXY_PORT_PROPERTY_NAME);
        int globalProxyPort;
        try {
          globalProxyPort=Integer.parseInt(globalProxyPortStr);
        }
 catch (        NumberFormatException ex) {
          throw new OperationFailedException("Wrong proxy port, " + globalProxyPortStr + " does not represent an integer",OperationFailedException.INVALID_ACCOUNT_PROPERTIES,ex);
        }
        String globalProxyUsername=JabberActivator.getConfigurationService().getString(ProxyInfo.CONNECTON_PROXY_USERNAME_PROPERTY_NAME);
        String globalProxyPassword=JabberActivator.getConfigurationService().getString(ProxyInfo.CONNECTON_PROXY_PASSWORD_PROPERTY_NAME);
        if (globalProxyAddress == null || globalProxyAddress.length() <= 0) {
          throw new OperationFailedException("Missing Proxy Address",OperationFailedException.INVALID_ACCOUNT_PROPERTIES);
        }
        if (globalProxyType.equals(ProxyInfo.ProxyType.HTTP.name())) {
          proxy=org.jivesoftware.smack.proxy.ProxyInfo.forHttpProxy(globalProxyAddress,globalProxyPort,globalProxyUsername,globalProxyPassword);
        }
 else         if (globalProxyType.equals(ProxyInfo.ProxyType.SOCKS4.name())) {
          proxy=org.jivesoftware.smack.proxy.ProxyInfo.forSocks4Proxy(globalProxyAddress,globalProxyPort,globalProxyUsername,globalProxyPassword);
        }
 else         if (globalProxyType.equals(ProxyInfo.ProxyType.SOCKS5.name())) {
          proxy=org.jivesoftware.smack.proxy.ProxyInfo.forSocks5Proxy(globalProxyAddress,globalProxyPort,globalProxyUsername,globalProxyPassword);
        }
      }
      for (int i=0; i < serverAddresses.size(); i++) {
        String currentAddress=serverAddresses.get(i);
        try {
          ConnectState state=connectAndLogin(currentAddress,serverPort,serviceName,userID,password,resource);
          if (state == ConnectState.ABORT_CONNECTING)           return;
 else           if (state == ConnectState.CONTINUE_TRYING)           continue;
 else           if (state == ConnectState.STOP_TRYING)           break;
        }
 catch (        XMPPException ex) {
          disconnectAndCleanConnection();
          try {
            ConnectState state=connectAndLogin(currentAddress,serverPort,serviceName,userID + "@" + serviceName,password,resource);
            if (state == ConnectState.ABORT_CONNECTING)             return;
 else             if (state == ConnectState.CONTINUE_TRYING)             continue;
 else             if (state == ConnectState.STOP_TRYING)             break;
          }
 catch (          XMPPException e) {
            if (isAuthenticationFailed(ex))             throw ex;
            disconnectAndCleanConnection();
            if (i == serverAddresses.size() - 1) {
              throw ex;
            }
          }
        }
      }
    }
 catch (    NumberFormatException ex) {
      throw new OperationFailedException("Wrong port",OperationFailedException.INVALID_ACCOUNT_PROPERTIES,ex);
    }
  }
synchronized (connectAndLoginLock) {
    if (eventDuringLogin != null) {
      fireRegistrationStateChanged(eventDuringLogin.getOldState(),eventDuringLogin.getNewState(),eventDuringLogin.getReasonCode(),eventDuringLogin.getReason());
      eventDuringLogin=null;
      inConnectAndLogin=false;
      return;
    }
    inConnectAndLogin=false;
  }
}
