{
  ConnectionConfiguration confConn=new ConnectionConfiguration(address.getAddress().getHostAddress(),address.getPort(),serviceName,proxy);
  confConn.setReconnectionAllowed(false);
  boolean tlsRequired=loginStrategy.isTlsRequired();
  confConn.setSecurityMode(tlsRequired ? ConnectionConfiguration.SecurityMode.required : ConnectionConfiguration.SecurityMode.enabled);
  if (connection != null) {
    logger.error("Connection is not null and isConnected:" + connection.isConnected(),new Exception("Trace possible duplicate connections: " + getAccountID().getAccountAddress()));
    disconnectAndCleanConnection();
  }
  connection=new XMPPConnection(confConn);
  try {
    CertificateService cvs=getCertificateVerificationService();
    if (cvs != null) {
      SSLContext sslContext=loginStrategy.createSslContext(cvs,getTrustManager(cvs,serviceName));
      if (logger.isDebugEnabled()) {
        final StringBuilder buff=new StringBuilder();
        buff.append("Available TLS protocols and algorithms:\n");
        buff.append("Default protocols: ");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getProtocols()));
        buff.append("\n");
        buff.append("Supported protocols: ");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getProtocols()));
        buff.append("\n");
        buff.append("Default cipher suites: ");
        buff.append(Arrays.toString(sslContext.getDefaultSSLParameters().getCipherSuites()));
        buff.append("\n");
        buff.append("Supported cipher suites: ");
        buff.append(Arrays.toString(sslContext.getSupportedSSLParameters().getCipherSuites()));
        logger.debug(buff.toString());
      }
      connection.setCustomSslContext(sslContext);
    }
 else     if (tlsRequired)     throw new XMPPException("Certificate verification service is " + "unavailable and TLS is required");
  }
 catch (  GeneralSecurityException e) {
    logger.error("Error creating custom trust manager",e);
    throw new XMPPException("Error creating custom trust manager",e);
  }
  if (debugger == null)   debugger=new SmackPacketDebugger();
  debugger.setConnection(connection);
  connection.addPacketListener(debugger,null);
  connection.addPacketInterceptor(debugger,null);
  connection.connect();
  setTrafficClass();
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  registerServiceDiscoveryManager();
  if (connectionListener == null) {
    connectionListener=new JabberConnectionListener();
  }
  if (!connection.isSecureConnection() && tlsRequired) {
    throw new XMPPException("TLS is required by client");
  }
  if (!connection.isConnected()) {
    disconnectAndCleanConnection();
    logger.error("Connection not established, server not found!");
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,null);
    return ConnectState.ABORT_CONNECTING;
  }
 else {
    if (connection.getSocket() instanceof SSLSocket) {
      final SSLSocket sslSocket=(SSLSocket)connection.getSocket();
      StringBuilder buff=new StringBuilder();
      buff.append("Chosen TLS protocol and algorithm:\n").append("Protocol: ").append(sslSocket.getSession().getProtocol()).append("\n").append("Cipher suite: ").append(sslSocket.getSession().getCipherSuite());
      logger.info(buff.toString());
      if (logger.isDebugEnabled()) {
        buff=new StringBuilder();
        buff.append("Server TLS certificate chain:\n");
        try {
          buff.append(Arrays.toString(sslSocket.getSession().getPeerCertificates()));
        }
 catch (        SSLPeerUnverifiedException ex) {
          buff.append("<unavailable: ").append(ex.getLocalizedMessage()).append(">");
        }
        logger.debug(buff.toString());
      }
    }
    connection.addConnectionListener(connectionListener);
  }
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERING,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
  if (!loginStrategy.login(connection,userName,resource)) {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,loginStrategy.getClass().getName() + " requests abort");
    return ConnectState.ABORT_CONNECTING;
  }
  if (connection.isAuthenticated()) {
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.STOP_TRYING;
  }
 else {
    disconnectAndCleanConnection();
    eventDuringLogin=null;
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.CONTINUE_TRYING;
  }
}
