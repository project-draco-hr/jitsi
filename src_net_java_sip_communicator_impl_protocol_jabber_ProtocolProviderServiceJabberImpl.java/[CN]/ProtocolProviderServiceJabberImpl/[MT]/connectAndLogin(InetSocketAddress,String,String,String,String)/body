{
  ConnectionConfiguration confConn=new ConnectionConfiguration(address.getAddress().getHostAddress(),address.getPort(),serviceName,proxy);
  confConn.setReconnectionAllowed(false);
  boolean tlsRequired=!accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_ALLOW_NON_SECURE,false);
  confConn.setSecurityMode(tlsRequired ? ConnectionConfiguration.SecurityMode.required : ConnectionConfiguration.SecurityMode.enabled);
  if (connection != null) {
    logger.error("Connection is not null and isConnected:" + connection.isConnected(),new Exception("Trace possible duplicate connections: " + getAccountID().getAccountAddress()));
    disconnectAndCleanConnection();
  }
  connection=new XMPPConnection(confConn);
  try {
    CertificateService cvs=getCertificateVerificationService();
    if (cvs != null) {
      connection.setCustomTrustManager(new HostTrustManager(cvs.getTrustManager(Arrays.asList(new String[]{serviceName,"_xmpp-client." + serviceName}))));
    }
 else     if (tlsRequired)     throw new XMPPException("Certificate verification service is " + "unavailable and TLS is required");
  }
 catch (  GeneralSecurityException e) {
    logger.error("Error creating custom trust manager",e);
    throw new XMPPException("Error creating custom trust manager",e);
  }
  if (debugger == null)   debugger=new SmackPacketDebugger();
  debugger.setConnection(connection);
  connection.addPacketListener(debugger,null);
  connection.addPacketInterceptor(debugger,null);
  connection.connect();
  setTrafficClass();
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  registerServiceDiscoveryManager();
  if (connectionListener == null) {
    connectionListener=new JabberConnectionListener();
  }
  if (!connection.isSecureConnection() && tlsRequired) {
    throw new XMPPException("TLS is required by client");
  }
  if (!connection.isConnected()) {
    disconnectAndCleanConnection();
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_SERVER_NOT_FOUND,null);
    return ConnectState.ABORT_CONNECTING;
  }
 else {
    connection.addConnectionListener(connectionListener);
  }
  if (abortConnecting) {
    abortConnecting=false;
    disconnectAndCleanConnection();
    return ConnectState.ABORT_CONNECTING;
  }
  fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERING,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
  SASLAuthentication.supportSASLMechanism("PLAIN",0);
  SASLAuthentication.unregisterSASLMechanism("DIGEST-MD5");
  SASLAuthentication.registerSASLMechanism("DIGEST-MD5",SASLDigestMD5Mechanism.class);
  SASLAuthentication.supportSASLMechanism("DIGEST-MD5");
  connection.login(userName,password,resource);
  if (connection.isAuthenticated()) {
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.REGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    OperationSetPersistentPresenceJabberImpl opSet=(OperationSetPersistentPresenceJabberImpl)this.getOperationSet(OperationSetPersistentPresence.class);
    try {
      opSet.publishPresenceStatus(getJabberStatusEnum().getStatus(JabberStatusEnum.AVAILABLE),"");
    }
 catch (    Exception e) {
      logger.error("Failed to publish presence status");
    }
    return ConnectState.STOP_TRYING;
  }
 else {
    disconnectAndCleanConnection();
    fireRegistrationStateChanged(getRegistrationState(),RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_NOT_SPECIFIED,null);
    return ConnectState.CONTINUE_TRYING;
  }
}
