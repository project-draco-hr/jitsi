{
  float[] data=new float[ilbc_constants.BLOCKL_MAX];
  float[] lsfdeq=new float[ilbc_constants.LPC_FILTERORDER * ilbc_constants.LPC_N_MAX];
  float[] PLCresidual=new float[ilbc_constants.BLOCKL_MAX];
  float[] PLClpc=new float[ilbc_constants.LPC_FILTERORDER + 1];
  float[] zeros=new float[ilbc_constants.BLOCKL_MAX];
  float[] one=new float[ilbc_constants.LPC_FILTERORDER + 1];
  int k, i, start, idxForMax, pos, lastpart, ulp;
  int lag, ilag;
  float cc, maxcc;
  int[] idxVec=new int[ilbc_constants.STATE_LEN];
  int check;
  int[] gain_index=new int[ilbc_constants.NASUB_MAX * ilbc_constants.CB_NSTAGES];
  int[] extra_gain_index=new int[ilbc_constants.CB_NSTAGES];
  int[] cb_index=new int[ilbc_constants.CB_NSTAGES * ilbc_constants.NASUB_MAX];
  int[] extra_cb_index=new int[ilbc_constants.CB_NSTAGES];
  int[] lsf_i=new int[ilbc_constants.LSF_NSPLIT * ilbc_constants.LPC_N_MAX];
  int state_first;
  int last_bit;
  float[] weightdenum=new float[(ilbc_constants.LPC_FILTERORDER + 1) * ilbc_constants.NSUB_MAX];
  int order_plus_one;
  float[] syntdenum=new float[ilbc_constants.NSUB_MAX * (ilbc_constants.LPC_FILTERORDER + 1)];
  float[] decresidual=new float[ilbc_constants.BLOCKL_MAX];
  if (mode > 0) {
    pos=0;
    for (k=0; k < ilbc_constants.LSF_NSPLIT * ilbc_constants.LPC_N_MAX; k++) {
      lsf_i[k]=0;
    }
    start=0;
    state_first=0;
    idxForMax=0;
    for (k=0; k < this.ULP_inst.state_short_len; k++) {
      idxVec[k]=0;
    }
    for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
      extra_cb_index[k]=0;
    }
    for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
      extra_gain_index[k]=0;
    }
    for (i=0; i < this.ULP_inst.nasub; i++) {
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        cb_index[i * ilbc_constants.CB_NSTAGES + k]=0;
      }
    }
    for (i=0; i < this.ULP_inst.nasub; i++) {
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        gain_index[i * ilbc_constants.CB_NSTAGES + k]=0;
      }
    }
    for (ulp=0; ulp < 3; ulp++) {
      for (k=0; k < ilbc_constants.LSF_NSPLIT * this.ULP_inst.lpc_n; k++) {
        lastpart=bytes.unpack(this.ULP_inst.lsf_bits[k][ulp]);
        lsf_i[k]=bytes.packcombine(lsf_i[k],lastpart,this.ULP_inst.lsf_bits[k][ulp]);
      }
      lastpart=bytes.unpack(this.ULP_inst.start_bits[ulp]);
      start=bytes.packcombine(start,lastpart,this.ULP_inst.start_bits[ulp]);
      lastpart=bytes.unpack(this.ULP_inst.startfirst_bits[ulp]);
      state_first=bytes.packcombine(state_first,lastpart,this.ULP_inst.startfirst_bits[ulp]);
      lastpart=bytes.unpack(this.ULP_inst.scale_bits[ulp]);
      idxForMax=bytes.packcombine(idxForMax,lastpart,this.ULP_inst.scale_bits[ulp]);
      for (k=0; k < this.ULP_inst.state_short_len; k++) {
        lastpart=bytes.unpack(this.ULP_inst.state_bits[ulp]);
        idxVec[k]=bytes.packcombine(idxVec[k],lastpart,this.ULP_inst.state_bits[ulp]);
      }
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        lastpart=bytes.unpack(this.ULP_inst.extra_cb_index[k][ulp]);
        extra_cb_index[k]=bytes.packcombine(extra_cb_index[k],lastpart,this.ULP_inst.extra_cb_index[k][ulp]);
      }
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        lastpart=bytes.unpack(this.ULP_inst.extra_cb_gain[k][ulp]);
        extra_gain_index[k]=bytes.packcombine(extra_gain_index[k],lastpart,this.ULP_inst.extra_cb_gain[k][ulp]);
      }
      for (i=0; i < this.ULP_inst.nasub; i++) {
        for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
          lastpart=bytes.unpack(this.ULP_inst.cb_index[i][k][ulp]);
          cb_index[i * ilbc_constants.CB_NSTAGES + k]=bytes.packcombine(cb_index[i * ilbc_constants.CB_NSTAGES + k],lastpart,this.ULP_inst.cb_index[i][k][ulp]);
        }
      }
      for (i=0; i < this.ULP_inst.nasub; i++) {
        for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
          lastpart=bytes.unpack(this.ULP_inst.cb_gain[i][k][ulp]);
          gain_index[i * ilbc_constants.CB_NSTAGES + k]=bytes.packcombine(gain_index[i * ilbc_constants.CB_NSTAGES + k],lastpart,this.ULP_inst.cb_gain[i][k][ulp]);
        }
      }
    }
    last_bit=bytes.unpack(1);
    if (start < 1)     mode=0;
    if (this.ULP_inst.mode == 20 && start > 3)     mode=0;
    if (this.ULP_inst.mode == 30 && start > 5)     mode=0;
    if (last_bit == 1)     mode=0;
    if (mode == 1) {
      index_conv_dec(cb_index);
      SimplelsfDEQ(lsfdeq,lsf_i,this.ULP_inst.lpc_n);
      check=ilbc_common.LSF_check(lsfdeq,ilbc_constants.LPC_FILTERORDER,this.ULP_inst.lpc_n);
      DecoderInterpolateLSF(syntdenum,weightdenum,lsfdeq,ilbc_constants.LPC_FILTERORDER);
      Decode(decresidual,start,idxForMax,idxVec,syntdenum,cb_index,gain_index,extra_cb_index,extra_gain_index,state_first);
      doThePLC(PLCresidual,PLClpc,0,decresidual,syntdenum,(ilbc_constants.LPC_FILTERORDER + 1) * (this.ULP_inst.nsub - 1),last_lag);
      System.arraycopy(PLCresidual,0,decresidual,0,this.ULP_inst.blockl);
    }
  }
  if (mode == 0) {
    for (int li=0; li < ilbc_constants.BLOCKL_MAX; li++)     zeros[li]=0.0f;
    one[0]=1;
    for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)     one[li + 1]=0.0f;
    start=0;
    doThePLC(PLCresidual,PLClpc,1,zeros,one,0,last_lag);
    System.arraycopy(PLCresidual,0,decresidual,0,this.ULP_inst.blockl);
    order_plus_one=ilbc_constants.LPC_FILTERORDER + 1;
    for (i=0; i < this.ULP_inst.nsub; i++) {
      System.arraycopy(PLClpc,0,syntdenum,(i * order_plus_one),order_plus_one);
    }
  }
  if (this.use_enhancer == 1) {
    this.last_lag=enhancerInterface(data,decresidual);
    if (this.ULP_inst.mode == 20) {
      i=0;
      syntFilter(data,i * ilbc_constants.SUBL,this.old_syntdenum,(i + this.ULP_inst.nsub - 1) * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,this.syntMem);
      for (i=1; i < this.ULP_inst.nsub; i++) {
        syntFilter(data,i * ilbc_constants.SUBL,syntdenum,(i - 1) * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,this.syntMem);
      }
    }
 else     if (this.ULP_inst.mode == 30) {
      for (i=0; i < 2; i++) {
        syntFilter(data,i * ilbc_constants.SUBL,this.old_syntdenum,(i + this.ULP_inst.nsub - 2) * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,this.syntMem);
      }
      for (i=2; i < this.ULP_inst.nsub; i++) {
        syntFilter(data,i * ilbc_constants.SUBL,syntdenum,(i - 2) * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,this.syntMem);
      }
    }
  }
 else {
    lag=20;
    maxcc=xCorrCoef(decresidual,ilbc_constants.BLOCKL_MAX - ilbc_constants.ENH_BLOCKL,decresidual,ilbc_constants.BLOCKL_MAX - ilbc_constants.ENH_BLOCKL - lag,ilbc_constants.ENH_BLOCKL);
    for (ilag=21; ilag < 120; ilag++) {
      cc=xCorrCoef(decresidual,ilbc_constants.BLOCKL_MAX - ilbc_constants.ENH_BLOCKL,decresidual,ilbc_constants.BLOCKL_MAX - ilbc_constants.ENH_BLOCKL - ilag,ilbc_constants.ENH_BLOCKL);
      if (cc > maxcc) {
        maxcc=cc;
        lag=ilag;
      }
    }
    this.last_lag=lag;
    System.arraycopy(decresidual,0,data,0,this.ULP_inst.blockl);
    for (i=0; i < this.ULP_inst.nsub; i++) {
      syntFilter(data,i * ilbc_constants.SUBL,syntdenum,i * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,this.syntMem);
    }
  }
  hpOutput(data,this.ULP_inst.blockl,decblock,this.hpomem);
  System.arraycopy(syntdenum,0,this.old_syntdenum,0,this.ULP_inst.nsub * (ilbc_constants.LPC_FILTERORDER + 1));
  this.prev_enh_pl=0;
  if (mode == 0) {
    this.prev_enh_pl=1;
  }
}
