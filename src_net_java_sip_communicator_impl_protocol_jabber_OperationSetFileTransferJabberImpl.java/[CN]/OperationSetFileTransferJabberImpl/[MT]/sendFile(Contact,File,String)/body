{
  OutgoingFileTransferJabberImpl outgoingTransfer=null;
  try {
    assertConnected();
    if (file.length() > getMaximumFileLength())     throw new IllegalArgumentException("File length exceeds the allowed one for this protocol");
    String fullJid=null;
    if (jabberProvider.getOperationSet(OperationSetMultiUserChat.class).isPrivateMessagingContact(toContact.getAddress())) {
      fullJid=toContact.getAddress();
    }
 else {
      Iterator<Presence> iter=jabberProvider.getConnection().getRoster().getPresences(toContact.getAddress());
      int bestPriority=-1;
      PresenceStatus jabberStatus=null;
      while (iter.hasNext()) {
        Presence presence=iter.next();
        if (jabberProvider.isFeatureListSupported(presence.getFrom(),new String[]{"http://jabber.org/protocol/si","http://jabber.org/protocol/si/profile/file-transfer"})) {
          int priority=(presence.getPriority() == Integer.MIN_VALUE) ? 0 : presence.getPriority();
          if (priority > bestPriority) {
            bestPriority=priority;
            fullJid=presence.getFrom();
            jabberStatus=OperationSetPersistentPresenceJabberImpl.jabberStatusToPresenceStatus(presence,jabberProvider);
          }
 else           if (priority == bestPriority && jabberStatus != null) {
            PresenceStatus tempStatus=OperationSetPersistentPresenceJabberImpl.jabberStatusToPresenceStatus(presence,jabberProvider);
            if (tempStatus.compareTo(jabberStatus) > 0) {
              fullJid=presence.getFrom();
              jabberStatus=tempStatus;
            }
          }
        }
      }
    }
    if (fullJid == null) {
      throw new OperationNotSupportedException("Contact client or server does not support file transfers.");
    }
    if (gw != null && !fullJid.contains("@") && !fullJid.endsWith(gw)) {
      fullJid=fullJid + "@" + gw;
    }
    OutgoingFileTransfer transfer=manager.createOutgoingFileTransfer(fullJid);
    outgoingTransfer=new OutgoingFileTransferJabberImpl(toContact,file,transfer,jabberProvider);
    FileTransferCreatedEvent event=new FileTransferCreatedEvent(outgoingTransfer,new Date());
    fireFileTransferCreated(event);
    transfer.sendFile(file,"Sending file");
    new FileTransferProgressThread(transfer,outgoingTransfer).start();
  }
 catch (  XMPPException e) {
    logger.error("Failed to send file.",e);
  }
  return outgoingTransfer;
}
