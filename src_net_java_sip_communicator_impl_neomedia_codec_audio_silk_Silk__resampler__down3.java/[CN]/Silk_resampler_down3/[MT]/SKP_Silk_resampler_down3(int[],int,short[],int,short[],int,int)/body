{
  int nSamplesIn, counter, res_Q6;
  int[] buf=new int[Silk_resampler_private.RESAMPLER_MAX_BATCH_SIZE_IN + ORDER_FIR];
  int buf_ptr;
  for (int i_djinn=0; i_djinn < ORDER_FIR; i_djinn++)   buf[i_djinn]=S[S_offset + i_djinn];
  while (true) {
    nSamplesIn=Math.min(inLen,Silk_resampler_private.RESAMPLER_MAX_BATCH_SIZE_IN);
    Silk_resampler_private_AR2.SKP_Silk_resampler_private_AR2(S,ORDER_FIR,buf,ORDER_FIR,in,in_offset,Silk_resampler_rom.SKP_Silk_Resampler_1_3_COEFS_LQ,0,nSamplesIn);
    buf_ptr=0;
    counter=nSamplesIn;
    while (counter > 2) {
      res_Q6=Silk_macros.SKP_SMULWB(buf[buf_ptr] + buf[buf_ptr + 5],Silk_resampler_rom.SKP_Silk_Resampler_1_3_COEFS_LQ[2]);
      res_Q6=Silk_macros.SKP_SMLAWB(res_Q6,buf[buf_ptr + 1] + buf[buf_ptr + 4],Silk_resampler_rom.SKP_Silk_Resampler_1_3_COEFS_LQ[3]);
      res_Q6=Silk_macros.SKP_SMLAWB(res_Q6,buf[buf_ptr + 2] + buf[buf_ptr + 3],Silk_resampler_rom.SKP_Silk_Resampler_1_3_COEFS_LQ[4]);
      out[out_offset++]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(res_Q6,6));
      buf_ptr+=3;
      counter-=3;
    }
    in_offset+=nSamplesIn;
    inLen-=nSamplesIn;
    if (inLen > 0) {
      for (int i_djinn=0; i_djinn < ORDER_FIR; i_djinn++)       buf[i_djinn]=buf[nSamplesIn + i_djinn];
    }
 else {
      break;
    }
  }
  for (int i_djinn=0; i_djinn < ORDER_FIR; i_djinn++)   S[S_offset + i_djinn]=buf[nSamplesIn + i_djinn];
}
