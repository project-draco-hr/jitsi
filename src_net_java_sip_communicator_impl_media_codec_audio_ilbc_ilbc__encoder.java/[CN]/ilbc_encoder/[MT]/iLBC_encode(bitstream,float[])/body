{
  int start;
  int[] idxForMax=new int[1];
  int n, k, meml_gotten, Nfor, Nback, i, pos;
  int pbytes;
  int diff, start_pos, state_first;
  float en1, en2;
  int index, ulp;
  int firstpart;
  int subcount, subframe;
  float[] data=new float[ilbc_constants.BLOCKL_MAX];
  float[] residual=new float[ilbc_constants.BLOCKL_MAX];
  float[] reverseResidual=new float[ilbc_constants.BLOCKL_MAX];
  int[] idxVec=new int[ilbc_constants.STATE_LEN];
  float[] reverseDecresidual=new float[ilbc_constants.BLOCKL_MAX];
  float[] mem=new float[ilbc_constants.CB_MEML];
  int[] gain_index=new int[ilbc_constants.CB_NSTAGES * ilbc_constants.NASUB_MAX];
  int[] extra_gain_index=new int[ilbc_constants.CB_NSTAGES];
  int[] cb_index=new int[ilbc_constants.CB_NSTAGES * ilbc_constants.NASUB_MAX];
  int[] extra_cb_index=new int[ilbc_constants.CB_NSTAGES];
  int[] lsf_i=new int[ilbc_constants.LSF_NSPLIT * ilbc_constants.LPC_N_MAX];
  float[] weightState=new float[ilbc_constants.LPC_FILTERORDER];
  float[] syntdenum=new float[ilbc_constants.NSUB_MAX * (ilbc_constants.LPC_FILTERORDER + 1)];
  float[] weightdenum=new float[ilbc_constants.NSUB_MAX * (ilbc_constants.LPC_FILTERORDER + 1)];
  float[] decresidual=new float[ilbc_constants.BLOCKL_MAX];
  bitpack pack;
  hpInput(block,this.ULP_inst.blockl,data,this.hpimem);
  LPCencode(syntdenum,weightdenum,lsf_i,data);
  for (n=0; n < this.ULP_inst.nsub; n++) {
    anaFilter(data,n * ilbc_constants.SUBL,syntdenum,n * (ilbc_constants.LPC_FILTERORDER + 1),ilbc_constants.SUBL,residual,n * ilbc_constants.SUBL,this.anaMem);
  }
  start=FrameClassify(residual);
  diff=ilbc_constants.STATE_LEN - this.ULP_inst.state_short_len;
  en1=0;
  index=(start - 1) * ilbc_constants.SUBL;
  for (i=0; i < this.ULP_inst.state_short_len; i++) {
    en1+=residual[index + i] * residual[index + i];
  }
  en2=0;
  index=(start - 1) * ilbc_constants.SUBL + diff;
  for (i=0; i < this.ULP_inst.state_short_len; i++) {
    en2+=residual[index + i] * residual[index + i];
  }
  if (en1 > en2) {
    state_first=1;
    start_pos=(start - 1) * ilbc_constants.SUBL;
  }
 else {
    state_first=0;
    start_pos=(start - 1) * ilbc_constants.SUBL + diff;
  }
  StateSearchW(residual,start_pos,syntdenum,(start - 1) * (ilbc_constants.LPC_FILTERORDER + 1),weightdenum,(start - 1) * (ilbc_constants.LPC_FILTERORDER + 1),idxForMax,idxVec,this.ULP_inst.state_short_len,state_first);
  ilbc_common.StateConstructW(idxForMax[0],idxVec,syntdenum,(start - 1) * (ilbc_constants.LPC_FILTERORDER + 1),decresidual,start_pos,this.ULP_inst.state_short_len);
  if (state_first != 0) {
    for (int li=0; li < ilbc_constants.CB_MEML - this.ULP_inst.state_short_len; li++)     mem[li]=0.0f;
    System.arraycopy(decresidual,start_pos,mem,ilbc_constants.CB_MEML - this.ULP_inst.state_short_len,this.ULP_inst.state_short_len);
    for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)     weightState[li]=0.0f;
    iCBSearch(extra_cb_index,0,extra_gain_index,0,residual,start_pos + this.ULP_inst.state_short_len,mem,ilbc_constants.CB_MEML - ilbc_constants.stMemLTbl,ilbc_constants.stMemLTbl,diff,ilbc_constants.CB_NSTAGES,weightdenum,start * (ilbc_constants.LPC_FILTERORDER + 1),weightState,0);
    ilbc_common.iCBConstruct(decresidual,start_pos + this.ULP_inst.state_short_len,extra_cb_index,0,extra_gain_index,0,mem,ilbc_constants.CB_MEML - ilbc_constants.stMemLTbl,ilbc_constants.stMemLTbl,diff,ilbc_constants.CB_NSTAGES);
  }
 else {
    for (k=0; k < diff; k++) {
      reverseResidual[k]=residual[(start + 1) * ilbc_constants.SUBL - 1 - (k + this.ULP_inst.state_short_len)];
    }
    meml_gotten=this.ULP_inst.state_short_len;
    for (k=0; k < meml_gotten; k++) {
      mem[ilbc_constants.CB_MEML - 1 - k]=decresidual[start_pos + k];
    }
    for (int li=0; li < (ilbc_constants.CB_MEML - k); li++)     mem[li]=0.0f;
    for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)     weightState[li]=0.0f;
    iCBSearch(extra_cb_index,0,extra_gain_index,0,reverseResidual,0,mem,ilbc_constants.CB_MEML - ilbc_constants.stMemLTbl,ilbc_constants.stMemLTbl,diff,ilbc_constants.CB_NSTAGES,weightdenum,(start - 1) * (ilbc_constants.LPC_FILTERORDER + 1),weightState,0);
    ilbc_common.iCBConstruct(reverseDecresidual,0,extra_cb_index,0,extra_gain_index,0,mem,ilbc_constants.CB_MEML - ilbc_constants.stMemLTbl,ilbc_constants.stMemLTbl,diff,ilbc_constants.CB_NSTAGES);
    for (k=0; k < diff; k++) {
      decresidual[start_pos - 1 - k]=reverseDecresidual[k];
    }
  }
  subcount=0;
  Nfor=this.ULP_inst.nsub - start - 1;
  if (Nfor > 0) {
    for (int li=0; li < (ilbc_constants.CB_MEML - ilbc_constants.STATE_LEN); li++)     mem[li]=0.0f;
    System.arraycopy(decresidual,(start - 1) * ilbc_constants.SUBL,mem,ilbc_constants.CB_MEML - ilbc_constants.STATE_LEN,ilbc_constants.STATE_LEN);
    for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)     weightState[li]=0.0f;
    for (subframe=0; subframe < Nfor; subframe++) {
      iCBSearch(cb_index,subcount * ilbc_constants.CB_NSTAGES,gain_index,subcount * ilbc_constants.CB_NSTAGES,residual,(start + 1 + subframe) * ilbc_constants.SUBL,mem,ilbc_constants.CB_MEML - ilbc_constants.memLfTbl[subcount],ilbc_constants.memLfTbl[subcount],ilbc_constants.SUBL,ilbc_constants.CB_NSTAGES,weightdenum,(start + 1 + subframe) * (ilbc_constants.LPC_FILTERORDER + 1),weightState,subcount + 1);
      ilbc_common.iCBConstruct(decresidual,(start + 1 + subframe) * ilbc_constants.SUBL,cb_index,subcount * ilbc_constants.CB_NSTAGES,gain_index,subcount * ilbc_constants.CB_NSTAGES,mem,ilbc_constants.CB_MEML - ilbc_constants.memLfTbl[subcount],ilbc_constants.memLfTbl[subcount],ilbc_constants.SUBL,ilbc_constants.CB_NSTAGES);
      System.arraycopy(mem,ilbc_constants.SUBL,mem,0,(ilbc_constants.CB_MEML - ilbc_constants.SUBL));
      System.arraycopy(decresidual,(start + 1 + subframe) * ilbc_constants.SUBL,mem,ilbc_constants.CB_MEML - ilbc_constants.SUBL,ilbc_constants.SUBL);
      for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)       weightState[li]=0.0f;
      subcount++;
    }
  }
  Nback=start - 1;
  if (Nback > 0) {
    for (n=0; n < Nback; n++) {
      for (k=0; k < ilbc_constants.SUBL; k++) {
        reverseResidual[n * ilbc_constants.SUBL + k]=residual[(start - 1) * ilbc_constants.SUBL - 1 - n * ilbc_constants.SUBL - k];
        reverseDecresidual[n * ilbc_constants.SUBL + k]=decresidual[(start - 1) * ilbc_constants.SUBL - 1 - n * ilbc_constants.SUBL - k];
      }
    }
    meml_gotten=ilbc_constants.SUBL * (this.ULP_inst.nsub + 1 - start);
    if (meml_gotten > ilbc_constants.CB_MEML) {
      meml_gotten=ilbc_constants.CB_MEML;
    }
    for (k=0; k < meml_gotten; k++) {
      mem[ilbc_constants.CB_MEML - 1 - k]=decresidual[(start - 1) * ilbc_constants.SUBL + k];
    }
    for (int li=0; li < (ilbc_constants.CB_MEML - k); li++)     mem[li]=0.0f;
    for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)     weightState[li]=0.0f;
    for (subframe=0; subframe < Nback; subframe++) {
      iCBSearch(cb_index,subcount * ilbc_constants.CB_NSTAGES,gain_index,subcount * ilbc_constants.CB_NSTAGES,reverseResidual,subframe * ilbc_constants.SUBL,mem,ilbc_constants.CB_MEML - ilbc_constants.memLfTbl[subcount],ilbc_constants.memLfTbl[subcount],ilbc_constants.SUBL,ilbc_constants.CB_NSTAGES,weightdenum,(start - 2 - subframe) * (ilbc_constants.LPC_FILTERORDER + 1),weightState,subcount + 1);
      ilbc_common.iCBConstruct(reverseDecresidual,subframe * ilbc_constants.SUBL,cb_index,subcount * ilbc_constants.CB_NSTAGES,gain_index,subcount * ilbc_constants.CB_NSTAGES,mem,ilbc_constants.CB_MEML - ilbc_constants.memLfTbl[subcount],ilbc_constants.memLfTbl[subcount],ilbc_constants.SUBL,ilbc_constants.CB_NSTAGES);
      System.arraycopy(mem,ilbc_constants.SUBL,mem,0,(ilbc_constants.CB_MEML - ilbc_constants.SUBL));
      System.arraycopy(reverseDecresidual,subframe * ilbc_constants.SUBL,mem,ilbc_constants.CB_MEML - ilbc_constants.SUBL,ilbc_constants.SUBL);
      for (int li=0; li < ilbc_constants.LPC_FILTERORDER; li++)       weightState[li]=0.0f;
      subcount++;
    }
    for (i=0; i < ilbc_constants.SUBL * Nback; i++) {
      decresidual[ilbc_constants.SUBL * Nback - i - 1]=reverseDecresidual[i];
    }
  }
  index_conv_enc(cb_index);
  pos=0;
  for (ulp=0; ulp < 3; ulp++) {
    int[] psarray=new int[1];
    for (k=0; k < ilbc_constants.LSF_NSPLIT * this.ULP_inst.lpc_n; k++) {
      pack=bytes.packsplit(lsf_i[k],this.ULP_inst.lsf_bits[k][ulp],this.ULP_inst.lsf_bits[k][ulp] + this.ULP_inst.lsf_bits[k][ulp + 1] + this.ULP_inst.lsf_bits[k][ulp + 2]);
      firstpart=pack.get_firstpart();
      lsf_i[k]=pack.get_rest();
      bytes.dopack(firstpart,this.ULP_inst.lsf_bits[k][ulp]);
    }
    pack=bytes.packsplit(start,this.ULP_inst.start_bits[ulp],this.ULP_inst.start_bits[ulp] + this.ULP_inst.start_bits[ulp + 1] + this.ULP_inst.start_bits[ulp + 2]);
    firstpart=pack.get_firstpart();
    start=pack.get_rest();
    bytes.dopack(firstpart,this.ULP_inst.start_bits[ulp]);
    pack=bytes.packsplit(state_first,this.ULP_inst.startfirst_bits[ulp],this.ULP_inst.startfirst_bits[ulp] + this.ULP_inst.startfirst_bits[ulp + 1] + this.ULP_inst.startfirst_bits[ulp + 2]);
    firstpart=pack.get_firstpart();
    state_first=pack.get_rest();
    bytes.dopack(firstpart,this.ULP_inst.startfirst_bits[ulp]);
    pack=bytes.packsplit(idxForMax[0],this.ULP_inst.scale_bits[ulp],this.ULP_inst.scale_bits[ulp] + this.ULP_inst.scale_bits[ulp + 1] + this.ULP_inst.scale_bits[ulp + 2]);
    firstpart=pack.get_firstpart();
    idxForMax[0]=pack.get_rest();
    bytes.dopack(firstpart,this.ULP_inst.scale_bits[ulp]);
    for (k=0; k < this.ULP_inst.state_short_len; k++) {
      pack=bytes.packsplit(idxVec[k],this.ULP_inst.state_bits[ulp],this.ULP_inst.state_bits[ulp] + this.ULP_inst.state_bits[ulp + 1] + this.ULP_inst.state_bits[ulp + 2]);
      firstpart=pack.get_firstpart();
      idxVec[k]=pack.get_rest();
      bytes.dopack(firstpart,this.ULP_inst.state_bits[ulp]);
    }
    for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
      pack=bytes.packsplit(extra_cb_index[k],this.ULP_inst.extra_cb_index[k][ulp],this.ULP_inst.extra_cb_index[k][ulp] + this.ULP_inst.extra_cb_index[k][ulp + 1] + this.ULP_inst.extra_cb_index[k][ulp + 2]);
      firstpart=pack.get_firstpart();
      extra_cb_index[k]=pack.get_rest();
      bytes.dopack(firstpart,this.ULP_inst.extra_cb_index[k][ulp]);
    }
    for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
      pack=bytes.packsplit(extra_gain_index[k],this.ULP_inst.extra_cb_gain[k][ulp],this.ULP_inst.extra_cb_gain[k][ulp] + this.ULP_inst.extra_cb_gain[k][ulp + 1] + this.ULP_inst.extra_cb_gain[k][ulp + 2]);
      firstpart=pack.get_firstpart();
      extra_gain_index[k]=pack.get_rest();
      bytes.dopack(firstpart,this.ULP_inst.extra_cb_gain[k][ulp]);
    }
    for (i=0; i < this.ULP_inst.nasub; i++) {
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        pack=bytes.packsplit(cb_index[i * ilbc_constants.CB_NSTAGES + k],this.ULP_inst.cb_index[i][k][ulp],this.ULP_inst.cb_index[i][k][ulp] + this.ULP_inst.cb_index[i][k][ulp + 1] + this.ULP_inst.cb_index[i][k][ulp + 2]);
        firstpart=pack.get_firstpart();
        cb_index[i * ilbc_constants.CB_NSTAGES + k]=pack.get_rest();
        bytes.dopack(firstpart,this.ULP_inst.cb_index[i][k][ulp]);
      }
    }
    for (i=0; i < this.ULP_inst.nasub; i++) {
      for (k=0; k < ilbc_constants.CB_NSTAGES; k++) {
        pack=bytes.packsplit(gain_index[i * ilbc_constants.CB_NSTAGES + k],this.ULP_inst.cb_gain[i][k][ulp],this.ULP_inst.cb_gain[i][k][ulp] + this.ULP_inst.cb_gain[i][k][ulp + 1] + this.ULP_inst.cb_gain[i][k][ulp + 2]);
        firstpart=pack.get_firstpart();
        gain_index[i * ilbc_constants.CB_NSTAGES + k]=pack.get_rest();
        bytes.dopack(firstpart,this.ULP_inst.cb_gain[i][k][ulp]);
      }
    }
  }
  bytes.dopack(0,1);
}
