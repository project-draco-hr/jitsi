{
  fixture.mockP1ServiceRegistration=MetaContactListServiceLick.registerMockProviderService(fixture.replacementMockP1);
  fixture.mockP2ServiceRegistration=MetaContactListServiceLick.registerMockProviderService(fixture.replacementMockP2);
  ContactGroup oldProtoMockP1Root=((OperationSetPersistentPresence)fixture.mockP1.getOperationSet(OperationSetPersistentPresence.class)).getServerStoredContactListRoot();
  ContactGroup oldProtoMockP2Root=((OperationSetPersistentPresence)fixture.mockP2.getOperationSet(OperationSetPersistentPresence.class)).getServerStoredContactListRoot();
  ContactGroup newProtoMockP1Root=((OperationSetPersistentPresence)fixture.replacementMockP1.getOperationSet(OperationSetPersistentPresence.class)).getServerStoredContactListRoot();
  assertEquals("Newly loaded provider does not match the old one.",oldProtoMockP1Root,newProtoMockP1Root);
  ContactGroup newProtoMockP2Root=((OperationSetPersistentPresence)fixture.replacementMockP2.getOperationSet(OperationSetPersistentPresence.class)).getServerStoredContactListRoot();
  assertEquals("Newly loaded provider does not match the old one.",oldProtoMockP2Root,newProtoMockP2Root);
  Iterator subgroups=newProtoMockP1Root.subgroups();
  while (subgroups.hasNext()) {
    assertUnresolvedContents((MockContactGroup)subgroups.next());
  }
  subgroups=newProtoMockP2Root.subgroups();
  while (subgroups.hasNext()) {
    assertUnresolvedContents((MockContactGroup)subgroups.next());
  }
}
