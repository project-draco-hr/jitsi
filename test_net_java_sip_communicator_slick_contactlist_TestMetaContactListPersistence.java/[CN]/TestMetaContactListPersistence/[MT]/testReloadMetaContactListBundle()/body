{
  Object o=new Object();
synchronized (o) {
    o.wait(1000);
  }
  Bundle metaClBundle=findMetaClBundle();
  assertNotNull("Couldn't find the bundle that exports the meta " + "contact list servce implementation that we're " + "currently testing",metaClBundle);
  metaClBundle.stop();
  assertTrue("Couldn't stop the meta cl bundle. State was " + metaClBundle.getState(),Bundle.ACTIVE != metaClBundle.getState() && Bundle.STOPPING != metaClBundle.getState());
  metaClBundle.uninstall();
  assertEquals("Couldn't stop the meta cl bundle.",Bundle.UNINSTALLED,metaClBundle.getState());
  MclSlickFixture.mockPrServiceRegistration.unregister();
  MclSlickFixture.mockP1ServiceRegistration.unregister();
  MclSlickFixture.mockP2ServiceRegistration.unregister();
  MclSlickFixture.replacementMockPr=new MockProvider(MclSlickFixture.mockProvider.getAccountID().getUserID());
  MclSlickFixture.replacementMockP1=new MockProvider(MclSlickFixture.mockP1.getAccountID().getUserID());
  MclSlickFixture.replacementMockP2=new MockProvider(MclSlickFixture.mockP2.getAccountID().getUserID());
  MclSlickFixture.mockPrServiceRegistration=MetaContactListServiceLick.registerMockProviderService(MclSlickFixture.replacementMockPr);
  metaClBundle=MclSlickFixture.bundleContext.installBundle(metaClBundle.getLocation());
  assertEquals("Couldn't re-install meta cl bundle.",Bundle.INSTALLED,metaClBundle.getState());
  metaClBundle.start();
  assertEquals("Couldn't re-start meta cl bundle.",Bundle.ACTIVE,metaClBundle.getState());
  fixture.metaClService=(MetaContactListService)MclSlickFixture.bundleContext.getService(MclSlickFixture.bundleContext.getServiceReference(MetaContactListService.class.getName()));
  assertNotNull("The meta contact list service was not re-registered " + "after reinstalling its bundle.",fixture.metaClService);
}
