{
  Bundle metaClBundle=findMetaClBundle();
  assertNotNull("Couldn't find the bundle that exports the meta " + "contact list servce implementation that we're " + "currently testing",metaClBundle);
  metaClBundle.stop();
  assertTrue("Couldn't stop the meta cl bundle. State was " + metaClBundle.getState(),Bundle.ACTIVE != metaClBundle.getState() && Bundle.STOPPING != metaClBundle.getState());
  metaClBundle.uninstall();
  assertEquals("Couldn't stop the meta cl bundle.",Bundle.UNINSTALLED,metaClBundle.getState());
  fixture.mockPrServiceRegistration.unregister();
  fixture.mockP1ServiceRegistration.unregister();
  fixture.mockP2ServiceRegistration.unregister();
  fixture.replacementMockPr=new MockProvider(fixture.mockProvider.getAccountID().getAccountUserID());
  fixture.replacementMockP1=new MockProvider(fixture.mockP1.getAccountID().getAccountUserID());
  fixture.replacementMockP2=new MockProvider(fixture.mockP2.getAccountID().getAccountUserID());
  fixture.mockPrServiceRegistration=MetaContactListServiceLick.registerMockProviderService(fixture.replacementMockPr);
  metaClBundle=fixture.bundleContext.installBundle(metaClBundle.getLocation());
  assertEquals("Couldn't re-install meta cl bundle.",Bundle.INSTALLED,metaClBundle.getState());
  metaClBundle.start();
  assertEquals("Couldn't re-start meta cl bundle.",Bundle.ACTIVE,metaClBundle.getState());
  fixture.metaClService=(MetaContactListService)fixture.bundleContext.getService(fixture.bundleContext.getServiceReference(MetaContactListService.class.getName()));
  assertNotNull("The meta contact list service was not re-registered " + "after reinstalling its bundle.",fixture.metaClService);
}
