{
  try {
    if (logger.isDebugEnabled())     logger.debug("Authenticating a Register request.");
    ClientTransaction retryTran;
    if (response.getStatusCode() == Response.UNAUTHORIZED || response.getStatusCode() == Response.PROXY_AUTHENTICATION_REQUIRED) {
      retryTran=sipProvider.getSipSecurityManager().handleChallenge(response,clientTransaction,jainSipProvider);
    }
 else {
      String certId=sipProvider.getAccountID().getAccountPropertyString(ProtocolProviderFactory.CLIENT_TLS_CERTIFICATE);
      if (certId != null) {
        this.setRegistrationState(RegistrationState.AUTHENTICATION_FAILED,RegistrationStateChangeEvent.REASON_NON_EXISTING_USER_ID,"We failed to authenticate with the server.");
        return;
      }
      retryTran=sipProvider.getSipSecurityManager().handleForbiddenResponse(response,clientTransaction,jainSipProvider);
    }
    if (retryTran == null) {
      if (logger.isTraceEnabled())       logger.trace("No password supplied or error occured!");
      unregister(false);
      return;
    }
    updateRegisterSequenceNumber(retryTran);
    retryTran.sendRequest();
    return;
  }
 catch (  OperationFailedException exc) {
    if (exc.getErrorCode() == OperationFailedException.AUTHENTICATION_CANCELED) {
      this.setRegistrationState(RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST,"User has canceled the authentication process.");
    }
 else {
      this.setRegistrationState(RegistrationState.AUTHENTICATION_FAILED,RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,"We failed to authenticate with the server.");
    }
  }
catch (  Exception exc) {
    logger.error("We failed to authenticate a Register request.",exc);
    this.setRegistrationState(RegistrationState.AUTHENTICATION_FAILED,RegistrationStateChangeEvent.REASON_AUTHENTICATION_FAILED,"We failed to authenticate with the server.");
  }
}
