{
  if (getRegistrationState() == RegistrationState.UNREGISTERED) {
    logger.trace("Trying to unregister when already unresgistered");
    return;
  }
  cancelPendingRegistrations();
  if (this.registerRequest == null) {
    logger.error("Couldn't find the initial register request");
    setRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,"Could not find the initial regiest request.");
    throw new OperationFailedException("Could not find the initial register request.",OperationFailedException.INTERNAL_ERROR);
  }
  Request unregisterRequest=(Request)registerRequest.clone();
  try {
    unregisterRequest.getExpires().setExpires(0);
    CSeqHeader cSeqHeader=(CSeqHeader)unregisterRequest.getHeader(CSeqHeader.NAME);
    cSeqHeader.setSeqNumber(getNextCSeqValue());
    ViaHeader via=(ViaHeader)unregisterRequest.getHeader(ViaHeader.NAME);
    if (via != null)     via.removeParameter("branch");
  }
 catch (  InvalidArgumentException ex) {
    logger.error("Unable to set Expires Header",ex);
    setRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,"Unable to set Expires Header");
    throw new OperationFailedException("Unable to set Expires Header",OperationFailedException.INTERNAL_ERROR,ex);
  }
  ContactHeader contact=(ContactHeader)unregisterRequest.getHeader(ContactHeader.NAME);
  try {
    contact.setExpires(0);
  }
 catch (  InvalidArgumentException exc) {
    logger.error("Failed to add an expires param (" + registrationsExpiration + ") to a contact header."+ "will ignore error",exc);
  }
  ClientTransaction unregisterTransaction=null;
  try {
    unregisterTransaction=this.getRegistrarJainSipProvider().getNewClientTransaction(unregisterRequest);
  }
 catch (  TransactionUnavailableException ex) {
    logger.error("Unable to create a unregister transaction",ex);
    setRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,"Unable to create a unregister transaction");
    throw new OperationFailedException("Unable to create a unregister transaction",OperationFailedException.INTERNAL_ERROR,ex);
  }
  try {
    unregisterTransaction.sendRequest();
    logger.debug("sent request: " + unregisterRequest);
    if (!getRegistrationState().equals(RegistrationState.REGISTERED)) {
      logger.trace("Setting state to UNREGISTERED.");
      setRegistrationState(RegistrationState.UNREGISTERED,RegistrationStateChangeEvent.REASON_USER_REQUEST,null);
      if (regTrans != null && regTrans.getState().getValue() <= TransactionState.PROCEEDING.getValue()) {
        logger.trace("Will try to terminate reg tran ...");
        regTrans.terminate();
        logger.trace("Transaction terminated!");
      }
    }
  }
 catch (  SipException ex) {
    logger.error("Failed to send unregister request",ex);
    setRegistrationState(RegistrationState.CONNECTION_FAILED,RegistrationStateChangeEvent.REASON_INTERNAL_ERROR,"Unable to create a unregister transaction");
    throw new OperationFailedException("Failed to send unregister request",OperationFailedException.INTERNAL_ERROR,ex);
  }
}
