{
  int monitorOfSink=PA.source_info_get_monitor_of_sink(sourceInfo);
  if (monitorOfSink != PA.INVALID_INDEX)   return;
  int sampleSpecFormat=PA.source_info_get_sample_spec_format(sourceInfo);
  if (sampleSpecFormat != PA.SAMPLE_S16LE)   return;
  int channels=PA.source_info_get_sample_spec_channels(sourceInfo);
  int rate=PA.source_info_get_sample_spec_rate(sourceInfo);
  List<Format> sourceInfoFormatList=new LinkedList<Format>();
  if ((MediaUtils.MAX_AUDIO_CHANNELS != Format.NOT_SPECIFIED) && (MediaUtils.MAX_AUDIO_CHANNELS < channels))   channels=MediaUtils.MAX_AUDIO_CHANNELS;
  if ((MediaUtils.MAX_AUDIO_SAMPLE_RATE != Format.NOT_SPECIFIED) && (MediaUtils.MAX_AUDIO_SAMPLE_RATE < rate))   rate=(int)MediaUtils.MAX_AUDIO_SAMPLE_RATE;
  AudioFormat audioFormat=new AudioFormat(AudioFormat.LINEAR,rate,16,channels,AudioFormat.LITTLE_ENDIAN,AudioFormat.SIGNED,Format.NOT_SPECIFIED,Format.NOT_SPECIFIED,Format.byteArray);
  if (!sourceInfoFormatList.contains(audioFormat)) {
    sourceInfoFormatList.add(audioFormat);
    if (!formatList.contains(audioFormat))     formatList.add(audioFormat);
  }
  if (!formatList.isEmpty()) {
    String description=PA.source_info_get_description(sourceInfo);
    String name=PA.source_info_get_name(sourceInfo);
    if (description == null)     description=name;
    deviceList.add(new CaptureDeviceInfo(description,new MediaLocator(LOCATOR_PROTOCOL + ":" + name),sourceInfoFormatList.toArray(new Format[sourceInfoFormatList.size()])));
  }
}
