{
  SnacCommand snac=evt.getSnacCommand();
  logger.debug("Received a response to our offline message request: " + snac);
  if (snac instanceof OfflineMsgIcqCmd) {
    OfflineMsgIcqCmd offlineMsgCmd=(OfflineMsgIcqCmd)snac;
    String contactUIN=String.valueOf(offlineMsgCmd.getFromUIN());
    Contact sourceContact=opSetPersPresence.findContactByID(contactUIN);
    if (sourceContact == null) {
      logger.debug("received a message from a unknown contact: " + contactUIN);
      sourceContact=opSetPersPresence.createVolatileContact(contactUIN);
    }
    long current=System.currentTimeMillis();
    long msgDate=offlineMsgCmd.getDate().getTime();
    if ((current + ONE_DAY) > msgDate)     msgDate=current;
    MessageReceivedEvent msgReceivedEvt=new MessageReceivedEvent(createMessage(offlineMsgCmd.getContents()),sourceContact,msgDate);
    OperationSetInstantMessageTransformIcqImpl messageTransform=(OperationSetInstantMessageTransformIcqImpl)icqProvider.getOperationSet(OperationSetInstantMessageTransform.class);
    for (    Map.Entry<Integer,Vector<TransformLayer>> entry : messageTransform.transformLayers.entrySet()) {
      for (Iterator<TransformLayer> iterator=entry.getValue().iterator(); iterator.hasNext(); ) {
        TransformLayer transformLayer=(TransformLayer)iterator.next();
        if (msgReceivedEvt != null)         msgReceivedEvt=transformLayer.messageReceived(msgReceivedEvt);
      }
    }
    if (msgReceivedEvt != null) {
      logger.debug("fire msg received for : " + offlineMsgCmd.getContents());
      fireMessageEvent(msgReceivedEvt);
    }
  }
 else   if (snac instanceof OfflineMsgDoneCmd) {
    logger.debug("send ack to delete offline messages");
    OfflineMsgIcqAckCmd offlineMsgDeleteReq=new OfflineMsgIcqAckCmd(Long.parseLong(icqProvider.getAimSession().getScreenname().getNormal()),requestID);
    icqProvider.getAimConnection().getInfoService().getOscarConnection().sendSnac(offlineMsgDeleteReq);
  }
 else   if (snac instanceof SnacError) {
    logger.debug("error receiving offline messages");
  }
}
