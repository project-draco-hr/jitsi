{
  Map<String,Integer> encryptionProtocols=getIntegerPropertiesByPrefix(ProtocolProviderFactory.ENCRYPTION_PROTOCOL,true);
  Map<String,Boolean> encryptionProtocolStatus=getBooleanPropertiesByPrefix(ProtocolProviderFactory.ENCRYPTION_PROTOCOL_STATUS,true,false);
  if (encryptionProtocols.size() == 0) {
    encryptionProtocols.put(ProtocolProviderFactory.ENCRYPTION_PROTOCOL + ".ZRTP",0);
    encryptionProtocolStatus.put(ProtocolProviderFactory.ENCRYPTION_PROTOCOL_STATUS + ".ZRTP",true);
  }
  List<SrtpControlType> sortedEncryptionProtocols=new ArrayList<SrtpControlType>(encryptionProtocols.size());
  for (  Map.Entry<String,Integer> e : encryptionProtocols.entrySet()) {
    int index=e.getValue();
    if (index != -1) {
      if (index > sortedEncryptionProtocols.size())       index=sortedEncryptionProtocols.size();
      String name=e.getKey().substring(ProtocolProviderFactory.ENCRYPTION_PROTOCOL.length() + 1);
      try {
        sortedEncryptionProtocols.add(index,SrtpControlType.fromString(name));
      }
 catch (      IllegalArgumentException exc) {
        logger.error("Failed to get SRTP control type for name: '" + name + "', key: '"+ e.getKey()+ "'",exc);
      }
    }
  }
  for (Iterator<SrtpControlType> i=sortedEncryptionProtocols.iterator(); i.hasNext(); ) {
    String name=i.next().toString();
    if (!encryptionProtocolStatus.get(ProtocolProviderFactory.ENCRYPTION_PROTOCOL_STATUS + "." + name)) {
      i.remove();
    }
  }
  return sortedEncryptionProtocols;
}
