{
  int r=reference.getRed();
  int g=reference.getGreen();
  int b=reference.getBlue();
  Color lightened=new Color(getValidRgb(r + 75),getValidRgb(g + 75),getValidRgb(b + 75));
  Color darkened=new Color(getValidRgb(r - 75),getValidRgb(g - 75),getValidRgb(b - 75));
  boolean isVeryDark=(r + g + b) / 3 < 25;
  if (isPressed) {
    if (isVeryDark) {
      reference=reference.brighter();
      lightened=lightened.brighter();
      darkened=darkened.brighter();
    }
 else {
      reference=reference.darker();
      lightened=lightened.darker();
      darkened=darkened.darker();
    }
  }
  if (component != null) {
    int borderType=!isPressed ? BevelBorder.RAISED : BevelBorder.LOWERED;
    Border border=BorderFactory.createBevelBorder(borderType,lightened,darkened);
    component.setBorder(border);
    Color foreground=isVeryDark ? new Color(224,224,224) : Color.BLACK;
    component.setForeground(foreground);
  }
  Point p1=new Point(0,20);
  Point p2=new Point(0,5);
  return new GradientPaint(p1,reference,p2,lightened,false);
}
