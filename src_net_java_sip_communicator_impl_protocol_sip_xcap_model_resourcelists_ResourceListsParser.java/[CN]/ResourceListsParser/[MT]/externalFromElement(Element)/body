{
  ExternalType external=new ExternalType();
  if (!EXTERNAL_ELEMENT.equals(entryElement.getLocalName()) || !NAMESPACE.equals(getNamespaceUri(entryElement))) {
    throw new Exception("external element is invalid");
  }
  NamedNodeMap attributes=entryElement.getAttributes();
  for (int i=0; i < attributes.getLength(); i++) {
    Attr attribute=(Attr)attributes.item(i);
    String namespaceUri=getNamespaceUri(attribute);
    if (namespaceUri == null) {
      throw new Exception("external element is invalid");
    }
    if (isStandartXmlNamespace(namespaceUri)) {
      continue;
    }
    if (NAMESPACE.equals(namespaceUri)) {
      if (EXTERNAL_ANCHOR_ATTR.equals(attribute.getLocalName())) {
        external.setAnchor(attribute.getValue());
        continue;
      }
 else {
        throw new Exception("external element is invalid");
      }
    }
    QName qName=new QName(attribute.getNamespaceURI(),attribute.getName(),attribute.getPrefix() == null ? "" : attribute.getPrefix());
    external.getAnyAttributes().put(qName,attribute.getValue());
  }
  NodeList childNodes=entryElement.getChildNodes();
  for (int i=0; i < childNodes.getLength(); i++) {
    Node node=childNodes.item(i);
    if (node.getNodeType() != Node.ELEMENT_NODE) {
      continue;
    }
    Element element=(Element)node;
    String namespaceUri=getNamespaceUri(element);
    if (namespaceUri == null) {
      throw new Exception("external element is invalid");
    }
    if (NAMESPACE.equals(namespaceUri)) {
      if (DISPALY_NAME_ELEMENT.equals(element.getLocalName())) {
        external.setDisplayName(displayNameFromElement(element));
        continue;
      }
 else {
        throw new Exception("external element is invalid");
      }
    }
    external.getAny().add(element);
  }
  return external;
}
