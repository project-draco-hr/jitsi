{
  Map<String,String> accountProperties=accountID.getAccountProperties();
  String password=JabberAccRegWizzActivator.getJabberProtocolProviderFactory().loadPassword(accountID);
  accountPanel.setRememberPassword(false);
  accountPanel.setUsername(accountID.getUserID());
  if (password != null) {
    accountPanel.setPassword(password);
    accountPanel.setRememberPassword(true);
  }
  String serverAddress=accountProperties.get(ProtocolProviderFactory.SERVER_ADDRESS);
  accountPanel.showChangePasswordPanel(true);
  connectionPanel.setServerAddress(serverAddress);
  String serverPort=accountProperties.get(ProtocolProviderFactory.SERVER_PORT);
  connectionPanel.setServerPort(serverPort);
  boolean keepAlive=Boolean.parseBoolean(accountProperties.get("SEND_KEEP_ALIVE"));
  connectionPanel.setSendKeepAlive(keepAlive);
  boolean gmailNotificationEnabled=Boolean.parseBoolean(accountProperties.get("GMAIL_NOTIFICATIONS_ENABLED"));
  connectionPanel.setGmailNotificationsEnabled(gmailNotificationEnabled);
  String useGC=accountProperties.get("GOOGLE_CONTACTS_ENABLED");
  boolean googleContactsEnabled=Boolean.parseBoolean((useGC != null && useGC.length() != 0) ? useGC : "true");
  connectionPanel.setGoogleContactsEnabled(googleContactsEnabled);
  String resource=accountProperties.get(ProtocolProviderFactory.RESOURCE);
  connectionPanel.setResource(resource);
  String autoGenerateResourceValue=accountProperties.get(ProtocolProviderFactory.AUTO_GENERATE_RESOURCE);
  boolean autoGenerateResource=JabberAccountRegistration.DEFAULT_RESOURCE_AUTOGEN;
  if (autoGenerateResourceValue != null)   autoGenerateResource=Boolean.parseBoolean(autoGenerateResourceValue);
  connectionPanel.setAutogenerateResource(autoGenerateResource);
  String priority=accountProperties.get(ProtocolProviderFactory.RESOURCE_PRIORITY);
  connectionPanel.setPriority(priority);
  connectionPanel.setDTMFMethod(accountID.getAccountPropertyString("DTMF_METHOD"));
  String dtmfMinimalToneDuration=accountID.getAccountPropertyString("DTMF_MINIMAL_TONE_DURATION");
  if (!StringUtils.isNullOrEmpty(dtmfMinimalToneDuration))   connectionPanel.setDtmfMinimalToneDuration(dtmfMinimalToneDuration);
  securityPanel.loadAccount(accountID);
  String useIce=accountProperties.get(ProtocolProviderFactory.IS_USE_ICE);
  boolean isUseIce=Boolean.parseBoolean((useIce != null && useIce.length() != 0) ? useIce : "true");
  iceConfigPanel.setUseIce(isUseIce);
  String useGoogleIce=accountProperties.get(ProtocolProviderFactory.IS_USE_GOOGLE_ICE);
  boolean isUseGoogleIce=Boolean.parseBoolean((useGoogleIce != null && useGoogleIce.length() != 0) ? useGoogleIce : "true");
  iceConfigPanel.setUseGoogleIce(isUseGoogleIce);
  String useAutoDiscoverStun=accountProperties.get(ProtocolProviderFactory.AUTO_DISCOVER_STUN);
  boolean isUseAutoDiscoverStun=Boolean.parseBoolean((useAutoDiscoverStun != null && useAutoDiscoverStun.length() != 0) ? useAutoDiscoverStun : "true");
  iceConfigPanel.setAutoDiscoverStun(isUseAutoDiscoverStun);
  String useDefaultStun=accountProperties.get(ProtocolProviderFactory.USE_DEFAULT_STUN_SERVER);
  boolean isUseDefaultStun=Boolean.parseBoolean((useDefaultStun != null && useDefaultStun.length() != 0) ? useDefaultStun : "true");
  iceConfigPanel.setUseDefaultStunServer(isUseDefaultStun);
  iceConfigPanel.removeAllStunServer();
  for (int i=0; i < StunServerDescriptor.MAX_STUN_SERVER_COUNT; i++) {
    StunServerDescriptor stunServer=StunServerDescriptor.loadDescriptor(accountProperties,ProtocolProviderFactory.STUN_PREFIX + i);
    if (stunServer == null)     break;
    String stunPassword=loadStunPassword(accountID,ProtocolProviderFactory.STUN_PREFIX + i);
    if (stunPassword != null) {
      stunServer.setPassword(stunPassword);
    }
    iceConfigPanel.addStunServer(stunServer);
  }
  String useJN=accountProperties.get(ProtocolProviderFactory.IS_USE_JINGLE_NODES);
  boolean isUseJN=Boolean.parseBoolean((useJN != null && useJN.length() != 0) ? useJN : "true");
  iceConfigPanel.setUseJingleNodes(isUseJN);
  String useAutoDiscoverJN=accountProperties.get(ProtocolProviderFactory.AUTO_DISCOVER_JINGLE_NODES);
  boolean isUseAutoDiscoverJN=Boolean.parseBoolean((useAutoDiscoverJN != null && useAutoDiscoverJN.length() != 0) ? useAutoDiscoverJN : "true");
  iceConfigPanel.setAutoDiscoverJingleNodes(isUseAutoDiscoverJN);
  iceConfigPanel.removeAllJingleNodes();
  for (int i=0; i < JingleNodeDescriptor.MAX_JN_RELAY_COUNT; i++) {
    JingleNodeDescriptor jn=JingleNodeDescriptor.loadDescriptor(accountProperties,JingleNodeDescriptor.JN_PREFIX + i);
    if (jn == null)     break;
    iceConfigPanel.addJingleNodes(jn);
  }
  String useUPNP=accountProperties.get(ProtocolProviderFactory.IS_USE_UPNP);
  boolean isUseUPNP=Boolean.parseBoolean((useUPNP != null && useUPNP.length() != 0) ? useUPNP : "true");
  iceConfigPanel.setUseUPNP(isUseUPNP);
  String allowNonSecure=accountProperties.get(ProtocolProviderFactory.IS_ALLOW_NON_SECURE);
  boolean isAllowNonSecure=Boolean.parseBoolean((allowNonSecure != null && allowNonSecure.length() != 0) ? allowNonSecure : "false");
  connectionPanel.setAllowNonSecure(isAllowNonSecure);
  boolean isServerOverriden=accountID.getAccountPropertyBoolean(ProtocolProviderFactory.IS_SERVER_OVERRIDDEN,false);
  connectionPanel.setServerOverridden(isServerOverriden);
  boolean disabledJingle=Boolean.parseBoolean(accountProperties.get(ProtocolProviderFactory.IS_CALLING_DISABLED_FOR_ACCOUNT));
  telephonyConfigPanel.setDisableJingle(disabledJingle);
  String telephonyDomain=accountProperties.get("OVERRIDE_PHONE_SUFFIX");
  telephonyConfigPanel.setTelephonyDomain(telephonyDomain);
  String bypassCapsDomain=accountProperties.get("TELEPHONY_BYPASS_GTALK_CAPS");
  telephonyConfigPanel.setTelephonyDomainBypassCaps(bypassCapsDomain);
  encodingsPanel.loadAccount(accountProperties);
}
