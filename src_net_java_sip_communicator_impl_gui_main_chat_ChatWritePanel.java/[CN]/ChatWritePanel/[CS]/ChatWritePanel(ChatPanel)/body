{
  super(new BorderLayout());
  SCScrollPane scrollPane=new SCScrollPane();
  this.chatPanel=panel;
  this.editorPane.setContentType("text/html");
  this.editorPane.setFont(Constants.FONT);
  this.editorPane.setCaretPosition(0);
  this.editorPane.setEditorKit(new SIPCommHTMLEditorKit());
  this.editorPane.getDocument().addUndoableEditListener(this);
  this.editorPane.addKeyListener(this);
  this.editorPane.addMouseListener(this);
  this.editorPane.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR));
  this.editorPane.setTransferHandler(new ChatWritePanelTransferHandler());
  this.editTextToolBar=new EditTextToolBar(this);
  this.add(editTextToolBar,BorderLayout.NORTH);
  this.add(scrollPane,BorderLayout.CENTER);
  this.rightButtonMenu=new WritePanelRightButtonMenu(chatPanel.getChatWindow());
  scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
  scrollPane.setViewportView(editorPane);
  this.typingTimer.setRepeats(true);
  ConfigurationService configService=GuiActivator.getConfigurationService();
  String messageCommandProperty="service.gui.SEND_MESSAGE_COMMAND";
  String messageCommand=configService.getString(messageCommandProperty);
  if (messageCommand == null)   messageCommand=GuiActivator.getResources().getSettingsString(messageCommandProperty);
  this.changeSendCommand((messageCommand == null || messageCommand.equalsIgnoreCase("enter")));
}
