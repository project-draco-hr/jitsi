{
  GridBagConstraints constraints=new GridBagConstraints();
  constraints.anchor=GridBagConstraints.NORTHWEST;
  constraints.fill=GridBagConstraints.NONE;
  constraints.gridx=1;
  constraints.gridy=0;
  constraints.gridheight=1;
  constraints.weightx=0f;
  constraints.weighty=0f;
  constraints.insets=new Insets(0,3,0,0);
  ImageID smsIcon=new ImageID("service.gui.icons.SEND_SMS");
  ImageID selectedIcon=new ImageID("service.gui.icons.SEND_SMS_SELECTED");
  smsButton=new SIPCommToggleButton(ImageLoader.getImage(smsIcon),ImageLoader.getImage(selectedIcon),ImageLoader.getImage(smsIcon),ImageLoader.getImage(selectedIcon));
  smsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (smsMode) {
        Object descr=chatPanel.getChatSession().getDescriptor();
        if (descr instanceof MetaContact) {
          List<Contact> imContact=((MetaContact)descr).getContactsForOperationSet(OperationSetBasicInstantMessaging.class);
          if (imContact == null || imContact.size() == 0)           return;
        }
 else         if (descr instanceof SourceContact) {
          List<ContactDetail> imContact=((SourceContact)descr).getContactDetails(OperationSetBasicInstantMessaging.class);
          if (imContact == null || imContact.size() == 0)           return;
        }
      }
      smsMode=smsButton.isSelected();
      Color bgColor;
      if (smsMode) {
        bgColor=new Color(GuiActivator.getResources().getColor("service.gui.LIST_SELECTION_COLOR"));
        smsCharCountLabel.setVisible(true);
        smsNumberLabel.setVisible(true);
      }
 else {
        bgColor=Color.WHITE;
        smsCharCountLabel.setVisible(false);
        smsNumberLabel.setVisible(false);
      }
      centerPanel.setBackground(bgColor);
      editorPane.setBackground(bgColor);
    }
  }
);
  smsButton.setVisible(false);
  centerPanel.add(smsButton,constraints);
}
