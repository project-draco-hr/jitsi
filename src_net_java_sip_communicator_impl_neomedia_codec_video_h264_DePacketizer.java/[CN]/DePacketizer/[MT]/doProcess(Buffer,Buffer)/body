{
  long sequenceNumber=inBuffer.getSequenceNumber();
  if ((lastSequenceNumber != -1) && ((sequenceNumber - lastSequenceNumber) != 1)) {
    if (logger.isTraceEnabled())     logger.trace("Dropping RTP packets upto sequenceNumber " + lastSequenceNumber + " and continuing with sequenceNumber "+ sequenceNumber);
    fuaStartedAndNotEnded=false;
    if (sequenceNumber <= lastSequenceNumber) {
      outBuffer.setDiscard(true);
      return BUFFER_PROCESSED_OK;
    }
 else     outBuffer.setLength(0);
  }
  lastSequenceNumber=sequenceNumber;
  long timeStamp=inBuffer.getTimeStamp();
  if (timeStamp != lastTimeStamp) {
    fuaStartedAndNotEnded=false;
    outBuffer.setLength(0);
  }
  lastTimeStamp=timeStamp;
  byte[] in=(byte[])inBuffer.getData();
  int inOffset=inBuffer.getOffset();
  byte octet=in[inOffset];
  int nal_unit_type=octet & 0x1F;
  int ret;
  if ((nal_unit_type >= 1) && (nal_unit_type <= 23)) {
    fuaStartedAndNotEnded=false;
    ret=dePacketizeSingleNALUnitPacket(in,inOffset,inBuffer.getLength(),outBuffer);
  }
 else   if (nal_unit_type == 28) {
    ret=dePacketizeFUA(in,inOffset,inBuffer.getLength(),outBuffer);
    if (outBuffer.isDiscard())     fuaStartedAndNotEnded=false;
  }
 else {
    logger.warn("Dropping NAL unit of unsupported type " + nal_unit_type);
    fuaStartedAndNotEnded=false;
    outBuffer.setDiscard(true);
    ret=BUFFER_PROCESSED_OK;
  }
  outBuffer.setSequenceNumber(sequenceNumber);
  if ((inBuffer.getFlags() & Buffer.FLAG_RTP_MARKER) != 0)   outBuffer.setFlags(outBuffer.getFlags() | Buffer.FLAG_RTP_MARKER);
  return ret;
}
