{
  try {
    while (true) {
      AudioInputStream audioStream=AudioSystem.getAudioInputStream(url);
      if (portAudioStream == 0) {
        int deviceIndex=PortAudioStream.getDeviceIndexFromLocator(audioNotifier.getDeviceConfiguration().getAudioNotifyDevice().getLocator());
        long devInfo=PortAudio.Pa_GetDeviceInfo(deviceIndex);
        int maxOutChannels=PortAudio.PaDeviceInfo_getMaxOutputChannels(devInfo);
        int outChannels=audioStream.getFormat().getChannels();
        if (outChannels > maxOutChannels)         outChannels=maxOutChannels;
        double sampleRate=audioStream.getFormat().getSampleRate();
        long streamParameters=PortAudio.PaStreamParameters_new(deviceIndex,outChannels,PortAudio.SAMPLE_FORMAT_INT16);
        if (!PortAudio.Pa_IsFormatSupported(0,streamParameters,sampleRate))         sampleRate=PortAudio.PaDeviceInfo_getDefaultSampleRate(devInfo);
        portAudioStream=PortAudio.Pa_OpenStream(0,streamParameters,sampleRate,PortAudio.FRAMES_PER_BUFFER_UNSPECIFIED,PortAudio.STREAM_FLAGS_NO_FLAG,null);
        PortAudio.Pa_StartStream(portAudioStream);
      }
      if (!started) {
        PortAudio.Pa_CloseStream(portAudioStream);
        return;
      }
      int read=0;
      while ((read=audioStream.read(buffer)) != -1) {
        PortAudio.Pa_WriteStream(portAudioStream,buffer,buffer.length / audioStream.getFormat().getFrameSize());
      }
      if (!isLooping()) {
        PortAudio.Pa_CloseStream(portAudioStream);
        break;
      }
 else {
        Thread.sleep(getLoopInterval());
      }
    }
  }
 catch (  PortAudioException e) {
    logger.error("Cannot open portaudio device for notifications",e);
  }
catch (  IOException e) {
    logger.error("Error reading from audio resource",e);
  }
catch (  InterruptedException e) {
    logger.error("Cannot wait the interval between plays",e);
  }
catch (  UnsupportedAudioFileException e) {
    logger.error("Unknown file format",e);
  }
}
