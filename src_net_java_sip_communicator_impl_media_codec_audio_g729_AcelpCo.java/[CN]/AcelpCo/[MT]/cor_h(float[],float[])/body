{
  int MSIZE=Ld8k.MSIZE;
  int NB_POS=Ld8k.NB_POS;
  int STEP=Ld8k.STEP;
  int rri0i0, rri1i1, rri2i2, rri3i3, rri4i4;
  int rri0i1, rri0i2, rri0i3, rri0i4;
  int rri1i2, rri1i3, rri1i4;
  int rri2i3, rri2i4;
  int p0, p1, p2, p3, p4;
  int ptr_hd, ptr_hf, ptr_h1, ptr_h2;
  float cor;
  int i, k, ldec, l_fin_sup, l_fin_inf;
  rri0i0=0;
  rri1i1=rri0i0 + NB_POS;
  rri2i2=rri1i1 + NB_POS;
  rri3i3=rri2i2 + NB_POS;
  rri4i4=rri3i3 + NB_POS;
  rri0i1=rri4i4 + NB_POS;
  rri0i2=rri0i1 + MSIZE;
  rri0i3=rri0i2 + MSIZE;
  rri0i4=rri0i3 + MSIZE;
  rri1i2=rri0i4 + MSIZE;
  rri1i3=rri1i2 + MSIZE;
  rri1i4=rri1i3 + MSIZE;
  rri2i3=rri1i4 + MSIZE;
  rri2i4=rri2i3 + MSIZE;
  p0=rri0i0 + NB_POS - 1;
  p1=rri1i1 + NB_POS - 1;
  p2=rri2i2 + NB_POS - 1;
  p3=rri3i3 + NB_POS - 1;
  p4=rri4i4 + NB_POS - 1;
  ptr_h1=0;
  cor=0.0f;
  for (i=0; i < NB_POS; i++) {
    cor+=h[ptr_h1] * h[ptr_h1];
    ptr_h1++;
    rr[p4]=cor;
    p4--;
    cor+=h[ptr_h1] * h[ptr_h1];
    ptr_h1++;
    rr[p3]=cor;
    p3--;
    cor+=h[ptr_h1] * h[ptr_h1];
    ptr_h1++;
    rr[p2]=cor;
    p2--;
    cor+=h[ptr_h1] * h[ptr_h1];
    ptr_h1++;
    rr[p1]=cor;
    p1--;
    cor+=h[ptr_h1] * h[ptr_h1];
    ptr_h1++;
    rr[p0]=cor;
    p0--;
  }
  l_fin_sup=MSIZE - 1;
  l_fin_inf=l_fin_sup - 1;
  ldec=NB_POS + 1;
  ptr_hd=0;
  ptr_hf=ptr_hd + 1;
  for (k=0; k < NB_POS; k++) {
    p3=rri2i3 + l_fin_sup;
    p2=rri1i2 + l_fin_sup;
    p1=rri0i1 + l_fin_sup;
    p0=rri0i4 + l_fin_inf;
    cor=0.0f;
    ptr_h1=ptr_hd;
    ptr_h2=ptr_hf;
    for (i=k + 1; i < NB_POS; i++) {
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p3]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p2]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p1]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p0]=cor;
      p3-=ldec;
      p2-=ldec;
      p1-=ldec;
      p0-=ldec;
    }
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p3]=cor;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p2]=cor;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p1]=cor;
    l_fin_sup-=NB_POS;
    l_fin_inf--;
    ptr_hf+=STEP;
  }
  ptr_hd=0;
  ptr_hf=ptr_hd + 2;
  l_fin_sup=MSIZE - 1;
  l_fin_inf=l_fin_sup - 1;
  for (k=0; k < NB_POS; k++) {
    p4=rri2i4 + l_fin_sup;
    p3=rri1i3 + l_fin_sup;
    p2=rri0i2 + l_fin_sup;
    p1=rri1i4 + l_fin_inf;
    p0=rri0i3 + l_fin_inf;
    cor=0.0f;
    ptr_h1=ptr_hd;
    ptr_h2=ptr_hf;
    for (i=k + 1; i < NB_POS; i++) {
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p4]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p3]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p2]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p1]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p0]=cor;
      p4-=ldec;
      p3-=ldec;
      p2-=ldec;
      p1-=ldec;
      p0-=ldec;
    }
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p4]=cor;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p3]=cor;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p2]=cor;
    l_fin_sup-=NB_POS;
    l_fin_inf--;
    ptr_hf+=STEP;
  }
  ptr_hd=0;
  ptr_hf=ptr_hd + 3;
  l_fin_sup=MSIZE - 1;
  l_fin_inf=l_fin_sup - 1;
  for (k=0; k < NB_POS; k++) {
    p4=rri1i4 + l_fin_sup;
    p3=rri0i3 + l_fin_sup;
    p2=rri2i4 + l_fin_inf;
    p1=rri1i3 + l_fin_inf;
    p0=rri0i2 + l_fin_inf;
    ptr_h1=ptr_hd;
    ptr_h2=ptr_hf;
    cor=0.0f;
    for (i=k + 1; i < NB_POS; i++) {
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p4]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p3]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p2]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p1]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p0]=cor;
      p4-=ldec;
      p3-=ldec;
      p2-=ldec;
      p1-=ldec;
      p0-=ldec;
    }
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p4]=cor;
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p3]=cor;
    l_fin_sup-=NB_POS;
    l_fin_inf--;
    ptr_hf+=STEP;
  }
  ptr_hd=0;
  ptr_hf=ptr_hd + 4;
  l_fin_sup=MSIZE - 1;
  l_fin_inf=l_fin_sup - 1;
  for (k=0; k < NB_POS; k++) {
    p3=rri0i4 + l_fin_sup;
    p2=rri2i3 + l_fin_inf;
    p1=rri1i2 + l_fin_inf;
    p0=rri0i1 + l_fin_inf;
    ptr_h1=ptr_hd;
    ptr_h2=ptr_hf;
    cor=0.f;
    for (i=k + 1; i < NB_POS; i++) {
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p3]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p2]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p1]=cor;
      cor+=h[ptr_h1] * h[ptr_h2];
      ptr_h1++;
      ptr_h2++;
      rr[p0]=cor;
      p3-=ldec;
      p2-=ldec;
      p1-=ldec;
      p0-=ldec;
    }
    cor+=h[ptr_h1] * h[ptr_h2];
    ptr_h1++;
    ptr_h2++;
    rr[p3]=cor;
    l_fin_sup-=NB_POS;
    l_fin_inf--;
    ptr_hf+=STEP;
  }
}
