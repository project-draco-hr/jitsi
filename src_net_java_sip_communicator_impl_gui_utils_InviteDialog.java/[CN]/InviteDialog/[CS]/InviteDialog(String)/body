{
  this.setModal(false);
  this.setTitle(title);
  TransparentPanel mainPanel=new TransparentPanel(new BorderLayout(5,5));
  TransparentPanel northPanel=new TransparentPanel(new BorderLayout(10,10));
  mainPanel.setPreferredSize(new Dimension(450,350));
  mainPanel.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));
  this.reasonArea.setBorder(BorderFactory.createTitledBorder(GuiActivator.getResources().getI18NString("service.gui.INVITE_REASON")));
  JTextArea infoTextArea=new JTextArea();
  infoTextArea.setText(GuiActivator.getResources().getI18NString("service.gui.INVITE_CONTACT_MSG"));
  infoTextArea.setFont(infoTextArea.getFont().deriveFont(Font.BOLD));
  infoTextArea.setLineWrap(true);
  infoTextArea.setOpaque(false);
  infoTextArea.setWrapStyleWord(true);
  infoTextArea.setEditable(false);
  JLabel iconLabel=new JLabel(new ImageIcon(ImageLoader.getImage(ImageLoader.INVITE_DIALOG_ICON)));
  northPanel.add(iconLabel,BorderLayout.WEST);
  northPanel.add(infoTextArea,BorderLayout.CENTER);
  TransparentPanel buttonsPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  buttonsPanel.add(inviteButton);
  buttonsPanel.add(cancelButton);
  this.getRootPane().setDefaultButton(inviteButton);
  inviteButton.setMnemonic(GuiActivator.getResources().getI18nMnemonic("service.gui.INVITE"));
  cancelButton.setMnemonic(GuiActivator.getResources().getI18nMnemonic("service.gui.CANCEL"));
  final DefaultContactList contactList=new DefaultContactList();
  final DefaultContactList selectedContactList=new DefaultContactList();
  contactList.setModel(contactListModel);
  selectedContactList.setModel(selectedContactListModel);
  contactList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        Object[] metaContacts=contactList.getSelectedValues();
        moveContactsFromLeftToRight(metaContacts);
      }
    }
  }
);
  selectedContactList.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() > 1) {
        Object[] metaContacts=selectedContactList.getSelectedValues();
        moveContactsFromRightToLeft(metaContacts);
      }
    }
  }
);
  JScrollPane contactListScrollPane=new JScrollPane();
  contactListScrollPane.setOpaque(false);
  contactListScrollPane.getViewport().setOpaque(false);
  contactListScrollPane.getViewport().add(contactList);
  contactListScrollPane.getViewport().setBorder(null);
  contactListScrollPane.setViewportBorder(null);
  contactListScrollPane.setBorder(null);
  JScrollPane selectedListScrollPane=new JScrollPane();
  selectedListScrollPane.setOpaque(false);
  selectedListScrollPane.getViewport().setOpaque(false);
  selectedListScrollPane.getViewport().add(selectedContactList);
  selectedListScrollPane.getViewport().setBorder(null);
  selectedListScrollPane.setViewportBorder(null);
  selectedListScrollPane.setBorder(SIPCommBorders.getRoundBorder());
  final SIPCommTextField newContactField=new SIPCommTextField(GuiActivator.getResources().getI18NString("service.gui.OR_ENTER_PHONE_NUMBER"));
  TransparentPanel leftPanel=new TransparentPanel(new BorderLayout());
  leftPanel.setBorder(SIPCommBorders.getRoundBorder());
  leftPanel.add(contactListScrollPane);
  leftPanel.add(newContactField,BorderLayout.SOUTH);
  JPanel listPanel=new JPanel(new GridLayout(0,2,5,5));
  listPanel.setPreferredSize(new Dimension(400,200));
  listPanel.add(leftPanel);
  listPanel.add(selectedListScrollPane);
  listPanel.setOpaque(false);
  JPanel addRemoveButtonsPanel=new JPanel(new GridLayout(0,2,5,5));
  addRemoveButtonsPanel.setOpaque(false);
  JButton addContactButton=new JButton(GuiActivator.getResources().getI18NString("service.gui.ADD"));
  JButton removeContactButton=new JButton(GuiActivator.getResources().getI18NString("service.gui.REMOVE"));
  addRemoveButtonsPanel.add(addContactButton);
  addRemoveButtonsPanel.add(removeContactButton);
  addContactButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Object[] metaContacts=contactList.getSelectedValues();
      if (metaContacts != null && metaContacts.length > 0)       moveContactsFromLeftToRight(metaContacts);
      String newContactText=newContactField.getText();
      if (newContactText != null && newContactText.length() > 0) {
        moveStringFromLeftToRight(newContactText);
        newContactField.setText("");
      }
    }
  }
);
  removeContactButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      Object[] metaContacts=selectedContactList.getSelectedValues();
      if (metaContacts != null && metaContacts.length > 0)       moveContactsFromRightToLeft(metaContacts);
    }
  }
);
  TransparentPanel centerPanel=new TransparentPanel(new BorderLayout());
  centerPanel.add(listPanel,BorderLayout.CENTER);
  centerPanel.add(addRemoveButtonsPanel,BorderLayout.SOUTH);
  TransparentPanel southPanel=new TransparentPanel(new BorderLayout());
  southPanel.add(reasonArea,BorderLayout.CENTER);
  southPanel.add(buttonsPanel,BorderLayout.SOUTH);
  mainPanel.add(northPanel,BorderLayout.NORTH);
  mainPanel.add(centerPanel,BorderLayout.CENTER);
  mainPanel.add(southPanel,BorderLayout.SOUTH);
  this.getContentPane().add(mainPanel);
}
