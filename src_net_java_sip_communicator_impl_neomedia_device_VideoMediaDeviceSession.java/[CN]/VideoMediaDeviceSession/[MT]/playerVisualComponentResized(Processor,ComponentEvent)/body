{
  if (playerScaler == null)   return;
  Component visualComponent=e.getComponent();
  if (visualComponent.getParent() == null)   return;
  Dimension outputSize=visualComponent.getSize();
  float outputWidth=outputSize.width;
  float outputHeight=outputSize.height;
  if ((outputWidth < 1) || (outputHeight < 1))   return;
  Format inputFormat=playerScaler.getInputFormat();
  if (inputFormat == null)   return;
  Dimension inputSize=((VideoFormat)inputFormat).getSize();
  if (inputSize == null)   return;
  int inputWidth=inputSize.width;
  int inputHeight=inputSize.height;
  if ((inputWidth < 1) || (inputHeight < 1))   return;
  outputHeight=outputWidth * inputHeight / (float)inputWidth;
  boolean scale=false;
  float widthRatio;
  float heightRatio;
  if (Math.abs(outputWidth - inputWidth) < 1) {
    scale=true;
    widthRatio=outputWidth / (float)inputWidth;
  }
 else   widthRatio=1;
  if (Math.abs(outputHeight - inputHeight) < 1) {
    scale=true;
    heightRatio=outputHeight / (float)inputHeight;
  }
 else   heightRatio=1;
  if (scale) {
    float scaleFactor=Math.min(widthRatio,heightRatio);
    outputWidth=inputWidth * scaleFactor;
    outputHeight=inputHeight * scaleFactor;
  }
  outputSize.width=(int)outputWidth;
  outputSize.height=(int)outputHeight;
  Dimension playerScalerOutputSize=playerScaler.getOutputSize();
  if (playerScalerOutputSize == null)   playerScaler.setOutputSize(outputSize);
 else {
    int outputWidthDelta=outputSize.width - playerScalerOutputSize.width;
    int outputHeightDelta=outputSize.height - playerScalerOutputSize.height;
    if ((outputWidthDelta < -1) || (outputWidthDelta > 1) || (outputHeightDelta < -1)|| (outputHeightDelta > 1)) {
      playerScaler.setOutputSize(outputSize);
    }
  }
}
