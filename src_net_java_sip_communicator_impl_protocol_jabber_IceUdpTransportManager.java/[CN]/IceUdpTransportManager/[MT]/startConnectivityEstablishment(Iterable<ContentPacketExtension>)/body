{
  if (!IceProcessingState.WAITING.equals(iceAgent.getState()))   return;
  int generation=iceAgent.getGeneration();
  boolean startConnectivityEstablishment=false;
  for (  ContentPacketExtension content : remote) {
    IceUdpTransportPacketExtension transport=content.getFirstChildOfType(IceUdpTransportPacketExtension.class);
    String ufrag=transport.getUfrag();
    if (ufrag != null)     iceAgent.setRemoteUfrag(ufrag);
    String password=transport.getPassword();
    if (password != null)     iceAgent.setRemotePassword(password);
    List<CandidatePacketExtension> candidates=transport.getChildExtensionsOfType(CandidatePacketExtension.class);
    RtpDescriptionPacketExtension description=content.getFirstChildOfType(RtpDescriptionPacketExtension.class);
    IceMediaStream stream=iceAgent.getStream(description.getMedia());
    for (    CandidatePacketExtension candidate : candidates) {
      if (candidate.getGeneration() != generation)       continue;
      Component component=stream.getComponent(candidate.getComponent());
      component.addRemoteCandidate(new RemoteCandidate(new TransportAddress(candidate.getIP(),candidate.getPort(),Transport.parse(candidate.getProtocol())),component,org.ice4j.ice.CandidateType.parse(candidate.getType().toString()),Integer.toString(candidate.getFoundation()),candidate.getPriority()));
      startConnectivityEstablishment=true;
    }
  }
  if (startConnectivityEstablishment)   iceAgent.startConnectivityEstablishment();
}
