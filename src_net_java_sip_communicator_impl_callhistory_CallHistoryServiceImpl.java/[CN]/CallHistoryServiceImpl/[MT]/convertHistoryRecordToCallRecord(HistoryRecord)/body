{
  CallRecordImpl result=new CallRecordImpl();
  List<String> callPeerIDs=null;
  List<String> callPeerNames=null;
  List<String> callPeerStart=null;
  List<String> callPeerEnd=null;
  List<CallPeerState> callPeerStates=null;
  SimpleDateFormat sdf=new SimpleDateFormat(HistoryService.DATE_FORMAT);
  for (int i=0; i < hr.getPropertyNames().length; i++) {
    String propName=hr.getPropertyNames()[i];
    String value=hr.getPropertyValues()[i];
    if (propName.equals(STRUCTURE_NAMES[0]))     result.setProtocolProvider(getProtocolProvider(value));
 else     if (propName.equals(STRUCTURE_NAMES[1]))     try {
      result.setStartTime(sdf.parse(value));
    }
 catch (    ParseException e) {
      result.setStartTime(new Date(Long.parseLong(value)));
    }
 else     if (propName.equals(STRUCTURE_NAMES[2]))     try {
      result.setEndTime(sdf.parse(value));
    }
 catch (    ParseException e) {
      result.setEndTime(new Date(Long.parseLong(value)));
    }
 else     if (propName.equals(STRUCTURE_NAMES[3]))     result.setDirection(value);
 else     if (propName.equals(STRUCTURE_NAMES[4]))     callPeerIDs=getCSVs(value);
 else     if (propName.equals(STRUCTURE_NAMES[5]))     callPeerStart=getCSVs(value);
 else     if (propName.equals(STRUCTURE_NAMES[6]))     callPeerEnd=getCSVs(value);
 else     if (propName.equals(STRUCTURE_NAMES[7]))     callPeerStates=getStates(value);
 else     if (propName.equals(STRUCTURE_NAMES[8]))     result.setEndReason(Integer.parseInt(value));
 else     if (propName.equals(STRUCTURE_NAMES[9]))     callPeerNames=getCSVs(value);
  }
  final int callPeerCount=callPeerIDs == null ? 0 : callPeerIDs.size();
  for (int i=0; i < callPeerCount; i++) {
    Date callPeerStartValue=null;
    Date callPeerEndValue=null;
    if (i < callPeerStart.size()) {
      try {
        callPeerStartValue=sdf.parse(callPeerStart.get(i));
      }
 catch (      ParseException e) {
        callPeerStartValue=new Date(Long.parseLong(callPeerStart.get(i)));
      }
    }
 else {
      callPeerStartValue=result.getStartTime();
      if (logger.isInfoEnabled())       logger.info("Call history start time list different from ids list: " + hr.toString());
    }
    if (i < callPeerEnd.size()) {
      try {
        callPeerEndValue=sdf.parse(callPeerEnd.get(i));
      }
 catch (      ParseException e) {
        callPeerEndValue=new Date(Long.parseLong(callPeerEnd.get(i)));
      }
    }
 else {
      callPeerEndValue=result.getEndTime();
      if (logger.isInfoEnabled())       logger.info("Call history end time list different from ids list: " + hr.toString());
    }
    CallPeerRecordImpl cpr=new CallPeerRecordImpl(callPeerIDs.get(i),callPeerStartValue,callPeerEndValue);
    if (callPeerStates != null && i < callPeerStates.size())     cpr.setState(callPeerStates.get(i));
 else     if (logger.isInfoEnabled())     logger.info("Call history state list different from ids list: " + hr.toString());
    result.getPeerRecords().add(cpr);
    if (callPeerNames != null && i < callPeerNames.size())     cpr.setDisplayName(callPeerNames.get(i));
  }
  return result;
}
