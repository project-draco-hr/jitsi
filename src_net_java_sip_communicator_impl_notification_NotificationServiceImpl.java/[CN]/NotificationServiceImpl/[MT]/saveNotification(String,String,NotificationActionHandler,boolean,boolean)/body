{
  String eventTypeNodeName=null;
  String actionTypeNodeName=null;
  List<String> eventTypes=configService.getPropertyNamesByPrefix(NOTIFICATIONS_PREFIX,true);
  for (  String eventTypeRootPropName : eventTypes) {
    String eType=configService.getString(eventTypeRootPropName);
    if (eType.equals(eventType))     eventTypeNodeName=eventTypeRootPropName;
  }
  if (eventTypeNodeName == null) {
    eventTypeNodeName=NOTIFICATIONS_PREFIX + ".eventType" + Long.toString(System.currentTimeMillis());
    configService.setProperty(eventTypeNodeName,eventType);
  }
  if (actionType == null && actionHandler == null) {
    configService.setProperty(eventTypeNodeName + ".active",Boolean.toString(isActive));
    return;
  }
  String actionPrefix=eventTypeNodeName + ".actions";
  List<String> actionTypes=configService.getPropertyNamesByPrefix(actionPrefix,true);
  for (  String actionTypeRootPropName : actionTypes) {
    String aType=configService.getString(actionTypeRootPropName);
    if (aType.equals(actionType))     actionTypeNodeName=actionTypeRootPropName;
  }
  Map<String,Object> configProperties=new HashMap<String,Object>();
  if (actionTypeNodeName == null) {
    actionTypeNodeName=actionPrefix + ".actionType" + Long.toString(System.currentTimeMillis());
    configProperties.put(actionTypeNodeName,actionType);
  }
  if (actionHandler instanceof SoundNotificationHandler) {
    SoundNotificationHandler soundHandler=(SoundNotificationHandler)actionHandler;
    configProperties.put(actionTypeNodeName + ".soundFileDescriptor",soundHandler.getDescriptor());
    configProperties.put(actionTypeNodeName + ".loopInterval",soundHandler.getLoopInterval());
    configProperties.put(actionTypeNodeName + ".enabled",Boolean.toString(isActive));
    configProperties.put(actionTypeNodeName + ".default",Boolean.toString(isDefault));
  }
 else   if (actionHandler instanceof PopupMessageNotificationHandler) {
    PopupMessageNotificationHandler messageHandler=(PopupMessageNotificationHandler)actionHandler;
    configProperties.put(actionTypeNodeName + ".defaultMessage",messageHandler.getDefaultMessage());
    configProperties.put(actionTypeNodeName + ".enabled",Boolean.toString(isActive));
    configProperties.put(actionTypeNodeName + ".default",Boolean.toString(isDefault));
  }
 else   if (actionHandler instanceof LogMessageNotificationHandler) {
    LogMessageNotificationHandler logMessageHandler=(LogMessageNotificationHandler)actionHandler;
    configProperties.put(actionTypeNodeName + ".logType",logMessageHandler.getLogType());
    configProperties.put(actionTypeNodeName + ".enabled",Boolean.toString(isActive));
    configProperties.put(actionTypeNodeName + ".default",Boolean.toString(isDefault));
  }
 else   if (actionHandler instanceof CommandNotificationHandler) {
    CommandNotificationHandler commandHandler=(CommandNotificationHandler)actionHandler;
    configProperties.put(actionTypeNodeName + ".commandDescriptor",commandHandler.getDescriptor());
    configProperties.put(actionTypeNodeName + ".enabled",Boolean.toString(isActive));
    configProperties.put(actionTypeNodeName + ".default",Boolean.toString(isDefault));
  }
  if (configProperties.size() > 0)   configService.setProperties(configProperties);
}
