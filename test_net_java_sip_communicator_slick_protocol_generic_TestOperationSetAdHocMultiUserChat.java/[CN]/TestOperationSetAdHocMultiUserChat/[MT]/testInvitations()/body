{
  assertEquals("There are no rooms to retrieve on user 1 side's",1,opSetAHMUC1.getAdHocChatRooms().size());
  AdHocChatRoom adHocChatRoom=opSetAHMUC1.getAdHocChatRooms().get(0);
  assertNotNull("The room can NOT been retrieved.",adHocChatRoom);
  AHMUCEventCollector collectorUser1=new AHMUCEventCollector(opSetAHMUC1,AHMUCEventCollector.PRESENCE_EVENT);
  AHMUCEventCollector collectorUser2=new AHMUCEventCollector(opSetAHMUC2,AHMUCEventCollector.INVITATION_EVENT);
  AHMUCEventCollector collectorUser3=new AHMUCEventCollector(opSetAHMUC3,AHMUCEventCollector.INVITATION_EVENT);
  adHocChatRoom.invite(fixture.userID2,invitationReason);
  adHocChatRoom.invite(fixture.userID3,invitationReason);
  collectorUser2.waitForEvent(10000);
  collectorUser3.waitForEvent(10000);
  assertEquals("Wrong number of collected events",1,collectorUser2.events.size());
  assertEquals("Wrong number of collected events",1,collectorUser3.events.size());
  assertTrue("Unexpected event type",collectorUser2.events.get(0) instanceof AdHocChatRoomInvitationReceivedEvent);
  assertTrue("Unexpected event type",collectorUser3.events.get(0) instanceof AdHocChatRoomInvitationReceivedEvent);
  AdHocChatRoomInvitationReceivedEvent event2=(AdHocChatRoomInvitationReceivedEvent)collectorUser2.events.get(0);
  assertEquals("Received invitation does NOT concern the right chatroom",adHocChatRoom.getName(),event2.getInvitation().getTargetAdHocChatRoom().getName());
  assertEquals("Received invitation does NOT come from expected user",fixture.userID1,event2.getInvitation().getInviter());
  assertEquals("Invitation's reason does NOT match",invitationReason,event2.getInvitation().getReason());
  AdHocChatRoomInvitationReceivedEvent event3=(AdHocChatRoomInvitationReceivedEvent)collectorUser3.events.get(0);
  assertEquals("Received invitation does NOT concern the right chatroom",adHocChatRoom.getName(),event3.getInvitation().getTargetAdHocChatRoom().getName());
  assertEquals("Received invitation does NOT come from expected user",fixture.userID1,event3.getInvitation().getInviter());
  assertEquals("Invitation's reason does NOT match",invitationReason,event3.getInvitation().getReason());
  event2.getInvitation().getTargetAdHocChatRoom().join();
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  assertEquals("Wrong count of generated events",1,collectorUser1.events.size());
  assertTrue("Wrong event instance",collectorUser1.events.get(0) instanceof AdHocChatRoomParticipantPresenceChangeEvent);
  AdHocChatRoomParticipantPresenceChangeEvent presenceEvent2=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(0);
  assertEquals("Presence event does NOT concern expected chatroom",adHocChatRoom.getName(),presenceEvent2.getAdHocChatRoom().getName());
  assertEquals("Wrong event type",AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_JOINED,presenceEvent2.getEventType());
  assertEquals("Presence event does NOT come from the expected user",fixture.userID2,presenceEvent2.getParticipant().getAddress());
  assertEquals("Unexpected participants count",1,adHocChatRoom.getParticipantsCount());
  assertEquals("Unexpected room participant",fixture.userID2,adHocChatRoom.getParticipants().get(0).getAddress());
  opSetAHMUC3.rejectInvitation(event3.getInvitation(),invitationRejectReason);
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  assertEquals("Wrong count of generated events",2,collectorUser1.events.size());
  assertTrue("Wrong event instance",collectorUser1.events.get(1) instanceof AdHocChatRoomInvitationRejectedEvent);
  AdHocChatRoomInvitationRejectedEvent rejectEvent=(AdHocChatRoomInvitationRejectedEvent)collectorUser1.events.get(1);
  assertEquals("Reject event does NOT concern expected room",adHocChatRoom.getName(),rejectEvent.getChatRoom().getName());
  assertEquals("Reject event does NOT come from expected user",fixture.userID3,rejectEvent.getInvitee());
  assertEquals("Reject event's reason does NOT match with expected one",invitationRejectReason,rejectEvent.getReason());
  assertEquals("Unexpected participants count",1,adHocChatRoom.getParticipantsCount());
  assertEquals("Unexpected room participant",fixture.userID2,adHocChatRoom.getParticipants().get(0).getAddress());
  adHocChatRoom.invite(fixture.userID3,"");
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  assertEquals("Wrong number of collected events",2,collectorUser3.events.size());
  assertTrue("Unexpected event type",collectorUser3.events.get(1) instanceof AdHocChatRoomInvitationReceivedEvent);
  event3=(AdHocChatRoomInvitationReceivedEvent)collectorUser3.events.get(1);
  assertEquals("Received invitation does NOT concern the right chatroom",adHocChatRoom.getName(),event3.getInvitation().getTargetAdHocChatRoom().getName());
  assertEquals("Received invitation does NOT come from expected user",fixture.userID1,event3.getInvitation().getInviter());
  assertEquals("Invitation's reason does NOT match",invitationReason,event3.getInvitation().getReason());
  event3.getInvitation().getTargetAdHocChatRoom().join();
  try {
    Thread.sleep(10000);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  assertEquals("Wrong count of generated events",3,collectorUser1.events.size() == 1);
  assertTrue("Wrong event instance",collectorUser1.events.get(0) instanceof AdHocChatRoomParticipantPresenceChangeEvent);
  AdHocChatRoomParticipantPresenceChangeEvent presenceEvent3=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(2);
  assertEquals("Presence event does NOT concern expected chatroom",adHocChatRoom.getName(),presenceEvent3.getAdHocChatRoom().getName());
  assertEquals("Wrong event type",AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_JOINED,presenceEvent3.getEventType());
  assertEquals("Presence event does NOT come from the expected user",fixture.userID3,presenceEvent3.getParticipant().getAddress());
  assertEquals("Unexpected participants count",2,adHocChatRoom.getParticipantsCount());
  assertEquals("Unexpected room participant",fixture.userID3,adHocChatRoom.getParticipants().get(1).getAddress());
}
