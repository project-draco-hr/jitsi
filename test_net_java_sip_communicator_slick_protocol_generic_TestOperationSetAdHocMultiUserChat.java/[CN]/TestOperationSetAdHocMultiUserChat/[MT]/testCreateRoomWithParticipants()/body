{
  List<String> contacts=new ArrayList<String>();
  contacts.add(fixture.userID2);
  contacts.add(fixture.userID3);
  AHMUCEventCollector collectorUser1=null;
  AHMUCEventCollector collectorUser2=new AHMUCEventCollector(opSetAHMUC2,AHMUCEventCollector.INVITATION_EVENT);
  AHMUCEventCollector collectorUser3=new AHMUCEventCollector(opSetAHMUC3,AHMUCEventCollector.INVITATION_EVENT);
  AdHocChatRoom room=opSetAHMUC1.createAdHocChatRoom(adHocChatRoomName,contacts,invitationReason);
  assertNotNull("Returned room is null",room);
  assertEquals("The room can't be retrieved",1,opSetAHMUC1.getAdHocChatRooms().size());
  assertNotNull("The newly created room is null",opSetAHMUC1.getAdHocChatRooms().get(0));
  collectorUser2.waitForEvent(40000);
  assertEquals("User2 didn't receive an invitation. Wrong number of " + "collected events",1,collectorUser2.events.size());
  assertTrue("Unexpected event type",collectorUser2.events.get(0) instanceof AdHocChatRoomInvitationReceivedEvent);
  collectorUser3.waitForEvent(40000);
  assertEquals("User3 didn't receive an invitation. Wrong number of " + "collected events",1,collectorUser3.events.size());
  assertTrue("Unexpected event type",collectorUser3.events.get(0) instanceof AdHocChatRoomInvitationReceivedEvent);
  AdHocChatRoomInvitationReceivedEvent event2=(AdHocChatRoomInvitationReceivedEvent)collectorUser2.events.get(0);
  assertEquals("Received invitation does NOT concern the right chatroom",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),event2.getInvitation().getTargetAdHocChatRoom().getName());
  assertEquals("Received invitation does NOT come from expected user",fixture.userID1,event2.getInvitation().getInviter());
  assertEquals("Invitation's reason does NOT match",invitationReason,event2.getInvitation().getReason());
  AdHocChatRoomInvitationReceivedEvent event3=(AdHocChatRoomInvitationReceivedEvent)collectorUser3.events.get(0);
  assertEquals("Received invitation does NOT concern the right chatroom",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),event3.getInvitation().getTargetAdHocChatRoom().getName());
  assertEquals("Received invitation does NOT come from expected user",fixture.userID1,event3.getInvitation().getInviter());
  assertEquals("Invitation's reason does NOT match",invitationReason,event3.getInvitation().getReason());
  collectorUser1=new AHMUCEventCollector(opSetAHMUC1.getAdHocChatRooms().get(0),AHMUCEventCollector.PRESENCE_EVENT);
  assertEquals(1,opSetAHMUC2.getAdHocChatRooms().size());
  assertNotNull(opSetAHMUC2.getAdHocChatRooms().get(0));
  event2.getInvitation().getTargetAdHocChatRoom().join();
  collectorUser1.waitForEvent(40000);
  assertEquals("Wrong count of generated events",1,collectorUser1.events.size());
  assertTrue("Wrong event instance",collectorUser1.events.get(0) instanceof AdHocChatRoomParticipantPresenceChangeEvent);
  AdHocChatRoomParticipantPresenceChangeEvent presenceEvent2=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(0);
  assertEquals("Presence event does NOT concern expected chatroom",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),presenceEvent2.getAdHocChatRoom().getName());
  assertEquals("Wrong event type",AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_JOINED,presenceEvent2.getEventType());
  assertEquals("Presence event does NOT come from the expected user",fixture.userID2,presenceEvent2.getParticipant().getAddress());
  assertEquals("Unexpected participants count",1,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipantsCount());
  assertEquals("Unexpected room participant",fixture.userID2,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipants().get(0).getAddress());
  assertEquals(1,opSetAHMUC3.getAdHocChatRooms().size());
  assertNotNull(opSetAHMUC3.getAdHocChatRooms().get(0));
  event3.getInvitation().getTargetAdHocChatRoom().join();
  collectorUser1.waitForEvent(20000);
  assertEquals("Wrong count of generated events",2,collectorUser1.events.size());
  assertTrue("Wrong event instance",collectorUser1.events.get(1) instanceof AdHocChatRoomParticipantPresenceChangeEvent);
  AdHocChatRoomParticipantPresenceChangeEvent presenceEvent3=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(1);
  assertEquals("Presence event does NOT concern expected chatroom",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),presenceEvent3.getAdHocChatRoom().getName());
  assertEquals("Wrong event type",AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_JOINED,presenceEvent3.getEventType());
  assertEquals("Presence event does NOT come from the expected user",fixture.userID3,presenceEvent3.getParticipant().getAddress());
  assertEquals("Unexpected participants count",2,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipantsCount());
  assertEquals("Unexpected room participant",fixture.userID3,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipants().get(1).getAddress());
  opSetAHMUC2.getAdHocChatRooms().get(0).leave();
  collectorUser1.waitForEvent(40000);
  presenceEvent2=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(2);
  assertEquals("Wrong type of event",presenceEvent2.getEventType(),AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_LEFT);
  assertEquals("The event belongs to an unexpected room",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),presenceEvent2.getAdHocChatRoom().getName());
  assertEquals("The event belongs to an unexpected user",fixture.userID2,presenceEvent2.getParticipant().getAddress());
  assertEquals("Wrong count of participants",1,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipantsCount());
  opSetAHMUC3.getAdHocChatRooms().get(0).leave();
  collectorUser1.waitForEvent(10000);
  presenceEvent3=(AdHocChatRoomParticipantPresenceChangeEvent)collectorUser1.events.get(3);
  assertEquals("Wrong type of event",presenceEvent3.getEventType(),AdHocChatRoomParticipantPresenceChangeEvent.CONTACT_LEFT);
  assertEquals("The event belongs to an unexpected room",opSetAHMUC1.getAdHocChatRooms().get(0).getName(),presenceEvent3.getAdHocChatRoom().getName());
  assertEquals("The event belongs to an unexpected user",fixture.userID3,presenceEvent3.getParticipant().getAddress());
  assertEquals("The room was supposed to be empty, but it still contains" + " participants",0,opSetAHMUC1.getAdHocChatRooms().get(0).getParticipantsCount());
}
