{
synchronized (messageProcessors) {
    for (    SipMessageProcessor listener : messageProcessors)     if (!listener.processMessage(requestEvent))     return true;
  }
  String content=null;
  Request req=requestEvent.getRequest();
  try {
    content=new String(req.getRawContent(),getCharset(req));
  }
 catch (  UnsupportedEncodingException ex) {
    if (logger.isDebugEnabled())     logger.debug("failed to convert the message charset");
    content=new String(requestEvent.getRequest().getRawContent());
  }
  FromHeader fromHeader=(FromHeader)requestEvent.getRequest().getHeader(FromHeader.NAME);
  if (fromHeader == null) {
    logger.error("received a request without a from header");
    return false;
  }
  Contact from=opSetPersPresence.resolveContactID(fromHeader.getAddress().getURI().toString());
  ContentTypeHeader ctheader=(ContentTypeHeader)req.getHeader(ContentTypeHeader.NAME);
  String ctype=null;
  String cencoding=null;
  if (ctheader == null) {
    ctype=DEFAULT_MIME_TYPE;
  }
 else {
    ctype=ctheader.getContentType() + "/" + ctheader.getContentSubType();
    cencoding=ctheader.getParameter("charset");
  }
  if (cencoding == null)   cencoding=DEFAULT_MIME_ENCODING;
  Message newMessage=createMessage(content,ctype,cencoding,null);
  if (from == null) {
    if (logger.isDebugEnabled())     logger.debug("received a message from an unknown contact: " + fromHeader.getAddress().getURI().toString());
    if (fromHeader.getAddress().getDisplayName() != null) {
      from=opSetPersPresence.createVolatileContact(fromHeader.getAddress().getURI().toString(),fromHeader.getAddress().getDisplayName().toString());
    }
 else {
      from=opSetPersPresence.createVolatileContact(fromHeader.getAddress().getURI().toString());
    }
  }
  try {
    Response ok=sipProvider.getMessageFactory().createResponse(Response.OK,requestEvent.getRequest());
    SipStackSharing.getOrCreateServerTransaction(requestEvent).sendResponse(ok);
  }
 catch (  ParseException exc) {
    logger.error("failed to build the response",exc);
  }
catch (  SipException exc) {
    logger.error("failed to send the response : " + exc.getMessage(),exc);
  }
catch (  InvalidArgumentException exc) {
    if (logger.isDebugEnabled())     logger.debug("Invalid argument for createResponse : " + exc.getMessage(),exc);
  }
  MessageReceivedEvent msgReceivedEvt=new MessageReceivedEvent(newMessage,from,System.currentTimeMillis());
  fireMessageEvent(msgReceivedEvt);
  return true;
}
