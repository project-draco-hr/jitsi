{
synchronized (messageProcessors) {
    for (    SipMessageProcessor listener : messageProcessors)     if (!listener.processResponse(responseEvent,sentMsg))     return true;
  }
  Request req=responseEvent.getClientTransaction().getRequest();
  int status=responseEvent.getResponse().getStatusCode();
  String content=null;
  try {
    content=new String(req.getRawContent(),getCharset(req));
  }
 catch (  UnsupportedEncodingException exc) {
    logger.debug("failed to convert the message charset",exc);
    content=new String(req.getRawContent());
  }
  ToHeader toHeader=(ToHeader)req.getHeader(ToHeader.NAME);
  if (toHeader == null) {
    logger.error("send a request without a to header");
    return false;
  }
  Contact to=opSetPersPresence.resolveContactID(toHeader.getAddress().getURI().toString());
  if (to == null) {
    logger.error("Error received a response from an unknown contact : " + toHeader.getAddress().getURI().toString() + " : "+ responseEvent.getResponse().getStatusCode()+ " "+ responseEvent.getResponse().getReasonPhrase());
    fireMessageDeliveryFailed(createMessage(content),to,MessageDeliveryFailedEvent.INTERNAL_ERROR);
    return false;
  }
  String key=((CallIdHeader)req.getHeader(CallIdHeader.NAME)).getCallId();
  Message newMessage=sentMsg.get(key);
  if (newMessage == null) {
    logger.error("Couldn't find the message sent");
    fireMessageDeliveryFailed(createMessage(content),to,MessageDeliveryFailedEvent.INTERNAL_ERROR);
    return true;
  }
  if (status >= 400 && status != 401 && status != 407) {
    logger.info(responseEvent.getResponse().getStatusCode() + " " + responseEvent.getResponse().getReasonPhrase());
    MessageDeliveryFailedEvent evt=new MessageDeliveryFailedEvent(newMessage,to,MessageDeliveryFailedEvent.NETWORK_FAILURE,System.currentTimeMillis(),responseEvent.getResponse().getStatusCode() + " " + responseEvent.getResponse().getReasonPhrase());
    fireMessageEvent(evt);
    sentMsg.remove(key);
  }
 else   if (status == 401 || status == 407) {
    logger.debug("proxy asks authentication : " + responseEvent.getResponse().getStatusCode() + " "+ responseEvent.getResponse().getReasonPhrase());
    ClientTransaction clientTransaction=responseEvent.getClientTransaction();
    SipProvider sourceProvider=(SipProvider)responseEvent.getSource();
    try {
      processAuthenticationChallenge(clientTransaction,responseEvent.getResponse(),sourceProvider);
    }
 catch (    OperationFailedException ex) {
      logger.error("can't solve the challenge",ex);
      MessageDeliveryFailedEvent evt=new MessageDeliveryFailedEvent(newMessage,to,MessageDeliveryFailedEvent.NETWORK_FAILURE,System.currentTimeMillis(),ex.getMessage());
      fireMessageEvent(evt);
      sentMsg.remove(key);
    }
  }
 else   if (status >= 200) {
    logger.debug("Ack received from the network : " + responseEvent.getResponse().getStatusCode() + " "+ responseEvent.getResponse().getReasonPhrase());
    MessageDeliveredEvent msgDeliveredEvt=new MessageDeliveredEvent(newMessage,to,System.currentTimeMillis());
    fireMessageEvent(msgDeliveredEvt);
    sentMsg.remove(key);
  }
  return true;
}
