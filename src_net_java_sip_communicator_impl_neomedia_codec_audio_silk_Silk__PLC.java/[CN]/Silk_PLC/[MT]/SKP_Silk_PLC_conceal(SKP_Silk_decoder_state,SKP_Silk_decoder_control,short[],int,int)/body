{
  int i, j, k;
  short[] B_Q14;
  short[] exc_buf=new short[Silk_define.MAX_FRAME_LENGTH];
  short[] exc_buf_ptr;
  int exc_buf_ptr_offset;
  short rand_scale_Q14;
  short[] A_Q12_tmp=new short[Silk_define.MAX_LPC_ORDER];
  int rand_seed, harm_Gain_Q15, rand_Gain_Q15;
  int lag, idx, shift1, shift2;
  int shift1_ptr[]=new int[1];
  int shift2_ptr[]=new int[1];
  int energy1, energy2;
  int energy1_ptr[]=new int[1];
  int energy2_ptr[]=new int[1];
  int[] rand_ptr, pred_lag_ptr;
  int rand_ptr_offset, pred_lag_ptr_offset;
  int[] sig_Q10=new int[Silk_define.MAX_FRAME_LENGTH];
  int[] sig_Q10_ptr;
  int sig_Q10_ptr_offset;
  int LPC_exc_Q10, LPC_pred_Q10, LTP_pred_Q14;
  SKP_Silk_PLC_struct psPLC;
  psPLC=psDec.sPLC;
  System.arraycopy(psDec.sLTP_Q16,psDec.frame_length,psDec.sLTP_Q16,0,psDec.frame_length);
  Silk_bwexpander.SKP_Silk_bwexpander(psPLC.prevLPC_Q12,psDec.LPC_order,BWE_COEF_Q16);
  exc_buf_ptr=exc_buf;
  exc_buf_ptr_offset=0;
  for (k=(Silk_define.NB_SUBFR >> 1); k < Silk_define.NB_SUBFR; k++) {
    for (i=0; i < psDec.subfr_length; i++) {
      exc_buf_ptr[exc_buf_ptr_offset + i]=(short)(Silk_macros.SKP_SMULWW(psDec.exc_Q10[i + k * psDec.subfr_length],psPLC.prevGain_Q16[k]) >> 10);
    }
    exc_buf_ptr_offset+=psDec.subfr_length;
  }
  Silk_sum_sqr_shift.SKP_Silk_sum_sqr_shift(energy1_ptr,shift1_ptr,exc_buf,0,psDec.subfr_length);
  energy1=energy1_ptr[0];
  shift1=shift1_ptr[0];
  Silk_sum_sqr_shift.SKP_Silk_sum_sqr_shift(energy2_ptr,shift2_ptr,exc_buf,psDec.subfr_length,psDec.subfr_length);
  energy2=energy2_ptr[0];
  shift2=shift2_ptr[0];
  if ((energy1 >> shift2) < (energy1 >> shift2)) {
    rand_ptr=psDec.exc_Q10;
    rand_ptr_offset=Math.max(0,3 * psDec.subfr_length - RAND_BUF_SIZE);
  }
 else {
    rand_ptr=psDec.exc_Q10;
    rand_ptr_offset=Math.max(0,psDec.frame_length - RAND_BUF_SIZE);
  }
  B_Q14=psPLC.LTPCoef_Q14;
  rand_scale_Q14=psPLC.randScale_Q14;
  harm_Gain_Q15=HARM_ATT_Q15[Math.min(NB_ATT - 1,psDec.lossCnt)];
  if (psDec.prev_sigtype == Silk_define.SIG_TYPE_VOICED) {
    rand_Gain_Q15=PLC_RAND_ATTENUATE_V_Q15[Math.min(NB_ATT - 1,psDec.lossCnt)];
  }
 else {
    rand_Gain_Q15=PLC_RAND_ATTENUATE_UV_Q15[Math.min(NB_ATT - 1,psDec.lossCnt)];
  }
  if (psDec.lossCnt == 0) {
    rand_scale_Q14=(1 << 14);
    if (psDec.prev_sigtype == Silk_define.SIG_TYPE_VOICED) {
      for (i=0; i < Silk_define.LTP_ORDER; i++) {
        rand_scale_Q14-=B_Q14[i];
      }
      rand_scale_Q14=(short)Math.max(3277,rand_scale_Q14);
      rand_scale_Q14=(short)(Silk_macros.SKP_SMULBB(rand_scale_Q14,psPLC.prevLTP_scale_Q14) >> 14);
    }
    if (psDec.prev_sigtype == Silk_define.SIG_TYPE_UNVOICED) {
      int invGain_Q30, down_scale_Q30;
      int invGain_Q30_ptr[]=new int[1];
      Silk_LPC_inv_pred_gain.SKP_Silk_LPC_inverse_pred_gain(invGain_Q30_ptr,psPLC.prevLPC_Q12,psDec.LPC_order);
      invGain_Q30=invGain_Q30_ptr[0];
      down_scale_Q30=Math.min(((1 << 30) >> LOG2_INV_LPC_GAIN_HIGH_THRES),invGain_Q30);
      down_scale_Q30=Math.max(((1 << 30) >> LOG2_INV_LPC_GAIN_LOW_THRES),down_scale_Q30);
      down_scale_Q30=(down_scale_Q30 << LOG2_INV_LPC_GAIN_HIGH_THRES);
      rand_Gain_Q15=(Silk_macros.SKP_SMULWB(down_scale_Q30,rand_Gain_Q15) >> 14);
    }
  }
  rand_seed=psPLC.rand_seed;
  lag=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(psPLC.pitchL_Q8,8);
  psDec.sLTP_buf_idx=psDec.frame_length;
  sig_Q10_ptr=sig_Q10;
  sig_Q10_ptr_offset=0;
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    pred_lag_ptr=psDec.sLTP_Q16;
    pred_lag_ptr_offset=psDec.sLTP_buf_idx - lag + Silk_define.LTP_ORDER / 2;
    for (i=0; i < psDec.subfr_length; i++) {
      rand_seed=Silk_SigProc_FIX.SKP_RAND(rand_seed);
      idx=(rand_seed >> 25) & RAND_BUF_MASK;
      LTP_pred_Q14=Silk_macros.SKP_SMULWB(pred_lag_ptr[pred_lag_ptr_offset + 0],B_Q14[0]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 1],B_Q14[1]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 2],B_Q14[2]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 3],B_Q14[3]);
      LTP_pred_Q14=Silk_macros.SKP_SMLAWB(LTP_pred_Q14,pred_lag_ptr[pred_lag_ptr_offset - 4],B_Q14[4]);
      pred_lag_ptr_offset++;
      LPC_exc_Q10=(Silk_macros.SKP_SMULWB(rand_ptr[rand_ptr_offset + idx],rand_scale_Q14) << 2);
      LPC_exc_Q10=(LPC_exc_Q10 + Silk_SigProc_FIX.SKP_RSHIFT_ROUND(LTP_pred_Q14,4));
      psDec.sLTP_Q16[psDec.sLTP_buf_idx]=(LPC_exc_Q10 << 6);
      psDec.sLTP_buf_idx++;
      sig_Q10_ptr[sig_Q10_ptr_offset + i]=LPC_exc_Q10;
    }
    sig_Q10_ptr_offset+=psDec.subfr_length;
    for (j=0; j < Silk_define.LTP_ORDER; j++) {
      B_Q14[j]=(short)(Silk_macros.SKP_SMULBB(harm_Gain_Q15,B_Q14[j]) >> 15);
    }
    rand_scale_Q14=(short)(Silk_macros.SKP_SMULBB(rand_scale_Q14,rand_Gain_Q15) >> 15);
    psPLC.pitchL_Q8+=Silk_macros.SKP_SMULWB(psPLC.pitchL_Q8,PITCH_DRIFT_FAC_Q16);
    psPLC.pitchL_Q8=Math.min(psPLC.pitchL_Q8,(Silk_macros.SKP_SMULBB(MAX_PITCH_LAG_MS,psDec.fs_kHz) << 8));
    lag=Silk_SigProc_FIX.SKP_RSHIFT_ROUND(psPLC.pitchL_Q8,8);
  }
  sig_Q10_ptr=sig_Q10;
  sig_Q10_ptr_offset=0;
  System.arraycopy(psPLC.prevLPC_Q12,0,A_Q12_tmp,0,psDec.LPC_order);
  Silk_typedef.SKP_assert(psDec.LPC_order >= 10);
  for (k=0; k < Silk_define.NB_SUBFR; k++) {
    for (i=0; i < psDec.subfr_length; i++) {
      LPC_pred_Q10=Silk_macros.SKP_SMULWB(psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 1],A_Q12_tmp[0]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 2],A_Q12_tmp[1]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 3],A_Q12_tmp[2]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 4],A_Q12_tmp[3]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 5],A_Q12_tmp[4]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 6],A_Q12_tmp[5]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 7],A_Q12_tmp[6]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 8],A_Q12_tmp[7]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 9],A_Q12_tmp[8]);
      LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - 10],A_Q12_tmp[9]);
      for (j=10; j < psDec.LPC_order; j++) {
        LPC_pred_Q10=Silk_macros.SKP_SMLAWB(LPC_pred_Q10,psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i - j - 1],A_Q12_tmp[j]);
      }
      sig_Q10_ptr[sig_Q10_ptr_offset=i]=(sig_Q10_ptr[sig_Q10_ptr_offset + i] + LPC_pred_Q10);
      psDec.sLPC_Q14[Silk_define.MAX_LPC_ORDER + i]=(sig_Q10_ptr[sig_Q10_ptr_offset + i] << 4);
    }
    sig_Q10_ptr_offset+=psDec.subfr_length;
    System.arraycopy(psDec.sLPC_Q14,psDec.subfr_length,psDec.sLPC_Q14,0,Silk_define.MAX_LPC_ORDER);
  }
  for (i=0; i < psDec.frame_length; i++) {
    signal[signal_offset + i]=(short)Silk_SigProc_FIX.SKP_SAT16(Silk_SigProc_FIX.SKP_RSHIFT_ROUND(Silk_macros.SKP_SMULWW(sig_Q10[i],psPLC.prevGain_Q16[Silk_define.NB_SUBFR - 1]),10));
  }
  psPLC.rand_seed=rand_seed;
  psPLC.randScale_Q14=rand_scale_Q14;
  for (i=0; i < Silk_define.NB_SUBFR; i++) {
    psDecCtrl.pitchL[i]=lag;
  }
}
