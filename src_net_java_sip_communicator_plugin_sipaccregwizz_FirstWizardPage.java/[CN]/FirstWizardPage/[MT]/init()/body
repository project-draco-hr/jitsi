{
  this.uinField.getDocument().addDocumentListener(this);
  this.transportCombo.addItemListener(this);
  this.rememberPassBox.setSelected(true);
  existingAccountLabel.setForeground(Color.RED);
  this.uinExampleLabel.setForeground(Color.GRAY);
  this.uinExampleLabel.setFont(uinExampleLabel.getFont().deriveFont(8));
  this.emptyPanel.setMaximumSize(new Dimension(40,35));
  this.uinExampleLabel.setBorder(BorderFactory.createEmptyBorder(0,0,8,0));
  labelsPanel.add(uinLabel);
  labelsPanel.add(emptyPanel);
  labelsPanel.add(passLabel);
  valuesPanel.add(uinField);
  valuesPanel.add(uinExampleLabel);
  valuesPanel.add(passField);
  uinPassPanel.add(labelsPanel,BorderLayout.WEST);
  uinPassPanel.add(valuesPanel,BorderLayout.CENTER);
  uinPassPanel.add(rememberPassBox,BorderLayout.SOUTH);
  uinPassPanel.setBorder(BorderFactory.createTitledBorder(Resources.getString("uinAndPassword")));
  mainPanel.add(uinPassPanel);
  serverField.setEnabled(false);
  serverPortField.setEnabled(false);
  proxyField.setEnabled(false);
  proxyPortField.setEnabled(false);
  transportCombo.setEnabled(false);
  enableAdvOpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      JCheckBox cb=(JCheckBox)evt.getSource();
      if (!wizard.isModification())       serverField.setEnabled(cb.isSelected());
      serverPortField.setEnabled(cb.isSelected());
      proxyField.setEnabled(cb.isSelected());
      proxyPortField.setEnabled(cb.isSelected());
      transportCombo.setEnabled(cb.isSelected());
      if (!cb.isSelected()) {
        setServerFieldAccordingToUIN();
        serverPortField.setText(DEFAULT_PORT);
        proxyPortField.setText(DEFAULT_PORT);
        transportCombo.setSelectedItem(DEFAULT_TRANSPORT);
      }
    }
  }
);
  transportCombo.setSelectedItem(DEFAULT_TRANSPORT);
  labelsAdvOpPanel.add(serverLabel);
  labelsAdvOpPanel.add(serverPortLabel);
  labelsAdvOpPanel.add(proxyLabel);
  labelsAdvOpPanel.add(proxyPortLabel);
  labelsAdvOpPanel.add(transportLabel);
  valuesAdvOpPanel.add(serverField);
  valuesAdvOpPanel.add(serverPortField);
  valuesAdvOpPanel.add(proxyField);
  valuesAdvOpPanel.add(proxyPortField);
  valuesAdvOpPanel.add(transportCombo);
  advancedOpPanel.add(enableAdvOpButton,BorderLayout.NORTH);
  advancedOpPanel.add(labelsAdvOpPanel,BorderLayout.WEST);
  advancedOpPanel.add(valuesAdvOpPanel,BorderLayout.CENTER);
  advancedOpPanel.setBorder(BorderFactory.createTitledBorder(Resources.getString("advancedOptions")));
  mainPanel.add(advancedOpPanel);
  enablePresOpButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      JCheckBox cb=(JCheckBox)evt.getSource();
      forceP2PPresOpButton.setEnabled(cb.isSelected());
      pollPeriodField.setEnabled(cb.isSelected());
      subscribeExpiresField.setEnabled(cb.isSelected());
    }
  }
);
  labelsPresOpPanel.add(pollPeriodLabel);
  labelsPresOpPanel.add(subscribeExpiresLabel);
  valuesPresOpPanel.add(pollPeriodField);
  valuesPresOpPanel.add(subscribeExpiresField);
  buttonsPresOpPanel.add(enablePresOpButton);
  buttonsPresOpPanel.add(forceP2PPresOpButton);
  presenceOpPanel.add(buttonsPresOpPanel,BorderLayout.NORTH);
  presenceOpPanel.add(labelsPresOpPanel,BorderLayout.WEST);
  presenceOpPanel.add(valuesPresOpPanel,BorderLayout.CENTER);
  presenceOpPanel.setBorder(BorderFactory.createTitledBorder(Resources.getString("presenceOptions")));
  mainPanel.add(presenceOpPanel);
  this.add(mainPanel,BorderLayout.NORTH);
}
