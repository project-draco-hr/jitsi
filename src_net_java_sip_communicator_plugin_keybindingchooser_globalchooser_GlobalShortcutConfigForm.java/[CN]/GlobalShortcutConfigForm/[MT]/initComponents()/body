{
  shortcutsTable.setRowHeight(22);
  shortcutsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  shortcutsTable.setShowHorizontalLines(false);
  shortcutsTable.setShowVerticalLines(false);
  shortcutsTable.setModel(tableModel);
  shortcutsTable.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
  shortcutsTable.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (e.getClickCount() >= 1) {
        int row=GlobalShortcutConfigForm.this.shortcutsTable.getSelectedRow();
        int column=GlobalShortcutConfigForm.this.shortcutsTable.getSelectedColumn();
        if (currentRow != -1 && currentColumn != -1)         return;
        if (row >= 0 && column >= 1) {
          currentRow=row;
          currentColumn=column;
          if (column == 1)           GlobalShortcutConfigForm.this.tableModel.getEntryAt(row).setEditShortcut1(true);
 else           if (column == 2)           GlobalShortcutConfigForm.this.tableModel.getEntryAt(row).setEditShortcut2(true);
          refresh();
          shortcutsTable.setRowSelectionInterval(row,row);
        }
      }
    }
  }
);
  shortcutsTable.addKeyListener(new KeyAdapter(){
    private KeyEvent buffer=null;
    @Override public void keyPressed(    KeyEvent event){
      if (currentRow == -1 || currentColumn == -1)       return;
      if (event.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
        GlobalShortcutEntry en=GlobalShortcutConfigForm.this.tableModel.getEntryAt(currentRow);
        List<AWTKeyStroke> kss=new ArrayList<AWTKeyStroke>();
        if (currentColumn == 1) {
          kss.add(null);
          kss.add(en.getShortcut2());
        }
 else         if (currentColumn == 2) {
          kss.add(en.getShortcut());
          kss.add(null);
        }
        currentRow=-1;
        currentColumn=-1;
        en.setShortcuts(kss);
        en.setEditShortcut1(false);
        en.setEditShortcut2(false);
        GlobalShortcutConfigForm.this.saveConfig();
        GlobalShortcutConfigForm.this.refresh();
      }
 else {
        this.buffer=event;
      }
    }
    @Override public void keyReleased(    KeyEvent event){
      if (buffer != null) {
        AWTKeyStroke input=KeyStroke.getKeyStrokeForEvent(buffer);
        buffer=null;
        if (currentRow != -1) {
          GlobalShortcutEntry en=GlobalShortcutConfigForm.this.tableModel.getEntryAt(currentRow);
          List<AWTKeyStroke> kss=new ArrayList<AWTKeyStroke>();
          if (currentColumn == 1) {
            kss.add(input);
            kss.add(en.getShortcut2());
          }
 else           if (currentColumn == 2) {
            kss.add(en.getShortcut());
            kss.add(input);
          }
 else {
            return;
          }
          currentRow=-1;
          currentColumn=-1;
          en.setShortcuts(kss);
          en.setEditShortcut1(false);
          en.setEditShortcut2(false);
          GlobalShortcutConfigForm.this.saveConfig();
          GlobalShortcutConfigForm.this.refresh();
        }
      }
    }
  }
);
  scrollPane.getViewport().add(this.shortcutsTable);
  mainPanel.add(this.scrollPane,BorderLayout.CENTER);
  mainPanel.setPreferredSize(new Dimension(500,400));
  shortcutsTable.getSelectionModel().addListSelectionListener(this);
  loadConfig();
}
