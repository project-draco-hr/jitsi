{
  try {
    File tempDir=LoggingUtilsActivator.getFileAccessService().getTemporaryDirectory();
    File newDest=new File(tempDir,LogsCollector.getDefaultFileName());
    File optionalFile=null;
    if (params != null) {
      optionalFile=new File(LoggingUtilsActivator.getFileAccessService().getTemporaryDirectory(),"description.txt");
      OutputStream out=new FileOutputStream(optionalFile);
      for (int i=0; i < params.length; i++) {
        out.write((params[i] + " : " + values[i]+ "\r\n").getBytes("UTF-8"));
      }
      out.flush();
      out.close();
    }
    newDest=LogsCollector.collectLogs(newDest,optionalFile);
    if (optionalFile != null)     optionalFile.delete();
    String uploadLocation=getUploadLocation();
    if (uploadLocation == null)     return;
    URL url=new URL(uploadLocation);
    URLConnection urlConn=url.openConnection();
    if (!(urlConn instanceof HttpURLConnection))     return;
    HttpURLConnection conn=(HttpURLConnection)urlConn;
    if (urlConn instanceof HttpsURLConnection) {
      CertificateVerificationService vs=LoggingUtilsActivator.getCertificateVerificationService();
      int port=url.getPort();
      if (port == -1) {
        if (url.getProtocol().equals("http")) {
          port=80;
        }
 else         if (url.getProtocol().equals("https")) {
          port=443;
        }
      }
      ((HttpsURLConnection)urlConn).setSSLSocketFactory(vs.getSSLContext(url.getHost(),port).getSocketFactory());
    }
    Random random=new Random();
    String boundary="---------------------------" + Long.toString(random.nextLong(),36) + Long.toString(random.nextLong(),36)+ Long.toString(random.nextLong(),36);
    conn.setDoOutput(true);
    conn.setRequestProperty("Content-Type","multipart/form-data; boundary=" + boundary);
    OutputStream out=conn.getOutputStream();
    out.write("--".getBytes());
    out.write(boundary.getBytes());
    out.write("\r\n".getBytes());
    out.write("Content-Disposition: form-data; name=\"".getBytes());
    out.write("logs".getBytes());
    out.write('"');
    out.write("; filename=\"".getBytes());
    out.write(newDest.getPath().getBytes());
    out.write('"');
    out.write("\r\n".getBytes());
    out.write("Content-Type: ".getBytes());
    String type=conn.guessContentTypeFromName(newDest.getPath());
    if (type == null)     type="application/octet-stream";
    out.write(type.getBytes());
    out.write("\r\n".getBytes());
    out.write("\r\n".getBytes());
    byte[] buf=new byte[4096];
    int nread;
    FileInputStream in=new FileInputStream(newDest);
    while ((nread=in.read(buf,0,buf.length)) >= 0) {
      out.write(buf,0,nread);
    }
    out.flush();
    buf=null;
    out.write("\r\n".getBytes());
    out.write("--".getBytes());
    out.write(boundary.getBytes());
    out.write("--".getBytes());
    out.write("\r\n".getBytes());
    out.close();
    InputStream serverInput=conn.getInputStream();
    BufferedReader input=new BufferedReader(new InputStreamReader(serverInput));
    if (logger.isDebugEnabled()) {
      logger.debug("Log files uploaded result:");
      String str;
      while ((str=input.readLine()) != null) {
        logger.debug(str);
      }
    }
    input.close();
    NotificationService notificationService=LoggingUtilsActivator.getNotificationService();
    if (notificationService != null) {
      String bodyMsgKey="plugin.loggingutils.ARCHIVE_MESSAGE_OK";
      ResourceManagementService resources=LoggingUtilsActivator.getResourceService();
      notificationService.fireNotification(LOGFILES_ARCHIVED,resources.getI18NString("plugin.loggingutils.ARCHIVE_BUTTON"),resources.getI18NString(bodyMsgKey,new String[]{uploadLocation}),null,null);
    }
  }
 catch (  Throwable e) {
    logger.error("Cannot upload file",e);
  }
}
