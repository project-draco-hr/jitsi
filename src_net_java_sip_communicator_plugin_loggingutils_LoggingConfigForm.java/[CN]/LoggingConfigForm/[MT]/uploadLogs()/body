{
  ResourceManagementService resources=LoggingUtilsActivator.getResourceService();
  final SIPCommDialog dialog=new SIPCommDialog(false){
    /** 
 * Dialog is closed. Do nothing.
 * @param escaped <tt>true</tt> if this dialog has been
 * closed by pressing
 */
    protected void close(    boolean escaped){
    }
  }
;
  dialog.setModal(true);
  dialog.setTitle(resources.getI18NString("plugin.loggingutils.UPLOAD_LOGS_BUTTON"));
  Container container=dialog.getContentPane();
  container.setLayout(new GridBagLayout());
  JLabel descriptionLabel=new JLabel("Add a comment:");
  final JTextArea commentTextArea=new JTextArea();
  commentTextArea.setRows(4);
  final JButton uploadButton=new JButton(resources.getI18NString("plugin.loggingutils.UPLOAD_BUTTON"));
  final SIPCommTextField emailField=new SIPCommTextField(resources.getI18NString("plugin.loggingutils.ARCHIVE_UPREPORT_EMAIL"));
  final JCheckBox emailCheckBox=new SIPCommCheckBox("Email me when more information is available");
  emailCheckBox.setSelected(true);
  emailCheckBox.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if (!emailCheckBox.isSelected()) {
        uploadButton.setEnabled(true);
        emailField.setEnabled(false);
      }
 else {
        emailField.setEnabled(true);
        if (emailField.getText() != null && emailField.getText().trim().length() > 0)         uploadButton.setEnabled(true);
 else         uploadButton.setEnabled(false);
      }
    }
  }
);
  emailField.getDocument().addDocumentListener(new DocumentListener(){
    public void insertUpdate(    DocumentEvent e){
      updateButtonsState();
    }
    public void removeUpdate(    DocumentEvent e){
      updateButtonsState();
    }
    public void changedUpdate(    DocumentEvent e){
    }
    /** 
 * Check whether we should enable upload button.
 */
    private void updateButtonsState(){
      if (emailCheckBox.isSelected() && emailField.getText() != null && emailField.getText().trim().length() > 0)       uploadButton.setEnabled(true);
 else       uploadButton.setEnabled(false);
    }
  }
);
  GridBagConstraints c=new GridBagConstraints();
  c.fill=GridBagConstraints.HORIZONTAL;
  c.insets=new Insets(10,10,3,10);
  c.weightx=1.0;
  c.gridx=0;
  c.gridy=0;
  container.add(descriptionLabel,c);
  c.insets=new Insets(0,10,10,10);
  c.gridy=1;
  container.add(new JScrollPane(commentTextArea),c);
  c.insets=new Insets(0,10,0,10);
  c.gridy=2;
  container.add(emailCheckBox,c);
  c.insets=new Insets(0,10,10,10);
  c.gridy=3;
  container.add(emailField,c);
  JButton cancelButton=new JButton(resources.getI18NString("service.gui.CANCEL"));
  cancelButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      dialog.dispose();
    }
  }
);
  uploadButton.setEnabled(false);
  uploadButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      try {
        final ArrayList<String> paramNames=new ArrayList<String>();
        final ArrayList<String> paramValues=new ArrayList<String>();
        if (emailCheckBox.isSelected()) {
          paramNames.add("Email");
          paramValues.add(emailField.getText());
        }
        paramNames.add("Description");
        paramValues.add(commentTextArea.getText());
        new Thread(new Runnable(){
          public void run(){
            uploadLogs(paramNames.toArray(new String[]{}),paramValues.toArray(new String[]{}));
          }
        }
).start();
      }
  finally {
        dialog.dispose();
      }
    }
  }
);
  JPanel buttonsPanel=new TransparentPanel(new FlowLayout(FlowLayout.RIGHT));
  buttonsPanel.add(uploadButton);
  buttonsPanel.add(cancelButton);
  c.anchor=GridBagConstraints.LINE_END;
  c.weightx=0;
  c.gridy=4;
  container.add(buttonsPanel,c);
  dialog.setVisible(true);
}
