{
  if (len == 0)   return 0;
  int samplesNumber=len / 2;
  int absoluteMeanSoundLevel=0;
  for (int i=0; i < samplesNumber; i++) {
    int tempL=buff[offset++];
    int tempH=buff[offset++];
    int soundLevel=tempH << 8 | (tempL & 255);
    if (soundLevel > MAX_SOUND_LEVEL) {
      soundLevel=MAX_SOUND_LEVEL;
    }
 else     if (soundLevel < MIN_SOUND_LEVEL) {
      soundLevel=MIN_SOUND_LEVEL;
    }
    absoluteMeanSoundLevel+=Math.abs(soundLevel);
  }
  int result=(int)(absoluteMeanSoundLevel / samplesNumber / levelRatio);
  if (result > maxOutLevel)   result=maxOutLevel;
  int result2=result;
  int diff=lastLevel - result;
  if (diff >= 0) {
    int maxDiff=(int)(maxOutLevel * DEC_LEVEL);
    if (diff > maxDiff)     result2=lastLevel - maxDiff;
 else     result2=result;
  }
 else {
    int maxDiff=(int)(maxOutLevel * INC_LEVEL);
    if (diff > maxDiff)     result2=lastLevel + maxDiff;
 else     result2=result;
  }
  return result2;
}
