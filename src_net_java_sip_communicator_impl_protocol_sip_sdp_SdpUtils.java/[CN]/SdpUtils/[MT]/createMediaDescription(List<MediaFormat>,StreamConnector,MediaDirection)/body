{
  int[] payloadTypesArray=new int[formats.size()];
  Vector<Attribute> mediaAttributes=new Vector<Attribute>(2 * payloadTypesArray.length + 1);
  MediaType mediaType=null;
  mediaAttributes.add(createDirectionAttribute(direction));
  for (int i=0; i < payloadTypesArray.length; i++) {
    MediaFormat format=formats.get(i);
    MediaType fmtMediaType=format.getMediaType();
    if (mediaType != null) {
      mediaType=fmtMediaType;
    }
    int payloadType=formats.get(i).getRTPPayloadType();
    if (payloadType == MediaFormat.RTP_PAYLOAD_TYPE_UNKNOWN) {
    }
    String numChannelsStr="";
    if (format instanceof AudioMediaFormat) {
      int channels=((AudioMediaFormat)format).getChannels();
      if (channels > 1)       numChannelsStr="/" + channels;
    }
    Attribute rtpmap=sdpFactory.createAttribute(SdpConstants.RTPMAP,payloadType + " " + format.getEncoding()+ "/"+ format.getClockRate()+ numChannelsStr);
    mediaAttributes.add(rtpmap);
    Attribute fmtp=sdpFactory.createAttribute(SdpConstants.FMTP + ":" + payloadType,encodeFmtp(format));
    mediaAttributes.add(fmtp);
    payloadTypesArray[i]=payloadType;
  }
  int rtpPort=connector.getDataSocket().getLocalPort();
  int rtcpPort=connector.getControlSocket().getLocalPort();
  if ((rtpPort + 1) != rtcpPort) {
    Attribute rtcpAttr=sdpFactory.createAttribute("rtcp:",Integer.toString(rtcpPort));
    mediaAttributes.add(rtcpAttr);
  }
  MediaDescription mediaDesc=null;
  try {
    mediaDesc=sdpFactory.createMediaDescription(mediaType.name(),connector.getDataSocket().getLocalPort(),1,SdpConstants.RTP_AVP,payloadTypesArray);
    mediaDesc.setAttributes(mediaAttributes);
  }
 catch (  Exception cause) {
    ProtocolProviderServiceSipImpl.throwOperationFailedException("Failed to create a media description",OperationFailedException.INTERNAL_ERROR,cause,logger);
  }
  return mediaDesc;
}
