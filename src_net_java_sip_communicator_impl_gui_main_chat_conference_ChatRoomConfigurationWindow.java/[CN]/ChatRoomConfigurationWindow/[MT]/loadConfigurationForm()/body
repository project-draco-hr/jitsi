{
  Iterator<ChatRoomConfigurationFormField> configurationSet=configForm.getConfigurationSet();
  while (configurationSet.hasNext()) {
    ChatRoomConfigurationFormField formField=configurationSet.next();
    Iterator<?> values=formField.getValues();
    Iterator<String> options=formField.getOptions();
    JComponent field;
    JLabel label=new JLabel("",JLabel.RIGHT);
    if (formField.getLabel() != null)     label.setText(formField.getLabel() + ": ");
    String fieldType=formField.getType();
    if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_BOOLEAN)) {
      field=new SIPCommCheckBox(formField.getLabel());
      if (values.hasNext()) {
        ((JCheckBox)field).setSelected((Boolean)values.next());
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_FIXED)) {
      field=new JLabel();
      if (values.hasNext()) {
        String value=values.next().toString();
        ((JLabel)field).setText(value);
        field.setFont(new Font(null,Font.ITALIC,10));
        field.setForeground(Color.GRAY);
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_LIST_MULTI)) {
      field=new TransparentPanel(new GridLayout(0,1));
      field.setBorder(BorderFactory.createLineBorder(Color.GRAY));
      Hashtable<Object,JCheckBox> optionCheckBoxes=new Hashtable<Object,JCheckBox>();
      while (options.hasNext()) {
        Object option=options.next();
        JCheckBox checkBox=new SIPCommCheckBox(option.toString());
        field.add(checkBox);
        optionCheckBoxes.put(option,checkBox);
      }
      while (values.hasNext()) {
        Object value=values.next();
        (optionCheckBoxes.get(value)).setSelected(true);
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_LIST_SINGLE)) {
      field=new JComboBox();
      while (options.hasNext()) {
        ((JComboBox)field).addItem(options.next());
      }
      if (values.hasNext()) {
        ((JComboBox)field).setSelectedItem(values.next());
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_MULTI)) {
      field=new JEditorPane();
      if (values.hasNext()) {
        String value=values.next().toString();
        ((JEditorPane)field).setText(value);
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_SINGLE) || fieldType.equals(ChatRoomConfigurationFormField.TYPE_ID_SINGLE)) {
      field=new JTextField();
      if (values.hasNext()) {
        String value=values.next().toString();
        ((JTextField)field).setText(value);
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_PRIVATE)) {
      field=new JPasswordField();
      if (values.hasNext()) {
        String value=values.next().toString();
        ((JPasswordField)field).setText(value);
      }
    }
 else     if (fieldType.equals(ChatRoomConfigurationFormField.TYPE_ID_MULTI)) {
      StringBuffer buff=new StringBuffer();
      while (values.hasNext()) {
        String value=values.next().toString();
        buff.append(value);
        if (values.hasNext())         buff.append(System.getProperty("line.separator"));
      }
      field=new JTextArea(buff.toString());
    }
 else {
      if (label.getText() == null)       continue;
      field=new JTextField();
      if (values.hasNext()) {
        String value=values.next().toString();
        ((JTextField)field).setText(value);
      }
    }
    if (!fieldType.equals(ChatRoomConfigurationFormField.TYPE_TEXT_FIXED)) {
      uiFieldsTable.put(formField.getName(),field);
    }
    JPanel fieldPanel=new TransparentPanel(new GridLayout(1,2));
    fieldPanel.setOpaque(false);
    if (!(field instanceof JLabel))     fieldPanel.setBorder(BorderFactory.createEmptyBorder(0,0,8,0));
 else     fieldPanel.setBorder(BorderFactory.createEmptyBorder(0,0,1,0));
    fieldPanel.add(label);
    fieldPanel.add(field);
    this.mainPanel.add(fieldPanel);
  }
}
