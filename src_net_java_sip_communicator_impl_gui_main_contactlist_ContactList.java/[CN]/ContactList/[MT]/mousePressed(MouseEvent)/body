{
  this.requestFocus();
  draggedElement=null;
  if ((e.getModifiers() & InputEvent.BUTTON2_MASK) != 0 || (e.getModifiers() & InputEvent.BUTTON3_MASK) != 0 || (e.isControlDown() && !e.isMetaDown())) {
    this.setSelectedIndex(locationToIndex(e.getPoint()));
  }
  int selectedIndex=this.getSelectedIndex();
  Object selectedValue=this.getSelectedValue();
  ContactListCellRenderer renderer=(ContactListCellRenderer)this.getCellRenderer().getListCellRendererComponent(this,selectedValue,selectedIndex,true,true);
  Point selectedCellPoint=this.indexToLocation(selectedIndex);
  int translatedX=e.getX() - selectedCellPoint.x;
  if (selectedValue instanceof MetaContact && (e.getModifiers() & InputEvent.BUTTON1_MASK) != 0) {
    MetaContact mContact=(MetaContact)selectedValue;
    Component component=this.getHorizontalComponent(renderer,translatedX);
    if (component instanceof JLabel) {
      Image image=new BufferedImage(component.getWidth(),component.getHeight(),BufferedImage.TYPE_INT_ARGB);
      Graphics g=image.getGraphics();
      g.setColor(getBackground());
      g.fillRect(0,0,image.getWidth(null),image.getHeight(null));
      component.paint(image.getGraphics());
      draggedElement=new ContactListDraggable(this,mContact,null,image);
    }
 else     if (component instanceof JPanel) {
      if (component.getName() != null && component.getName().equals("buttonsPanel")) {
        JPanel panel=(JPanel)component;
        int internalX=translatedX - (renderer.getWidth() - panel.getWidth() - 2);
        Component c=getHorizontalComponent(panel,internalX);
        if (c instanceof ContactProtocolButton) {
          ContactProtocolButton cb=(ContactProtocolButton)c;
          draggedElement=new ContactListDraggable(this,mContact,cb.getProtocolContact(),cb.getBgImage());
        }
      }
    }
  }
  if (draggedElement != null) {
    mainFrame.setGlassPane(draggedElement);
    Point p=(Point)e.getPoint().clone();
    p=SwingUtilities.convertPoint(e.getComponent(),p,draggedElement);
    draggedElement.setLocation(p);
  }
}
