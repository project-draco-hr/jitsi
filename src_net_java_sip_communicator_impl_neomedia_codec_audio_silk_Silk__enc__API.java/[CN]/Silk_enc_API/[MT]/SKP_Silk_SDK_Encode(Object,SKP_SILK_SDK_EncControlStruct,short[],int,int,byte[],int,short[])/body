{
  int max_internal_fs_kHz, PacketSize_ms, PacketLoss_perc, UseInBandFEC, UseDTX, ret=0;
  int nSamplesToBuffer, Complexity, input_ms, nSamplesFromInput=0;
  int TargetRate_bps, API_fs_Hz;
  short MaxBytesOut;
  SKP_Silk_encoder_state_FLP psEnc=(SKP_Silk_encoder_state_FLP)encState;
  assert(encControl != null);
  if (((encControl.API_sampleRate != 8000) && (encControl.API_sampleRate != 12000) && (encControl.API_sampleRate != 16000)&& (encControl.API_sampleRate != 24000)&& (encControl.API_sampleRate != 32000)&& (encControl.API_sampleRate != 44100)&& (encControl.API_sampleRate != 48000)) || ((encControl.maxInternalSampleRate != 8000) && (encControl.maxInternalSampleRate != 12000) && (encControl.maxInternalSampleRate != 16000)&& (encControl.maxInternalSampleRate != 24000))) {
    ret=Silk_errors.SKP_SILK_ENC_FS_NOT_SUPPORTED;
    assert(false);
    return (ret);
  }
  API_fs_Hz=encControl.API_sampleRate;
  max_internal_fs_kHz=(int)encControl.maxInternalSampleRate / 1000;
  PacketSize_ms=1000 * (int)encControl.packetSize / API_fs_Hz;
  TargetRate_bps=(int)encControl.bitRate;
  PacketLoss_perc=(int)encControl.packetLossPercentage;
  UseInBandFEC=(int)encControl.useInBandFEC;
  Complexity=(int)encControl.complexity;
  UseDTX=(int)encControl.useDTX;
  psEnc.sCmn.API_fs_Hz=API_fs_Hz;
  psEnc.sCmn.maxInternal_fs_kHz=max_internal_fs_kHz;
  psEnc.sCmn.useInBandFEC=UseInBandFEC;
  input_ms=1000 * nSamplesIn / API_fs_Hz;
  if ((input_ms % 10) != 0 || nSamplesIn < 0) {
    ret=Silk_errors.SKP_SILK_ENC_INPUT_INVALID_NO_OF_SAMPLES;
    assert(false);
    return (ret);
  }
  if (nSamplesIn > (int)(psEnc.sCmn.PacketSize_ms * API_fs_Hz / 1000)) {
    ret=Silk_errors.SKP_SILK_ENC_INPUT_INVALID_NO_OF_SAMPLES;
    assert(false);
    return (ret);
  }
  if ((ret=Silk_control_codec_FLP.SKP_Silk_control_encoder_FLP(psEnc,API_fs_Hz,max_internal_fs_kHz,PacketSize_ms,TargetRate_bps,PacketLoss_perc,UseInBandFEC,UseDTX,input_ms,Complexity)) != 0) {
    assert(false);
    return (ret);
  }
  if (Math.min(API_fs_Hz,1000 * max_internal_fs_kHz) == 24000 && psEnc.sCmn.sSWBdetect.SWB_detected == 0 && psEnc.sCmn.sSWBdetect.WB_detected == 0) {
    Silk_detect_SWB_input.SKP_Silk_detect_SWB_input(psEnc.sCmn.sSWBdetect,samplesIn,samplesIn_offset,(int)nSamplesIn);
  }
  MaxBytesOut=0;
  while (true) {
    nSamplesToBuffer=psEnc.sCmn.frame_length - psEnc.sCmn.inputBufIx;
    if (API_fs_Hz == Silk_macros.SKP_SMULBB(1000,psEnc.sCmn.fs_kHz)) {
      nSamplesToBuffer=Math.min(nSamplesToBuffer,nSamplesIn);
      nSamplesFromInput=nSamplesToBuffer;
      System.arraycopy(samplesIn,samplesIn_offset,psEnc.sCmn.inputBuf,psEnc.sCmn.inputBufIx,nSamplesFromInput);
    }
 else {
      nSamplesToBuffer=Math.min(nSamplesToBuffer,(int)nSamplesIn * psEnc.sCmn.fs_kHz * 1000 / API_fs_Hz);
      nSamplesFromInput=(int)(nSamplesToBuffer * API_fs_Hz / (psEnc.sCmn.fs_kHz * 1000));
      ret+=Silk_resampler.SKP_Silk_resampler(psEnc.sCmn.resampler_state,psEnc.sCmn.inputBuf,psEnc.sCmn.inputBufIx,samplesIn,samplesIn_offset,nSamplesFromInput);
    }
    samplesIn_offset+=nSamplesFromInput;
    nSamplesIn-=nSamplesFromInput;
    psEnc.sCmn.inputBufIx+=nSamplesToBuffer;
    if (psEnc.sCmn.inputBufIx >= psEnc.sCmn.frame_length) {
      if (MaxBytesOut == 0) {
        MaxBytesOut=nBytesOut[0];
        short MaxBytesOut_ptr[]=new short[1];
        MaxBytesOut_ptr[0]=MaxBytesOut;
        if ((ret=Silk_encode_frame_FLP.SKP_Silk_encode_frame_FLP(psEnc,outData,outData_offset,MaxBytesOut_ptr,psEnc.sCmn.inputBuf,0)) != 0) {
          assert(false);
        }
        MaxBytesOut=MaxBytesOut_ptr[0];
      }
 else {
        if ((ret=Silk_encode_frame_FLP.SKP_Silk_encode_frame_FLP(psEnc,outData,outData_offset,nBytesOut,psEnc.sCmn.inputBuf,0)) != 0) {
          assert(false);
        }
        assert(nBytesOut[0] == 0);
      }
      psEnc.sCmn.inputBufIx=0;
    }
 else {
      break;
    }
  }
  nBytesOut[0]=MaxBytesOut;
  if (psEnc.sCmn.useDTX != 0 && psEnc.sCmn.inDTX != 0) {
    nBytesOut[0]=0;
  }
  return ret;
}
