{
  logger.debug("Testing Subscription and Subscription Event Dispatch.");
  logger.trace("set Auth Handlers");
  operationSetPresence1.setAuthorizationHandler(authEventCollector1);
  operationSetPresence2.setAuthorizationHandler(authEventCollector2);
  authEventCollector2.responseToRequest=new AuthorizationResponse(AuthorizationResponse.REJECT,null);
  operationSetPresence1.subscribe(fixture.userID2);
  authEventCollector2.waitForAuthRequest(10000);
  assertTrue("Error authorization request not received from " + fixture.userID2,authEventCollector2.isAuthorizationRequestReceived);
  authEventCollector1.waitForAuthResponse(10000);
  assertTrue("Error authorization reply not received from " + fixture.userID1,authEventCollector1.isAuthorizationResponseReceived);
  assertEquals("Error received authorization reply not as expected",authEventCollector2.responseToRequest.getResponseCode(),authEventCollector1.response.getResponseCode());
  pauseAfterStateChanges();
  SubscriptionEventCollector subEvtCollector=new SubscriptionEventCollector();
  operationSetPresence1.addSubscriptionListener(subEvtCollector);
  authEventCollector2.responseToRequest=new AuthorizationResponse(AuthorizationResponse.ACCEPT,null);
  authEventCollector2.isAuthorizationRequestReceived=false;
  authEventCollector1.isAuthorizationResponseReceived=false;
  operationSetPresence1.subscribe(fixture.userID2);
  authEventCollector2.waitForAuthRequest(10000);
  assertTrue("Error authorization request not received from " + fixture.userID2,authEventCollector2.isAuthorizationRequestReceived);
  authEventCollector1.waitForAuthResponse(10000);
  assertTrue("Error authorization reply not received from " + fixture.userID1,authEventCollector1.isAuthorizationResponseReceived);
  assertEquals("Error received authorization reply not as expected",authEventCollector2.responseToRequest.getResponseCode(),authEventCollector1.response.getResponseCode());
  authEventCollector1.responseToRequest=new AuthorizationResponse(AuthorizationResponse.ACCEPT,null);
  authEventCollector2.responseToRequest=new AuthorizationResponse(AuthorizationResponse.ACCEPT,null);
  operationSetPresence1.removeSubscriptionListener(subEvtCollector);
  assertEquals("Subscription event dispatching failed.",1,subEvtCollector.collectedEvents.size());
  SubscriptionEvent subEvt=(SubscriptionEvent)subEvtCollector.collectedEvents.get(0);
  assertEquals("SubscriptionEvent Source:",fixture.userID2,((Contact)subEvt.getSource()).getAddress());
  assertEquals("SubscriptionEvent Source Contact:",fixture.userID2,subEvt.getSourceContact().getAddress());
  assertSame("SubscriptionEvent Source Provider:",fixture.provider1,subEvt.getSourceProvider());
  subEvtCollector.collectedEvents.clear();
  logger.debug("Testing presence notifications.");
  PresenceStatus oldStatus=operationSetPresence2.getPresenceStatus();
  PresenceStatus newStatus=getSampleStatus1();
  if (oldStatus.equals(newStatus)) {
    newStatus=getSampleStatus2();
  }
  ContactPresenceEventCollector contactPresEvtCollector=new ContactPresenceEventCollector(fixture.userID2,newStatus);
  operationSetPresence1.addContactPresenceStatusListener(contactPresEvtCollector);
synchronized (contactPresEvtCollector) {
    operationSetPresence2.publishPresenceStatus(newStatus,"new status");
    contactPresEvtCollector.waitForEvent(2000);
    operationSetPresence1.removeContactPresenceStatusListener(contactPresEvtCollector);
  }
  assertEquals("Presence Notif. event dispatching failed. List is " + contactPresEvtCollector.collectedEvents,1,contactPresEvtCollector.collectedEvents.size());
  ContactPresenceStatusChangeEvent presEvt=(ContactPresenceStatusChangeEvent)contactPresEvtCollector.collectedEvents.get(0);
  assertEquals("Presence Notif. event  Source:",fixture.userID2,((Contact)presEvt.getSource()).getAddress());
  assertEquals("Presence Notif. event  Source Contact:",fixture.userID2,presEvt.getSourceContact().getAddress());
  assertSame("Presence Notif. event  Source Provider:",fixture.provider1,presEvt.getSourceProvider());
  PresenceStatus reportedNewStatus=presEvt.getNewStatus();
  PresenceStatus reportedOldStatus=presEvt.getOldStatus();
  assertEquals("Reported new PresenceStatus: ",newStatus,reportedNewStatus);
  assertNotNull("Reported old PresenceStatus: ",reportedOldStatus);
}
