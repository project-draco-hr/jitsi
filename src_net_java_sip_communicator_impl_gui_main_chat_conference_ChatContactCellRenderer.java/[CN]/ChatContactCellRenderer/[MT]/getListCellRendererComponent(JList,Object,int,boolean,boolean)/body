{
  this.index=index;
  this.rightLabel.setIcon(null);
  final ChatContact<?> chatContact=(ChatContact<?>)value;
  if (chatContact == null)   return this;
  ChatRoomMember member=null;
  if (chatContact.getDescriptor() instanceof ChatRoomMember)   member=(ChatRoomMember)chatContact.getDescriptor();
  this.setPreferredSize(new Dimension(20,30));
  String displayName;
  displayName=chatContact.getName();
  if (displayName == null || displayName.length() < 1) {
    displayName=GuiActivator.getResources().getI18NString("service.gui.UNKNOWN");
  }
  this.nameLabel.setFont(this.getFont().deriveFont(Font.PLAIN));
  this.nameLabel.setText(displayName);
  if (member != null) {
    ChatRoomMemberRole memberRole=member.getRole();
    if (memberRole != null)     this.nameLabel.setIcon(ChatContactRoleIcon.getRoleIcon(memberRole));
    final int presenceStatus=member.getPresenceStatus().getStatus();
    if (presenceStatus >= PresenceStatus.AVAILABLE_THRESHOLD) {
      this.nameLabel.setForeground(COLOR_AVAILABILITY_THRESHOLD);
    }
 else     if (presenceStatus >= PresenceStatus.AWAY_THRESHOLD) {
      this.nameLabel.setForeground(COLOR_AWAY_THRESHOLD);
    }
  }
 else   if (contactForegroundColor != null)   this.nameLabel.setForeground(contactForegroundColor);
  this.setBorder(BorderFactory.createEmptyBorder(1,5,1,1));
  ImageIcon avatar=chatContact.getAvatar();
  if (avatar != null)   this.rightLabel.setIcon(avatar);
 else   if (member != null) {
    ChatRoom memberChatRoom=member.getChatRoom();
    ProtocolProviderService protocolProvider=memberChatRoom.getParentProvider();
    if (chatContact.getName().equals(memberChatRoom.getUserNickname())) {
      OperationSetServerStoredAccountInfo opSet=protocolProvider.getOperationSet(OperationSetServerStoredAccountInfo.class);
      if (opSet != null) {
        Iterator<GenericDetail> itr;
        try {
          itr=opSet.getAllAvailableDetails();
        }
 catch (        IllegalStateException isex) {
          itr=null;
        }
        if (itr != null)         while (itr.hasNext()) {
          GenericDetail detail=itr.next();
          if (detail instanceof BinaryDetail) {
            BinaryDetail bin=(BinaryDetail)detail;
            byte[] binBytes=bin.getBytes();
            if (binBytes != null)             this.rightLabel.setIcon(ImageUtils.getScaledRoundedIcon(binBytes,25,25));
            break;
          }
        }
      }
      ChatRoomMemberRole role;
      try {
        role=memberChatRoom.getUserRole();
      }
 catch (      UnsupportedOperationException uoex) {
        role=member.getRole();
      }
      if (role != null)       this.nameLabel.setIcon(ChatContactRoleIcon.getRoleIcon(role));
    }
 else {
      OperationSetPersistentPresence opSet=protocolProvider.getOperationSet(OperationSetPersistentPresence.class);
      if (opSet != null) {
        Contact c=opSet.findContactByID(member.getContactAddress());
        if (c != null) {
          byte[] cImage=c.getImage();
          if (cImage != null)           this.rightLabel.setIcon(ImageUtils.getScaledRoundedIcon(cImage,25,25));
        }
      }
    }
  }
  int listWidth=list.getWidth();
  this.setBounds(0,0,listWidth - 2,30);
  this.nameLabel.setBounds(0,0,listWidth - 28,17);
  this.rightLabel.setBounds(listWidth - 28,0,25,30);
  this.isLeaf=true;
  this.isSelected=isSelected;
  return this;
}
