{
  if (!checkInputBuffer(inputBuffer)) {
    return BUFFER_PROCESSED_FAILED;
  }
  if (isEOM(inputBuffer)) {
    propagateEOM(outputBuffer);
    return BUFFER_PROCESSED_OK;
  }
  Format newFormat=inputBuffer.getFormat();
  if (lastFormat != newFormat) {
    initConverter((AudioFormat)newFormat);
  }
  int inpLength=inputBuffer.getLength();
  byte[] inpData=(byte[])inputBuffer.getData();
  int inOffset=inputBuffer.getOffset();
  if (inpLength == 0) {
    return OUTPUT_BUFFER_NOT_FILLED;
  }
  if ((inpLength - inOffset) >= FRAME_SIZE) {
    encoder.processData(inpData,inOffset,FRAME_SIZE);
    byte[] buff=new byte[encoder.getProcessedDataByteSize()];
    encoder.getProcessedData(buff,0);
    Object outData=outputBuffer.getData();
    byte[] out;
    if (outData instanceof byte[]) {
      out=(byte[])outData;
      if (out.length < buff.length)       out=null;
    }
 else     out=null;
    if (out == null)     out=new byte[buff.length];
    System.arraycopy(buff,0,out,outputBuffer.getOffset(),buff.length);
    outputBuffer.setData(out);
    outputBuffer.setLength(out.length);
    outputBuffer.setOffset(0);
    outputBuffer.setFormat(outFormat);
    if ((inpLength - inOffset) > FRAME_SIZE) {
      inputBuffer.setOffset(inOffset + FRAME_SIZE);
      return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;
    }
 else {
      return BUFFER_PROCESSED_OK;
    }
  }
 else {
    return OUTPUT_BUFFER_NOT_FILLED;
  }
}
