{
  if (src.length() == 0) {
    return null;
  }
  byte[] res=new byte[INADDR4SZ];
  String[] s=src.split("\\.",-1);
  long val;
  try {
switch (s.length) {
case 1:
      val=Long.parseLong(s[0]);
    if (val < 0 || val > 0xffffffffL)     return null;
  res[0]=(byte)((val >> 24) & 0xff);
res[1]=(byte)(((val & 0xffffff) >> 16) & 0xff);
res[2]=(byte)(((val & 0xffff) >> 8) & 0xff);
res[3]=(byte)(val & 0xff);
break;
case 2:
val=Integer.parseInt(s[0]);
if (val < 0 || val > 0xff) return null;
res[0]=(byte)(val & 0xff);
val=Integer.parseInt(s[1]);
if (val < 0 || val > 0xffffff) return null;
res[1]=(byte)((val >> 16) & 0xff);
res[2]=(byte)(((val & 0xffff) >> 8) & 0xff);
res[3]=(byte)(val & 0xff);
break;
case 3:
for (int i=0; i < 2; i++) {
val=Integer.parseInt(s[i]);
if (val < 0 || val > 0xff) return null;
res[i]=(byte)(val & 0xff);
}
val=Integer.parseInt(s[2]);
if (val < 0 || val > 0xffff) return null;
res[2]=(byte)((val >> 8) & 0xff);
res[3]=(byte)(val & 0xff);
break;
case 4:
for (int i=0; i < 4; i++) {
val=Integer.parseInt(s[i]);
if (val < 0 || val > 0xff) return null;
res[i]=(byte)(val & 0xff);
}
break;
default :
return null;
}
}
 catch (NumberFormatException e) {
return null;
}
return res;
}
