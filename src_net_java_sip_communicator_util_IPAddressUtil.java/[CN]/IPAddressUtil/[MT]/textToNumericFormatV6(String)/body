{
  if (src.length() < 2) {
    return null;
  }
  int colonp;
  char ch;
  boolean saw_xdigit;
  int val;
  char[] srcb=src.toCharArray();
  byte[] dst=new byte[INADDR16SZ];
  int srcb_length=srcb.length;
  int pc=src.indexOf("%");
  if (pc == srcb_length - 1) {
    return null;
  }
  if (pc != -1) {
    srcb_length=pc;
  }
  colonp=-1;
  int i=0, j=0;
  if (srcb[i] == ':')   if (srcb[++i] != ':')   return null;
  int curtok=i;
  saw_xdigit=false;
  val=0;
  while (i < srcb_length) {
    ch=srcb[i++];
    int chval=Character.digit(ch,16);
    if (chval != -1) {
      val<<=4;
      val|=chval;
      if (val > 0xffff)       return null;
      saw_xdigit=true;
      continue;
    }
    if (ch == ':') {
      curtok=i;
      if (!saw_xdigit) {
        if (colonp != -1)         return null;
        colonp=j;
        continue;
      }
 else       if (i == srcb_length) {
        return null;
      }
      if (j + INT16SZ > INADDR16SZ)       return null;
      dst[j++]=(byte)((val >> 8) & 0xff);
      dst[j++]=(byte)(val & 0xff);
      saw_xdigit=false;
      val=0;
      continue;
    }
    if (ch == '.' && ((j + INADDR4SZ) <= INADDR16SZ)) {
      String ia4=src.substring(curtok,srcb_length);
      int dot_count=0, index=0;
      while ((index=ia4.indexOf('.',index)) != -1) {
        dot_count++;
        index++;
      }
      if (dot_count != 3) {
        return null;
      }
      byte[] v4addr=textToNumericFormatV4(ia4);
      if (v4addr == null) {
        return null;
      }
      for (int k=0; k < INADDR4SZ; k++) {
        dst[j++]=v4addr[k];
      }
      saw_xdigit=false;
      break;
    }
    return null;
  }
  if (saw_xdigit) {
    if (j + INT16SZ > INADDR16SZ)     return null;
    dst[j++]=(byte)((val >> 8) & 0xff);
    dst[j++]=(byte)(val & 0xff);
  }
  if (colonp != -1) {
    int n=j - colonp;
    if (j == INADDR16SZ)     return null;
    for (i=1; i <= n; i++) {
      dst[INADDR16SZ - i]=dst[colonp + n - i];
      dst[colonp + n - i]=0;
    }
    j=INADDR16SZ;
  }
  if (j != INADDR16SZ)   return null;
  byte[] newdst=convertFromIPv4MappedAddress(dst);
  if (newdst != null) {
    return newdst;
  }
 else {
    return dst;
  }
}
