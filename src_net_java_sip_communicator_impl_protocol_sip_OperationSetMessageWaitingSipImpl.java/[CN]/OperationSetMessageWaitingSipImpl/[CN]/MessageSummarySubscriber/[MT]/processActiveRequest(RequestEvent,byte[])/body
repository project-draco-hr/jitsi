{
  if (rawContent == null || rawContent.length <= 0)   return;
  try {
    String messageAccount=null;
    BufferedReader input=new BufferedReader(new InputStreamReader(new ByteArrayInputStream(rawContent)));
    String line;
    while ((line=input.readLine()) != null) {
      String lcaseLine=line.toLowerCase();
      if (lcaseLine.startsWith("messages-waiting")) {
      }
 else       if (lcaseLine.startsWith("message-account")) {
        messageAccount=line.substring(line.indexOf(":") + 1).trim();
      }
 else       if (lcaseLine.startsWith(MessageType.VOICE.toString()) || lcaseLine.startsWith(MessageType.FAX.toString()) || lcaseLine.startsWith(MessageType.MULTIMEDIA.toString())|| lcaseLine.startsWith(MessageType.PAGER.toString())|| lcaseLine.startsWith(MessageType.TEXT.toString())|| lcaseLine.startsWith(MessageType.NONE.toString())) {
        String msgType=lcaseLine.substring(0,line.indexOf(":")).trim();
        String messagesCountValue=line.substring(line.indexOf(":") + 1).trim();
        Matcher matcher=messageWaitingCountPattern.matcher(messagesCountValue);
        if (matcher.find()) {
          fireVoicemailNotificationEvent(msgType,messageAccount,Integer.valueOf(matcher.group(1)),Integer.valueOf(matcher.group(2)),Integer.valueOf(matcher.group(3)),Integer.valueOf(matcher.group(4)));
        }
      }
    }
  }
 catch (  IOException ex) {
    logger.error("Error processing message waiting info");
  }
}
