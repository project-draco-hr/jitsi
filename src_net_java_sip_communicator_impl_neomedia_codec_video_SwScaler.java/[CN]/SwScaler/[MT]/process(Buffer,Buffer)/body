{
  VideoFormat vinput=(VideoFormat)input.getFormat();
  VideoFormat voutput=(VideoFormat)output.getFormat();
  int inputWidth=(int)vinput.getSize().getWidth();
  int inputHeight=(int)vinput.getSize().getHeight();
  Object src=input.getData();
  Object dst=output.getData();
  int outputSize=0;
  int outputWidth=0;
  int outputHeight=0;
  int infmt=0;
  int outfmt=0;
  if (voutput == null) {
    voutput=(VideoFormat)outputFormat;
    return BUFFER_PROCESSED_FAILED;
  }
  outputWidth=(int)voutput.getSize().getWidth();
  outputHeight=(int)voutput.getSize().getHeight();
  if (!checkInputBuffer(input)) {
    return BUFFER_PROCESSED_FAILED;
  }
  if (isEOM(input)) {
    propagateEOM(output);
    return BUFFER_PROCESSED_OK;
  }
  if (voutput instanceof YUVFormat) {
    outputSize=(int)(outputWidth * outputHeight * 1.5);
    outfmt=FFMPEG.PIX_FMT_YUV420P;
  }
 else {
    outputSize=(outputWidth * outputHeight * 4);
    if (((RGBFormat)voutput).getBitsPerPixel() == 32) {
      outfmt=FFMPEG.PIX_FMT_RGBA;
    }
 else {
      outfmt=FFMPEG.PIX_FMT_RGB24;
    }
  }
  if (vinput instanceof YUVFormat) {
    infmt=FFMPEG.PIX_FMT_YUV420P;
  }
 else {
    if (((RGBFormat)vinput).getBitsPerPixel() == 32) {
      infmt=FFMPEG.PIX_FMT_RGBA;
    }
 else {
      infmt=FFMPEG.PIX_FMT_RGB24;
    }
  }
  if (voutput.getDataType() == Format.byteArray) {
    if (dst == null || ((byte[])dst).length < outputSize) {
      dst=new byte[outputSize];
    }
  }
 else   if (voutput.getDataType() == Format.intArray) {
    outputSize=(outputSize % 4) + outputSize / 4;
    if (dst == null || ((int[])dst).length < outputSize) {
      dst=new int[outputSize];
    }
  }
 else   if (voutput.getDataType() == Format.shortArray) {
    outputSize=(outputSize % 2) + outputSize / 2;
    if (dst == null || ((short[])dst).length < outputSize) {
      dst=new short[outputSize];
    }
  }
 else {
    System.out.println("Unknown data type!");
    return BUFFER_PROCESSED_FAILED;
  }
synchronized (src) {
    FFMPEG.img_convert(dst,outfmt,src,infmt,inputWidth,inputHeight,outputWidth,outputHeight);
  }
  output.setData(dst);
  output.setLength(outputSize);
  output.setOffset(0);
  return BUFFER_PROCESSED_OK;
}
