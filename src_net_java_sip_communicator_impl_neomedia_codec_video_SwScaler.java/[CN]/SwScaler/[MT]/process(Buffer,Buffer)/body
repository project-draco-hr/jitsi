{
  if (!checkInputBuffer(input))   return BUFFER_PROCESSED_FAILED;
  if (isEOM(input)) {
    propagateEOM(output);
    return BUFFER_PROCESSED_OK;
  }
  if (input.isDiscard() || frameProcessingControl.isMinimalProcessing()) {
    output.setDiscard(true);
    return BUFFER_PROCESSED_OK;
  }
  VideoFormat inputFormat=(VideoFormat)input.getFormat();
  Format thisInputFormat=getInputFormat();
  if ((inputFormat != thisInputFormat) && !inputFormat.equals(thisInputFormat))   setInputFormat(inputFormat);
  int srcFmt;
  if (inputFormat instanceof YUVFormat)   srcFmt=FFMPEG.PIX_FMT_YUV420P;
 else   srcFmt=getNativeRGBFormat((RGBFormat)inputFormat);
  VideoFormat outputFormat=(VideoFormat)getOutputFormat();
  if (outputFormat == null) {
    outputFormat=(VideoFormat)output.getFormat();
    if (outputFormat == null)     return BUFFER_PROCESSED_FAILED;
  }
  int dstFmt;
  int dstLength;
  Dimension outputSize=outputFormat.getSize();
  int outputWidth=outputSize.width;
  int outputHeight=outputSize.height;
  if (outputFormat instanceof YUVFormat) {
    dstFmt=FFMPEG.PIX_FMT_YUV420P;
    dstLength=(int)(outputWidth * outputHeight * 1.5);
  }
 else {
    dstFmt=FFMPEG.PIX_FMT_RGB32;
    dstLength=(outputWidth * outputHeight * 4);
  }
  Class<?> outputDataType=outputFormat.getDataType();
  Object dst=output.getData();
  if (Format.byteArray.equals(outputDataType)) {
    if (dst == null || ((byte[])dst).length < dstLength)     dst=new byte[dstLength];
  }
 else   if (Format.intArray.equals(outputDataType)) {
    dstLength=(dstLength % 4) + dstLength / 4;
    if (dst == null || ((int[])dst).length < dstLength)     dst=new int[dstLength];
  }
 else   if (Format.shortArray.equals(outputDataType)) {
    dstLength=(dstLength % 2) + dstLength / 2;
    if (dst == null || ((short[])dst).length < dstLength)     dst=new short[dstLength];
  }
 else {
    logger.error("Unknown data type " + outputDataType);
    return BUFFER_PROCESSED_FAILED;
  }
  Object src=input.getData();
synchronized (src) {
    Dimension inputSize=inputFormat.getSize();
    FFMPEG.img_convert(dst,dstFmt,src,srcFmt,inputSize.width,inputSize.height,outputWidth,outputHeight);
  }
  output.setData(dst);
  output.setDuration(input.getDuration());
  output.setFlags(input.getFlags());
  output.setFormat(outputFormat);
  output.setLength(dstLength);
  output.setOffset(0);
  output.setSequenceNumber(input.getSequenceNumber());
  output.setTimeStamp(input.getTimeStamp());
  return BUFFER_PROCESSED_OK;
}
