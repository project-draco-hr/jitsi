{
  this.parentProvider=parentProvider;
  this.connection=connection;
  this.discoveryManager=ServiceDiscoveryManager.getInstanceFor(connection);
  this.features=new ArrayList<String>();
  this.unmodifiableFeatures=Collections.unmodifiableList(this.features);
  this.identities=new ArrayList<DiscoverInfo.Identity>();
  this.cacheNonCaps=cacheNonCaps;
  DiscoverInfo.Identity identity=new DiscoverInfo.Identity("client",ServiceDiscoveryManager.getIdentityName());
  identity.setType(ServiceDiscoveryManager.getIdentityType());
  identities.add(identity);
  discoveryManager.addFeature(CapsPacketExtension.NAMESPACE);
  if (featuresToRemove != null) {
    for (    String featureToRemove : featuresToRemove)     discoveryManager.removeFeature(featureToRemove);
  }
  if (featuresToAdd != null) {
    for (    String featureToAdd : featuresToAdd)     if (!discoveryManager.includesFeature(featureToAdd))     discoveryManager.addFeature(featureToAdd);
  }
  this.capsManager=new EntityCapsManager();
  capsManager.addPacketListener(connection);
  initFeatures();
  updateEntityCapsVersion();
  connection.addPacketInterceptor(this,new PacketTypeFilter(Presence.class));
}
