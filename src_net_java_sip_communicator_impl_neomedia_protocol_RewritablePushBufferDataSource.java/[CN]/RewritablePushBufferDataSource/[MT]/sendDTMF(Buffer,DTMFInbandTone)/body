{
  Object data=buffer.getData();
  if (data != null && (buffer.getFormat() instanceof AudioFormat)) {
    Class<?> dataClass=data.getClass();
    int fromIndex=buffer.getOffset();
    AudioFormat audioFormat=(AudioFormat)buffer.getFormat();
    double samplingFrequency=audioFormat.getSampleRate();
    int sampleSizeInBits=audioFormat.getSampleSizeInBits();
    int[] sampleData=tone.getAudioSamples(samplingFrequency,sampleSizeInBits);
    IntBuffer.wrap(sampleData);
    int toIndex=fromIndex + sampleData.length * (sampleSizeInBits / 8);
    ByteBuffer newData=ByteBuffer.allocate(toIndex);
    if (audioFormat.getEndian() == AudioFormat.BIG_ENDIAN) {
      newData.order(ByteOrder.BIG_ENDIAN);
    }
 else {
      newData.order(ByteOrder.LITTLE_ENDIAN);
    }
    if (Format.byteArray.equals(dataClass)) {
      newData.put(((byte[])data),0,fromIndex);
    }
 else     if (Format.shortArray.equals(dataClass)) {
      for (int i=0; i < fromIndex; ++i) {
        newData.putShort(((short[])data)[i]);
      }
    }
 else     if (Format.intArray.equals(dataClass)) {
      for (int i=0; i < fromIndex; ++i) {
        newData.putInt(((int[])data)[i]);
      }
    }
switch (sampleSizeInBits) {
case 8:
      for (int i=0; i < sampleData.length; ++i) {
        newData.put(((byte)sampleData[i]));
      }
    break;
case 16:
  for (int i=0; i < sampleData.length; ++i) {
    newData.putShort(((short)sampleData[i]));
  }
break;
case 32:
for (int i=0; i < sampleData.length; ++i) {
newData.putInt(sampleData[i]);
}
break;
}
if (Format.byteArray.equals(dataClass)) {
buffer.setData(newData.array());
}
 else if (Format.shortArray.equals(dataClass)) {
buffer.setData(newData.asShortBuffer().array());
}
 else if (Format.intArray.equals(dataClass)) {
buffer.setData(newData.asIntBuffer().array());
}
buffer.setLength(toIndex - fromIndex);
}
}
