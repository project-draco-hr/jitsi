{
  int threadCount=mailboxIQ.getThreadCount();
  String resourceHeaderKey=threadCount > 1 ? "service.gui.NEW_GMAIL_MANY_HEADER" : "service.gui.NEW_GMAIL_HEADER";
  String resourceFooterKey=threadCount > 1 ? "service.gui.NEW_GMAIL_MANY_FOOTER" : "service.gui.NEW_GMAIL_FOOTER";
  String newMailHeader=JabberActivator.getResources().getI18NString(resourceHeaderKey,new String[]{jabberProvider.getAccountID().getService(),mailboxIQ.getUrl(),Integer.toString(threadCount)});
  StringBuffer message=new StringBuffer(newMailHeader);
  message.append("<table width=100% cellpadding=2 cellspacing=0 ");
  message.append("border=0 bgcolor=#e8eef7>");
  Iterator<MailThreadInfo> threads=mailboxIQ.threads();
  String maxThreadsStr=(String)JabberActivator.getConfigurationService().getProperty(PNAME_MAX_GMAIL_THREADS_PER_NOTIFICATION);
  int maxThreads=5;
  try {
    if (maxThreadsStr != null)     maxThreads=Integer.parseInt(maxThreadsStr);
  }
 catch (  NumberFormatException e) {
    if (logger.isDebugEnabled())     logger.debug("Failed to parse max threads count: " + maxThreads + ". Going for default.");
  }
  for (int i=0; i < maxThreads && threads.hasNext(); i++) {
    message.append(threads.next().createHtmlDescription());
  }
  message.append("</table><br/>");
  if (threadCount > maxThreads) {
    String messageFooter=JabberActivator.getResources().getI18NString(resourceFooterKey,new String[]{mailboxIQ.getUrl(),Integer.toString(threadCount - maxThreads)});
    message.append(messageFooter);
  }
  return message.toString();
}
