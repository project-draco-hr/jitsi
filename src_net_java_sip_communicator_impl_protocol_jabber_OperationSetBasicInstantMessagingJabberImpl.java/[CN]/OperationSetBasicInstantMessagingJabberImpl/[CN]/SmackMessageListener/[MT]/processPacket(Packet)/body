{
  if (!(packet instanceof org.jivesoftware.smack.packet.Message))   return;
  org.jivesoftware.smack.packet.Message msg=(org.jivesoftware.smack.packet.Message)packet;
  boolean isForwardedSentMessage=false;
  if (msg.getBody() == null) {
    CarbonPacketExtension carbonExt=(CarbonPacketExtension)msg.getExtension(CarbonPacketExtension.NAMESPACE);
    if (carbonExt == null)     return;
    isForwardedSentMessage=(carbonExt.getElementName() == CarbonPacketExtension.SENT_ELEMENT_NAME);
    List<ForwardedPacketExtension> extensions=carbonExt.getChildExtensionsOfType(ForwardedPacketExtension.class);
    if (extensions.isEmpty())     return;
    ForwardedPacketExtension forwardedExt=extensions.get(0);
    msg=forwardedExt.getMessage();
    if (msg == null || msg.getBody() == null)     return;
  }
  Object multiChatExtension=msg.getExtension("x","http://jabber.org/protocol/muc#user");
  if (multiChatExtension != null)   return;
  String userFullId=isForwardedSentMessage ? msg.getTo() : msg.getFrom();
  String userBareID=StringUtils.parseBareAddress(userFullId);
  boolean isPrivateMessaging=false;
  ChatRoom privateContactRoom=((OperationSetMultiUserChatJabberImpl)jabberProvider.getOperationSet(OperationSetMultiUserChat.class)).getChatRoom(userBareID);
  if (privateContactRoom != null) {
    isPrivateMessaging=true;
  }
  if (logger.isDebugEnabled()) {
    if (logger.isDebugEnabled())     logger.debug("Received from " + userBareID + " the message "+ msg.toXML());
  }
  Message newMessage=createMessage(msg.getBody(),DEFAULT_MIME_TYPE,msg.getPacketID());
  PacketExtension ext=msg.getExtension("http://jabber.org/protocol/xhtml-im");
  if (ext != null) {
    XHTMLExtension xhtmlExt=(XHTMLExtension)ext;
    Iterator<String> bodies=xhtmlExt.getBodies();
    StringBuffer messageBuff=new StringBuffer();
    while (bodies.hasNext()) {
      String body=bodies.next();
      messageBuff.append(body);
    }
    if (messageBuff.length() > 0) {
      String receivedMessage=messageBuff.toString().replaceAll("\\<[bB][oO][dD][yY].*?>","").replaceAll("\\</[bB][oO][dD][yY].*?>","");
      receivedMessage=receivedMessage.replaceAll("&apos;","&#39;");
      newMessage=createMessage(receivedMessage,HTML_MIME_TYPE,msg.getPacketID());
    }
  }
  PacketExtension correctionExtension=msg.getExtension(MessageCorrectionExtension.NAMESPACE);
  String correctedMessageUID=null;
  if (correctionExtension != null) {
    correctedMessageUID=((MessageCorrectionExtension)correctionExtension).getCorrectedMessageUID();
  }
  Contact sourceContact=opSetPersPresence.findContactByID((isPrivateMessaging ? userFullId : userBareID));
  if (msg.getType() == org.jivesoftware.smack.packet.Message.Type.error) {
    if (isPrivateMessaging && sourceContact == null) {
      if (privateContactRoom != null) {
        XMPPError error=packet.getError();
        int errorResultCode=ChatRoomMessageDeliveryFailedEvent.UNKNOWN_ERROR;
        if (error != null && error.getCode() == 403) {
          errorResultCode=ChatRoomMessageDeliveryFailedEvent.FORBIDDEN;
        }
        String errorReason=error.getMessage();
        ChatRoomMessageDeliveryFailedEvent evt=new ChatRoomMessageDeliveryFailedEvent(privateContactRoom,null,errorResultCode,errorReason,new Date(),newMessage);
        ((ChatRoomJabberImpl)privateContactRoom).fireMessageEvent(evt);
      }
      return;
    }
    if (logger.isInfoEnabled())     logger.info("Message error received from " + userBareID);
    int errorCode=packet.getError().getCode();
    int errorResultCode=MessageDeliveryFailedEvent.UNKNOWN_ERROR;
    if (errorCode == 503) {
      org.jivesoftware.smackx.packet.MessageEvent msgEvent=(org.jivesoftware.smackx.packet.MessageEvent)packet.getExtension("x","jabber:x:event");
      if (msgEvent != null && msgEvent.isOffline()) {
        errorResultCode=MessageDeliveryFailedEvent.OFFLINE_MESSAGES_NOT_SUPPORTED;
      }
    }
    MessageDeliveryFailedEvent ev=new MessageDeliveryFailedEvent(newMessage,sourceContact,correctedMessageUID,errorResultCode);
    if (ev != null)     fireMessageEvent(ev);
    return;
  }
  putJidForAddress(userFullId,msg.getThread());
  if (sourceContact == null) {
    if (logger.isDebugEnabled())     logger.debug("received a message from an unknown contact: " + userBareID);
    sourceContact=opSetPersPresence.createVolatileContact(userFullId,isPrivateMessaging);
  }
  Date timestamp=new Date();
  PacketExtension delay=msg.getExtension("x","jabber:x:delay");
  if (delay != null && delay instanceof DelayInformation) {
    timestamp=((DelayInformation)delay).getStamp();
  }
  delay=msg.getExtension("delay","urn:xmpp:delay");
  if (delay != null && delay instanceof DelayInfo) {
    timestamp=((DelayInfo)delay).getStamp();
  }
  ContactResource resource=((ContactJabberImpl)sourceContact).getResourceFromJid(userFullId);
  EventObject msgEvt=null;
  if (!isForwardedSentMessage)   msgEvt=new MessageReceivedEvent(newMessage,sourceContact,resource,timestamp,correctedMessageUID,isPrivateMessaging,privateContactRoom);
 else   msgEvt=new MessageDeliveredEvent(newMessage,sourceContact,timestamp);
  if (msgEvt != null)   fireMessageEvent(msgEvt);
}
