{
  Credentials creds=null;
  if (usernameParamIx != -1 && usernameParamIx < formParamNames.length && passwordParamIx != -1 && passwordParamIx < formParamNames.length) {
    URL url=new URL(address);
    HTTPCredentialsProvider prov=(HTTPCredentialsProvider)httpClient.getCredentialsProvider();
    while (creds == null || creds.getUserPrincipal() == null || StringUtils.isNullOrEmpty(creds.getUserPrincipal().getName())) {
      creds=prov.getCredentials(new AuthScope(url.getHost(),url.getPort()));
      if (creds == null && !prov.retry()) {
        return null;
      }
    }
  }
  List<NameValuePair> parameters=new ArrayList<NameValuePair>();
  if (formParamNames != null) {
    for (int i=0; i < formParamNames.length; i++) {
      if (i == usernameParamIx && creds != null) {
        parameters.add(new BasicNameValuePair(formParamNames[i],creds.getUserPrincipal().getName()));
      }
 else       if (i == passwordParamIx && creds != null) {
        parameters.add(new BasicNameValuePair(formParamNames[i],creds.getPassword()));
      }
 else {
        parameters.add(new BasicNameValuePair(formParamNames[i],formParamValues[i]));
      }
    }
  }
  String s=URLEncodedUtils.format(parameters,HTTP.UTF_8);
  StringEntity entity=new StringEntity(s,HTTP.UTF_8);
  entity.setContentType(URLEncodedUtils.CONTENT_TYPE);
  postMethod.setEntity(entity);
  return executeMethod(httpClient,postMethod);
}
