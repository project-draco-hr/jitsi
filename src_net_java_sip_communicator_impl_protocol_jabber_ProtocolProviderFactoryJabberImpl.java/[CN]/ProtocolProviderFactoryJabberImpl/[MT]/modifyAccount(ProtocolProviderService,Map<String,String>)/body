{
  BundleContext context=JabberActivator.getBundleContext();
  if (context == null)   throw new NullPointerException("The specified BundleContext was null");
  if (protocolProvider == null)   throw new NullPointerException("The specified Protocol Provider was null");
  JabberAccountID accountID=(JabberAccountID)protocolProvider.getAccountID();
  if (!registeredAccounts.containsKey(accountID))   return;
  ServiceRegistration registration=registeredAccounts.get(accountID);
  if (registration != null) {
    try {
      if (protocolProvider.isRegistered())       protocolProvider.unregister();
    }
 catch (    Throwable e) {
    }
    registration.unregister();
  }
  if (accountProperties == null)   throw new NullPointerException("The specified property map was null");
  accountProperties.put(USER_ID,accountID.getUserID());
  String serverAddress=accountProperties.get(SERVER_ADDRESS);
  if (serverAddress == null)   throw new NullPointerException("null is not a valid ServerAddress");
  if (accountProperties.get(SERVER_PORT) == null) {
    accountProperties.put(SERVER_PORT,"5222");
  }
  if (!accountProperties.containsKey(PROTOCOL))   accountProperties.put(PROTOCOL,ProtocolNames.JABBER);
  accountID.setAccountProperties(accountProperties);
  this.storeAccount(accountID);
  Hashtable<String,String> properties=new Hashtable<String,String>();
  properties.put(PROTOCOL,ProtocolNames.JABBER);
  properties.put(USER_ID,accountID.getUserID());
  ((ProtocolProviderServiceJabberImpl)protocolProvider).initialize(accountID.getUserID(),accountID);
  this.storeAccount(accountID);
  registration=context.registerService(ProtocolProviderService.class.getName(),protocolProvider,properties);
  registeredAccounts.put(accountID,registration);
}
