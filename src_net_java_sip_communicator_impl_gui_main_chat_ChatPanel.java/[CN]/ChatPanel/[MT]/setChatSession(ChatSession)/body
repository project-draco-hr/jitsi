{
  this.chatSession=chatSession;
  if ((this.chatSession != null) && this.chatSession.isContactListSupported()) {
    topPanel.remove(conversationPanelContainer);
    TransparentPanel rightPanel=new TransparentPanel(new BorderLayout());
    Dimension chatContactPanelSize=new Dimension(150,100);
    rightPanel.setMinimumSize(chatContactPanelSize);
    rightPanel.setPreferredSize(chatContactPanelSize);
    this.chatContactListPanel=new ChatRoomMemberListPanel(this);
    this.chatContactListPanel.setOpaque(false);
    topSplitPane=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
    topSplitPane.setBorder(null);
    topSplitPane.setOneTouchExpandable(true);
    topSplitPane.setOpaque(false);
    topSplitPane.setResizeWeight(1.0D);
    Color msgNameBackground=Color.decode(ChatHtmlUtils.MSG_NAME_BACKGROUND);
    if (topSplitPane.getUI() instanceof BasicSplitPaneUI) {
      ((BasicSplitPaneUI)topSplitPane.getUI()).getDivider().setBorder(BorderFactory.createLineBorder(msgNameBackground));
    }
    ChatTransport chatTransport=chatSession.getCurrentChatTransport();
    JPanel localUserLabelPanel=new JPanel(new BorderLayout());
    JLabel localUserLabel=new JLabel(chatTransport.getProtocolProvider().getAccountID().getDisplayName());
    localUserLabel.setFont(localUserLabel.getFont().deriveFont(Font.BOLD));
    localUserLabel.setHorizontalAlignment(SwingConstants.CENTER);
    localUserLabel.setBorder(BorderFactory.createEmptyBorder(2,0,3,0));
    localUserLabel.setForeground(Color.decode(ChatHtmlUtils.MSG_IN_NAME_FOREGROUND));
    localUserLabelPanel.add(localUserLabel,BorderLayout.CENTER);
    localUserLabelPanel.setBackground(msgNameBackground);
    rightPanel.add(localUserLabelPanel,BorderLayout.NORTH);
    rightPanel.add(chatContactListPanel,BorderLayout.CENTER);
    topSplitPane.setLeftComponent(conversationPanelContainer);
    topSplitPane.setRightComponent(rightPanel);
    topPanel.add(topSplitPane);
  }
 else {
    if (topSplitPane != null) {
      if (chatContactListPanel != null) {
        topSplitPane.remove(chatContactListPanel);
        chatContactListPanel=null;
      }
      this.messagePane.remove(topSplitPane);
      topSplitPane=null;
    }
    topPanel.add(conversationPanelContainer);
  }
  if (chatSession instanceof MetaContactChatSession) {
    if (subjectPanel != null) {
      this.remove(subjectPanel);
      subjectPanel=null;
      this.revalidate();
      this.repaint();
    }
    writeMessagePanel.setTransportSelectorBoxVisible(true);
    ActionMap amap=this.getActionMap();
    amap.put("ChangeProtocol",new ChangeTransportAction());
    InputMap imap=this.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    imap.put(KeyStroke.getKeyStroke(KeyEvent.VK_P,KeyEvent.CTRL_DOWN_MASK),"ChangeProtocol");
  }
 else   if (chatSession instanceof ConferenceChatSession) {
    ConferenceChatSession confSession=(ConferenceChatSession)chatSession;
    writeMessagePanel.setTransportSelectorBoxVisible(false);
    confSession.addLocalUserRoleListener(this);
    confSession.addMemberRoleListener(this);
    ((ChatRoomWrapper)chatSession.getDescriptor()).getChatRoom().addMemberPropertyChangeListener(this);
    subjectPanel=new ChatRoomSubjectPanel((ConferenceChatSession)chatSession);
    this.add(subjectPanel,BorderLayout.NORTH);
  }
  if (chatContactListPanel != null) {
    Iterator<ChatContact<?>> chatParticipants=chatSession.getParticipants();
    while (chatParticipants.hasNext())     chatContactListPanel.addContact(chatParticipants.next());
  }
}
