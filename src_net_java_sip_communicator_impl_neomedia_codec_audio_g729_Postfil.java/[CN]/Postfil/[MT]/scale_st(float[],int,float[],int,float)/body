{
  float gain_in, gain_out;
  float g0;
  gain_in=0.f;
  for (int i=sig_in_offset, toIndex=sig_in_offset + L_SUBFR; i < toIndex; i++) {
    gain_in+=Math.abs(sig_in[i]);
  }
  if (gain_in == 0.f) {
    g0=0.f;
  }
 else {
    gain_out=0.f;
    for (int i=sig_out_offset, toIndex=sig_out_offset + L_SUBFR; i < toIndex; i++) {
      gain_out+=Math.abs(sig_out[i]);
    }
    if (gain_out == 0.f) {
      gain_prec=0.f;
      return gain_prec;
    }
    g0=gain_in / gain_out;
    g0*=AGC_FAC1;
  }
  for (int i=sig_out_offset, toIndex=sig_out_offset + L_SUBFR; i < toIndex; i++) {
    gain_prec*=AGC_FAC;
    gain_prec+=g0;
    sig_out[i]*=gain_prec;
  }
  return gain_prec;
}
