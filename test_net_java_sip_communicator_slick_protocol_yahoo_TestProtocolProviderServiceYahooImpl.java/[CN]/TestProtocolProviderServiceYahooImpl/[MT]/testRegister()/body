{
  fixture.provider1.addRegistrationStateChangeListener(regEvtCollector1);
  fixture.provider2.addRegistrationStateChangeListener(regEvtCollector2);
  fixture.provider3.addRegistrationStateChangeListener(regEvtCollector3);
  fixture.provider1.register(new SecurityAuthorityImpl(System.getProperty(YahooProtocolProviderServiceLick.ACCOUNT_1_PREFIX + ProtocolProviderFactory.PASSWORD).toCharArray()));
  fixture.provider2.register(new SecurityAuthorityImpl(System.getProperty(YahooProtocolProviderServiceLick.ACCOUNT_2_PREFIX + ProtocolProviderFactory.PASSWORD).toCharArray()));
  fixture.provider3.register(new SecurityAuthorityImpl(System.getProperty(YahooProtocolProviderServiceLick.ACCOUNT_3_PREFIX + ProtocolProviderFactory.PASSWORD).toCharArray()));
  logger.debug("Waiting for registration to complete ...");
  regEvtCollector1.waitForEvent(15000);
  regEvtCollector2.waitForEvent(40000);
  regEvtCollector3.waitForEvent(60000);
  assertTrue("No events were dispatched during the registration process.",regEvtCollector1.collectedNewStates.size() > 0);
  assertTrue("No registration event notifying of registration was dispatched. " + "All events were: " + regEvtCollector1.collectedNewStates,regEvtCollector1.collectedNewStates.contains(RegistrationState.REGISTERED));
  assertTrue("No events were dispatched during the registration process " + "of provider2.",regEvtCollector2.collectedNewStates.size() > 0);
  assertTrue("No registration event notifying of registration was dispatched. " + "All events were: " + regEvtCollector2.collectedNewStates,regEvtCollector2.collectedNewStates.contains(RegistrationState.REGISTERED));
  assertTrue("No events were dispatched during the registration process " + "of provider3.",regEvtCollector3.collectedNewStates.size() > 0);
  assertTrue("No registration event notifying of registration was dispatched. " + "All events were: " + regEvtCollector3.collectedNewStates,regEvtCollector3.collectedNewStates.contains(RegistrationState.REGISTERED));
  fixture.provider1.removeRegistrationStateChangeListener(regEvtCollector1);
  fixture.provider2.removeRegistrationStateChangeListener(regEvtCollector2);
  fixture.provider3.removeRegistrationStateChangeListener(regEvtCollector3);
}
