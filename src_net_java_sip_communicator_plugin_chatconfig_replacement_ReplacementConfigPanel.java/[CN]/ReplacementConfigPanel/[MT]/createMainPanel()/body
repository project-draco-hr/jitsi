{
  JPanel mainPanel=new TransparentPanel(new BorderLayout());
  mainPanel.setLayout(new BoxLayout(mainPanel,BoxLayout.Y_AXIS));
  enableSmiley=new SIPCommCheckBox(ChatConfigActivator.getResources().getI18NString("plugin.chatconfig.replacement.ENABLE_SMILEY_STATUS"));
  mainPanel.add(enableSmiley,BorderLayout.WEST);
  enableSmiley.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      saveData();
    }
  }
);
  mainPanel.add(Box.createVerticalStrut(10));
  enableReplacement=new SIPCommCheckBox(ChatConfigActivator.getResources().getI18NString("plugin.chatconfig.replacement.ENABLE_REPLACEMENT_STATUS"));
  mainPanel.add(enableReplacement,BorderLayout.WEST);
  enableReplacement.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      saveData();
      table.revalidate();
      table.repaint();
    }
  }
);
  table=new JTable();
  table.setShowGrid(false);
  table.setTableHeader(null);
  table.setOpaque(true);
  table.setBackground(Color.white);
  JScrollPane tablePane=new JScrollPane(table);
  tablePane.setOpaque(false);
  tablePane.setPreferredSize(new Dimension(mainPanel.getWidth(),150));
  tablePane.setAlignmentX(LEFT_ALIGNMENT);
  JPanel container=new TransparentPanel(new BorderLayout());
  container.setPreferredSize(new Dimension(mainPanel.getWidth(),200));
  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));
  JLabel label=new JLabel(ChatConfigActivator.getResources().getI18NString("plugin.chatconfig.replacement.REPLACEMENT_SOURCES"));
  label.setDisplayedMnemonic(ChatConfigActivator.getResources().getI18nMnemonic("plugin.chatconfig.replacement.REPLACEMENT_SOURCES"));
  label.setLabelFor(table);
  container.add(label);
  container.add(Box.createRigidArea(new Dimension(0,5)));
  container.add(tablePane,BorderLayout.EAST);
  table.setModel(new ReplacementConfigurationTableModel(ReplacementService.sourceList));
  table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent e){
      if (e.getValueIsAdjusting())       return;
      if (table.getSelectedRow() != -1) {
        boolean isEnabled=(Boolean)table.getValueAt(table.getSelectedRow(),0);
        if (isEnabled) {
          enableReplacement.setSelected(true);
        }
      }
    }
  }
);
  TableColumnModel tableColumnModel=table.getColumnModel();
  TableColumn tableColumn=tableColumnModel.getColumn(0);
  tableColumn.setMaxWidth(tableColumn.getMinWidth());
  table.setDefaultRenderer(table.getColumnClass(1),new FixedTableCellRenderer());
  mainPanel.add(Box.createVerticalStrut(10));
  mainPanel.add(container,BorderLayout.WEST);
  return mainPanel;
}
