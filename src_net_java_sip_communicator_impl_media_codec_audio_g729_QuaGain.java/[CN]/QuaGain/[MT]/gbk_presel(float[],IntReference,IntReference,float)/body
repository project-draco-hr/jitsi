{
  float INV_COEF=Ld8k.INV_COEF;
  int NCAN1=Ld8k.NCAN1;
  int NCAN2=Ld8k.NCAN2;
  int NCODE1=Ld8k.NCODE1;
  int NCODE2=Ld8k.NCODE2;
  float[][] coef=TabLd8k.coef;
  float[] thr1=TabLd8k.thr1;
  float[] thr2=TabLd8k.thr2;
  int _cand1=cand1.value, _cand2=cand2.value;
  float x, y;
  x=(best_gain[1] - (coef[0][0] * best_gain[0] + coef[1][1]) * gcode0) * INV_COEF;
  y=(coef[1][0] * (-coef[0][1] + best_gain[0] * coef[0][0]) * gcode0 - coef[0][0] * best_gain[1]) * INV_COEF;
  if (gcode0 > 0.0f) {
    _cand1=0;
    do {
      if (y > thr1[_cand1] * gcode0)       (_cand1)++;
 else       break;
    }
 while ((_cand1) < (NCODE1 - NCAN1));
    _cand2=0;
    do {
      if (x > thr2[_cand2] * gcode0)       (_cand2)++;
 else       break;
    }
 while ((_cand2) < (NCODE2 - NCAN2));
  }
 else {
    _cand1=0;
    do {
      if (y < thr1[_cand1] * gcode0)       (_cand1)++;
 else       break;
    }
 while ((_cand1) < (NCODE1 - NCAN1));
    _cand2=0;
    do {
      if (x < thr2[_cand2] * gcode0)       (_cand2)++;
 else       break;
    }
 while ((_cand2) < (NCODE2 - NCAN2));
  }
  cand1.value=_cand1;
  cand2.value=_cand2;
}
