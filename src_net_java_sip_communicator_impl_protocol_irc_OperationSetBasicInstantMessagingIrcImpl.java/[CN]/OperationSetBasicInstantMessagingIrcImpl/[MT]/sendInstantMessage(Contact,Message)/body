{
  if (!(original instanceof MessageIrcImpl)) {
    LOGGER.error("Invalid class of Message implementation received. " + "Not sending message.");
    return;
  }
  final IrcConnection connection=this.provider.getIrcStack().getConnection();
  if (connection == null) {
    throw new IllegalStateException("Connection is not available.");
  }
  final MessageDeliveredEvent[] msgDeliveryPendingEvts=messageDeliveryPendingTransform(new MessageDeliveredEvent(original,to));
  if (msgDeliveryPendingEvts.length == 0) {
    LOGGER.warn("Message transformation result does not contain a " + "single message. Nothing to send.");
    return;
  }
  try {
    for (    MessageDeliveredEvent event : msgDeliveryPendingEvts) {
      if (event == null) {
        continue;
      }
      final Message transformed=event.getSourceMessage();
      MessageIrcImpl message=this.createMessage(transformed.getContent(),transformed.getContentType(),transformed.getEncoding(),"");
      try {
        if (!event.isMessageEncrypted() && message.isCommand()) {
          try {
            connection.getMessageManager().command(to,message);
          }
 catch (          final UnsupportedCommandException e) {
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.UNSUPPORTED_OPERATION);
          }
catch (          BadCommandException e) {
            LOGGER.error("Error during command execution. " + "This is most likely due to a bug in the " + "implementation of the command.",e);
            fireMessageDeliveryFailed(message,to,MessageDeliveryFailedEvent.INTERNAL_ERROR);
          }
catch (          BadCommandInvocationException e) {
            StringBuilder helpText=new StringBuilder();
            if (e.getCause() != null) {
              helpText.append(e.getCause().getMessage());
              helpText.append('\n');
            }
            helpText.append(e.getHelp());
            MessageIrcImpl helpMessage=new MessageIrcImpl(helpText.toString(),OperationSetBasicInstantMessaging.DEFAULT_MIME_TYPE,OperationSetBasicInstantMessaging.DEFAULT_MIME_ENCODING,"Command usage:");
            MessageReceivedEvent helpEvent=new MessageReceivedEvent(helpMessage,to,new Date(),MessageReceivedEvent.SYSTEM_MESSAGE_RECEIVED);
            fireMessageEvent(helpEvent);
          }
        }
 else {
          connection.getMessageManager().message(to,message);
        }
      }
 catch (      RuntimeException e) {
        LOGGER.debug("Failed to deliver (raw) message: " + message);
        throw e;
      }
    }
    fireMessageDelivered(original,to);
  }
 catch (  OperationFailedException e) {
    fireMessageDeliveryFailed(original,to,e.getErrorCode());
  }
catch (  RuntimeException e) {
    LOGGER.warn("Failed to deliver message: " + original,e);
    fireMessageDeliveryFailed(original,to,MessageDeliveryFailedEvent.NETWORK_FAILURE);
  }
}
