{
  String version=System.getProperty("java.version");
  String vmVendor=System.getProperty("java.vendor");
  String osName=System.getProperty("os.name");
  if (osName.startsWith("Windows"))   System.setProperty("sun.java2d.d3d","false");
  setScHomeDir(osName);
  if (version.startsWith("1.4") || vmVendor.startsWith("Gnu") || vmVendor.startsWith("Free")) {
    String os="";
    if (osName.startsWith("Mac"))     os=ChangeJVMFrame.MAC_OSX;
 else     if (osName.startsWith("Linux"))     os=ChangeJVMFrame.LINUX;
 else     if (osName.startsWith("Windows"))     os=ChangeJVMFrame.WINDOWS;
    ChangeJVMFrame changeJVMFrame=new ChangeJVMFrame(os);
    changeJVMFrame.setLocation(Toolkit.getDefaultToolkit().getScreenSize().width / 2 - changeJVMFrame.getWidth() / 2,Toolkit.getDefaultToolkit().getScreenSize().height / 2 - changeJVMFrame.getHeight() / 2);
    changeJVMFrame.setVisible(true);
    return;
  }
  LaunchArgHandler argHandler=LaunchArgHandler.getInstance();
  int argHandlerRes=argHandler.handleArgs(args);
  if (argHandlerRes == LaunchArgHandler.ACTION_EXIT || argHandlerRes == LaunchArgHandler.ACTION_ERROR) {
    System.exit(argHandler.getErrorCode());
  }
  if (argHandlerRes != LaunchArgHandler.ACTION_CONTINUE_LOCK_DISABLED) {
    SipCommunicatorLock lock=new SipCommunicatorLock();
    int lockResult=lock.tryLock(args);
    if (lockResult == SipCommunicatorLock.LOCK_ERROR) {
      System.err.println("Failed to lock SIP Communicator's " + "configuration directory.\n" + "Try launching with the --multiple param.");
      System.exit(SipCommunicatorLock.LOCK_ERROR);
    }
 else     if (lockResult == SipCommunicatorLock.ALREADY_STARTED) {
      System.out.println("SIP Communicator is already running and will " + "handle your parameters (if any).\n" + "Launch with the --multiple param to override this "+ "behaviour.");
      System.exit(SipCommunicatorLock.SUCCESS);
    }
 else     if (lockResult == SipCommunicatorLock.SUCCESS) {
    }
  }
  System.setOut(new ScStdOut(System.out));
  Main.main(new String[0]);
}
